/*                        TODO LIST
 *
 * 4.    Implement Configuration
 * 5.    Heat up every step mode
 * 11.   Finish Settings Page
 * 12.   Do Start, Stop
 * 8.    Finish up doPage and Main Page
 * 9.    Translate.
 * 10.   The-End (Web-Side)
 *
 */
#include <WiFi.h>
#include <WiFiClient.h>
#include <ESPmDNS.h>
#include <C:\Users\Vity1\Documents\Arduino\libraries\DallasTemperature\DallasTemperature.h>
#include <C:\Users\Vity1\Documents\Arduino\libraries\Time-master\TimeLib.h>
#include <HTTPClient.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <SPIFFS.h>
#include "FS.h"
#include <C:\Users\Vity1\Documents\PlatformIO\Projects\Estufa_WebPage\.pio\libdeps\esp32dev\ESPAsyncWebServer-esphome\src\ESPAsyncWebServer.h>
#include <DNSServer.h>
#include "SD_MMC.h"
#include "esp_task_wdt.h"

#define DEBUGWEB
// #define DEBUGLOG
#define DEBUGGENERAL
// #define DEBUGTEMP
// #define DEBUGRAMP

// Globals

// protects the SD_MMC fs of acessing more than available free files descriptors
static SemaphoreHandle_t sd_mutex;

static uint8_t valid_adc_pins[] = {32, 33, 34, 35, 36, 37, 38, 39};

#define HISTORY_SIZE 1000              // how many points of data are store
#define MAX_ADC_CORRECTION_EXPONENT 15 // not actually nescessary, use to define array sizes
#define MAX_STEPS 22
#define default_relay_pin 13
#define default_one_wire_bus 16
#define MAX_CACHE_PAGES 10

#define GET_VARIABLE_NAME(Variable) (#Variable)

float DS18Temp[HISTORY_SIZE];
int DS18Time[HISTORY_SIZE];
uint16_t DS18_CurrentIndex = 0;
uint LastTime = 0;
int cycle = 0;
uint startup_time = 0;
int random_temp = 300; // delete this after using

byte currentProg = 0;

// Update Variables
bool is_updating = false;
float update_progress = 0;

// Flags
bool new_ramp = false;
bool new_step = false;
bool new_prog = false;
bool new_relay_state = false;
bool boot_reset = false;

bool is_time_configured = false;

bool is_SPIFFSS_Mount = false;
bool is_SD_Mount = false;
void File_Writer(String, String, bool, bool);
void clearDir(String);
String getApAvailables();

int oldMillis = 0;
int oldLoopMillis = 0;

// references for funcitons
String normalizedDayMonth();
String getCurrentProcess();
void StandardTesting();

struct DebugFlags
{
    bool web = false;
    bool ramp = false;
    bool temp = false;
    bool log = false;
    bool general = false;
};

AsyncWebServer server(80);

struct Settings
{

    // Will mantain temperature within this tolerance.
    float tolerance = 0.5;
    // Will mantain temperature within this tolerance.
    float calibration = 0;
    // Resolution of DS18b20 Sensor
    byte TEMPERATURE_RESOLUTION = 9;

    // Web Site Credentials
    String www_username = "admin";
    String www_password = "admin";

    // Wifi Credentials
    String WIFI_SSID = "MCarvalho";
    String WIFI_PASSWORD = "salvador";
    /*missing*/ bool forceAP = false;
    String WIFI_AP_SSID = "ESP32";
    String WIFI_AP_PASSWORD = "ESP32ESP32";

    bool use_static_ip = false;
    String static_ip = "";

    /*
     * Available Services: Email = 0
     *                     Google Drive = 1
     *                     IFTTT = 2
     */
    byte UploadServiceType = 0;
    bool enable_upload = false;
    String UploadLogin = "";
    String UploadPassword = "";

    uint auto_upload_freq = 0;
    bool auto_upload = false;

    // Sample rate for logging
    uint16_t sample_freq = 1;

    // Config of Pins
    uint8_t RELAY_PIN = 13;
    uint8_t ONEWIRE_BUS = 16;

    /*
        0 = DS1820
        1 = DS1820 High Temp
        2 = NTC thermopar
    */
    byte temp_sensor_type = 0;

    uint NTC_BASE_RESISTANCE = 100000;
    uint16_t NTC_BETA = 3450;
    int8_t NTC_BASE_TEMP = 25;
    uint8_t NTC_READ_PIN = 12;
    uint8_t NTC_ENABLE_PIN = 0;

    bool ADC_REQ_CORRECT = false;
    String ADC_CORRECTION = "1x0+2e-9x1+-3e-9x2+0.35e-9x5+3.5e-9x4+-0.513514546848464e-9x6+;";

    // Enables Cacheing;
    bool enableCache = true;
    bool continousLog = true;

    // Backup Options
    bool enable_backup = false;
    uint backup_freq = 0;
    uint lastbackup = 0;

    String host_name = "Estufa";

    /*Creates a string with the variables to be parsed elsewhere.
     *@param complete: wheater or not you want to send passwords aswell.
     */
    String toString(bool complete = false)
    {
        String message = "";
        message += "tolerance=";
        message += tolerance;
        message += ",calibration=";
        message += calibration;
        message += ",TEMPERATURE_RESOLUTION=";
        message += TEMPERATURE_RESOLUTION;
        message += ",sample_freq=";
        message += sample_freq;
        message += ",WIFI_SSID=";
        message += WIFI_SSID;
        if (complete)
        {
            message += ",WIFI_PASSWORD=";
            message += WIFI_PASSWORD;
        }
        message += ",www_username=";
        message += www_username;
        if (complete)
        {
            message += ",www_password=";
            message += www_password;
        }
        message += ",WIFI_AP_SSID=";
        message += WIFI_AP_SSID;
        if (complete)
        {
            message += ",WIFI_AP_PASSWORD=";
            message += WIFI_AP_PASSWORD;
        }
        message += ",use_static_ip=";
        message += use_static_ip;
        message += ",static_ip=";
        message += static_ip;
        message += ",enable_upload=";
        message += enable_upload;
        message += ",UploadServiceType=";
        message += UploadServiceType;
        message += ",UploadLogin=";
        message += UploadLogin;
        if (complete)
        {
            message += ",UploadPassword=";
            message += UploadPassword;
        }
        message += ",enableCache=";
        message += enableCache;
        message += ",continousLog=";
        message += continousLog;
        message += ",enable_backup=";
        message += enable_backup;
        message += ",backup_freq=";
        message += backup_freq;
        message += ",lastbackup=";
        message += lastbackup;
        message += ",RELAY_PIN=";
        message += RELAY_PIN;
        message += ",ONEWIRE_BUS=";
        message += ONEWIRE_BUS;
        message += ",host_name=";
        message += host_name;
        message += ",temp_sensor_type=";
        message += temp_sensor_type;
        message += ",NTC_BASE_RESISTANCE=";
        message += NTC_BASE_RESISTANCE;
        message += ",NTC_BASE_TEMP=";
        message += NTC_BASE_TEMP;
        message += ",NTC_READ_PIN=";
        message += NTC_READ_PIN;
        message += ",NTC_ENABLE_PIN=";
        message += NTC_ENABLE_PIN;
        message += ",NTC_BETA=";
        message += NTC_BETA;
        message += ",auto_upload=";
        message += auto_upload;
        message += ",auto_upload_freq=";
        message += auto_upload_freq;
        message += ",ADC_REQ_CORRECT=";
        message += ADC_REQ_CORRECT;
        message += ",ADC_CORRECTION=";
        message += ADC_CORRECTION;

        message += ",;";

        return message;
    }

    // Resets the config to  its hardcoded values
    void reset()
    {
        tolerance = 0.5;
        TEMPERATURE_RESOLUTION = 9;
        www_username = "admin";
        www_password = "admin";
        sample_freq = 1;
        WIFI_SSID = "MCarvalho";
        WIFI_PASSWORD = "salvador";
    }

    // parse new values from a string.
    void fromString(String newConfig, bool partialUpdate = false)
    {
        if (!partialUpdate)
            reset();

        String value = "";
        String variable = "";
        char nextChar;
        bool isValue = false;
        for (size_t i = 0; i < newConfig.length(); i++)
        {
            nextChar = newConfig[i];
            if (!isValue)
            {
                if (nextChar != '=')
                    variable += nextChar;
                else
                    isValue = true;
            }
            else
            {
                if (nextChar != ',')
                    value += nextChar;
                else
                {
                    if (variable == "tolerance")
                        tolerance = atof(value.c_str());
                    else if (variable == "calibration")
                        calibration = atof(value.c_str());
                    else if (variable == "WIFI_SSID")
                        WIFI_SSID = value;
                    else if (variable == "WIFI_PASSWORD")
                        WIFI_PASSWORD = value;
                    else if (variable == "WIFI_AP_SSID")
                        WIFI_AP_SSID = value;
                    else if (variable == "WIFI_AP_PASSWORD")
                        WIFI_AP_PASSWORD = value;
                    else if (variable == "www_username")
                        www_username = value;
                    else if (variable == "www_password")
                        www_password = value;
                    else if (variable == "TEMPERATURE_RESOLUTION")
                        TEMPERATURE_RESOLUTION = atoi(value.c_str());
                    else if (variable == "sample_freq")
                        sample_freq = atoi(value.c_str());
                    else if (variable == "use_static_ip ")
                        use_static_ip = value == "1" ? true : false;
                    else if (variable == "static_ip")
                        static_ip = value;
                    else if (variable == "enableCache")
                        enableCache = value == "1" ? true : false;
                    else if (variable == "continousLog")
                        continousLog = value == "1" ? true : false;
                    else if (variable == "enable_backup")
                        enable_backup = value == "1" ? true : false;
                    else if (variable == "backup_freq")
                        backup_freq = atoi(value.c_str());
                    else if (variable == "lastbackup")
                        lastbackup = atoi(value.c_str());
                    else if (variable == "host_name")
                        host_name = value;
                    else if (variable == "RELAY_PIN")
                        RELAY_PIN = atoi(value.c_str());
                    else if (variable == "ONEWIRE_BUS")
                        ONEWIRE_BUS = atoi(value.c_str());
                    else if (variable == "UploadServiceType")
                        UploadServiceType = atoi(value.c_str());
                    else if (variable == "enable_upload")
                        enable_upload = value == "1" ? true : false;
                    else if (variable == "UploadLogin")
                        UploadLogin = value;
                    else if (variable == "UploadPassword")
                        UploadPassword = value;
                    else if (variable == "temp_sensor_type")
                        temp_sensor_type = atoi(value.c_str());
                    else if (variable == "NTC_BASE_RESISTANCE")
                        NTC_BASE_RESISTANCE = atoi(value.c_str());
                    else if (variable == "NTC_BASE_TEMP")
                        NTC_BASE_TEMP = atoi(value.c_str());
                    else if (variable == "NTC_READ_PIN")
                        NTC_READ_PIN = atoi(value.c_str());
                    else if (variable == "NTC_ENABLE_PIN")
                        NTC_ENABLE_PIN = atoi(value.c_str());
                    else if (variable == "NTC_BETA")
                        NTC_BETA = atoi(value.c_str());
                    else if (variable == "auto_upload")
                        auto_upload = value == "1" ? true : false;
                    else if (variable == "auto_upload_freq")
                        auto_upload_freq = atoi(value.c_str());
                    else if (variable == "ADC_REQ_CORRECT")
                        ADC_REQ_CORRECT = value == "1" ? true : false;
                    else if (variable == "ADC_CORRECTION")
                        ADC_CORRECTION = value;

                    value = "";
                    variable = "";
                    isValue = false;
                }
            }
        }

        // Validate Configs
    }

    // Saves the current config to '/config.cfg' in the SD card
    void save()
    {
        String _setting = toString(true);
        String saveString = "";
        saveString += checksum(_setting);
        saveString += ':';
        saveString += _setting;
        // Serial.println(_setting);
        // Serial.println(checksum(_setting));
        // Serial.println(saveString);
        File_Writer("/config.cfg", saveString, false, false);
        return;
    }

    bool LoadValidated(String newSetting)
    {
        bool checksumPassed = false;
        bool done = false;
        byte beginIndex = 0;
        String newchecksum = "";

        for (size_t i = 0; i < newSetting.length() && !done; i++)
        {
            if (newSetting[i] != ':')
                newchecksum += newSetting[i];
            else
            {
                done = true;
                beginIndex = i + 1;
            }
        }
        String SettingsString = newSetting.substring(beginIndex);

        if (checksum(SettingsString) == atoi(newchecksum.c_str()) && done) // if done is false, atoi(newchecksum.c_str()) = 0, therefore u can get
        {
            checksumPassed = true;
            fromString(SettingsString);
        }

        // Serial.println(checksum(SettingsString));
        // Serial.println(atoi(newchecksum.c_str()));
        // Serial.println(SettingsString);

        return checksumPassed;
    }

private:
    byte checksum(String evalString, int base = 100)
    {
        uint totalSum = 0;
        for (size_t i = 0; i < evalString.length(); i++)
        {
            totalSum += (int)evalString[0];
        }

        return totalSum % base;
    }

    // Makes Sure that this config is valid
    void checkConfigs()
    {
        // Check if the ntc pin is valid
        if (!contains(valid_adc_pins, NTC_READ_PIN))
        {

            temp_sensor_type = 0; // Disable NTC mode
            NTC_READ_PIN = 33;
        }
    }

    bool contains(uint8_t array[], uint8_t value)
    {
        size_t array_size = sizeof(array) / sizeof(uint8_t);

        for (size_t i = 0; i < array_size; i++)
        {
            if (array[i] == value)
                return true;
        }
        return false;
    }
};

struct ADCCorrector
{
private:
    /*Coefficients array. Expoents are the indexes
     * avg calc time @ max expoent 6 : double 13us, float 4us
     */
    double Coeffs[MAX_ADC_CORRECTION_EXPONENT];

public:
    // Simpler pow functions for integers
    uint myPow(uint value, byte expoent)
    {
        uint finalValue = 1;

        // if (expoent == 0)
        // return 1;

        for (size_t i = 0; i < expoent; i++)
        {
            finalValue = finalValue * value;
        }

        return finalValue;
    }

    /*Get Coefficients from a String
     * @param Polynome: Should be in the format "'coeff'x'expoent'+"
     * do note that the + sign at the end of every x factor is nescessary.
     * The coefficients found will be store at the index of their expoent.
     * you can change @param MAX_ADC_CORRECTION_EXPONENT as it will determine
     * the boundries of the object.
     */
    void fromString(String Polynome)
    {

        char nextChar = ' ';
        bool xFound = false;
        String coeff = "";
        String expoent = "";

        for (size_t i = 0; i < Polynome.length(); i++)
        {
            nextChar = Polynome[i];

            if (xFound)
            {
                if (nextChar == '+')
                {
                    if (coeff == "")
                        coeff == "0";

                    if (expoent == "")
                        expoent == "0";

                    byte index = atoi(expoent.c_str());

                    if (index >= 0 && index < MAX_ADC_CORRECTION_EXPONENT)
                        Coeffs[index] = atof(coeff.c_str());

                    xFound = false;
                    coeff = "";
                    expoent = "";
                }
                else
                    expoent += nextChar;
            }
            else
            {
                if (nextChar == 'x')
                    xFound = true;
                else
                    coeff += nextChar;
            }
        }
    }

    // Sets all values in the array to 0;
    void setup()
    {
        for (size_t i = 0; i < MAX_ADC_CORRECTION_EXPONENT; i++)
        {
            Coeffs[i] = 0;
        }
    }

    // Returns the ajusted value (passes the @param value by the polynome stored)
    uint16_t calculate(uint16_t value)
    {
        float trueValue = 0;
        for (size_t i = 0; i < 10; i++)
        {
            trueValue += Coeffs[i] * myPow(value, i);
        }
        return round(trueValue);
    }

    // Prints the current polynome to Serial
    // a different HardwareSerial can be Specified
    void print(HardwareSerial serial = Serial)
    {

        serial.println("Current Polynome: ");
        serial.print("	");
        bool first = true;
        for (size_t i = 0; i < MAX_ADC_CORRECTION_EXPONENT; i++)
        {
            if (Coeffs[i] != 0)
            {
                if (!first)
                    serial.print(" + ");

                first = false;
                serial.print(String(Coeffs[i], 10));
                serial.print(" * x^");
                serial.print(i);
            }
        }
        serial.println();
    }

    // Produces a String with the current polynome that can be used to recreate this object.
    String toString()
    {
        String msg = "";
        for (size_t i = 0; i < MAX_ADC_CORRECTION_EXPONENT; i++)
        {
            if (Coeffs[i] != 0)
            {
                msg += Coeffs[i];
                msg += "x";
                msg += i;
                msg += "+";
            }
        }

        return msg;
    }
};

ADCCorrector adcCorrector;
Settings Config;

struct HeatRamp
{
private:
    String csvFile = "/Logs/Noname.csv";
    String logFile = "/Logs/Noname.log";

public:
    String projectName;
    byte currentstep = 0;
    byte totalsteps = 0;
    float temperatureSteps[MAX_STEPS + 1];
    float minuteSteps[MAX_STEPS + 1];
    unsigned int StepsTimes[MAX_STEPS + 1];
    unsigned int HeatingSteps[MAX_STEPS + 1];

    unsigned int startTime = 0;
    unsigned int startHeating = 0;
    unsigned int endTime = 0;

    bool programmedStart = false;
    bool heatUp = false;
    bool heatUpEveryStep = false;
    bool heating = false;
    bool running = false;
    bool finished = false;
    bool configured = false;
    // Prints the Heatramp Object
    void print()
    {
        String ramp = "";
        ramp += "Name: ";
        ramp += projectName;
        ramp += "\nTotal steps: ";
        ramp += totalsteps;
        ramp += "\nTemperature, Time, Step Time\n";
        for (size_t i = 0; i < totalsteps; i++)
        {
            ramp += temperatureSteps[i];
            ramp += ", ";
            ramp += minuteSteps[i];
            ramp += ", ";
            ramp += StepsTimes[i];
            ramp += ",\n";
        }
        ramp += "Log file: ";
        ramp += logFile;
        ramp += "\nStart: ";
        ramp += startTime;
        ramp += "\nProgram Start: ";
        ramp += programmedStart;
        ramp += "\nHeatUp: ";
        ramp += heatUp;

        Serial.println(ramp);
    }
    // Sets the Log Filename
    void startLogs()
    {
        generateCsv();
        // generateLog();
    }
    void generateCsv()
    {
        if (!is_SD_Mount)
            return;
        String baseName = "/Logs/" + projectName;
        bool nameAvailable = false;
        u_int nextName = 1;
        if (!SD_MMC.exists(baseName + ".csv"))
        {
            csvFile = baseName + ".csv";
            // createLogFile(logFile);
            nameAvailable = true;
        }

        while (!nameAvailable)
        {
            String newName = baseName + "(" + nextName + ").csv";
            nextName++;
            if (!SD_MMC.exists(newName))
            {
                csvFile = newName;
                nameAvailable = true;
            }
        }

        Serial.print("Creating '");
        Serial.println(csvFile);
        File_Writer(csvFile, "'Time Stamp','Relative Time','Temperature','Set Temperature','Relay Status','Current Step','Comment'\n", true, false);
    }
    // Starts the Log file
    void generateLog()
    {
        if (!is_SD_Mount)
            return;
        String baseName = csvFile.substring(0, csvFile.lastIndexOf('.'));
        bool nameAvailable = false;
        u_int nextName = 1;
        baseName += "[";
        baseName += normalizedDayMonth();
        baseName += "]";
        if (!SD_MMC.exists(baseName + ".log"))
        {
            logFile = baseName + ".log";
            nameAvailable = true;
        }

        while (!nameAvailable)
        {
            String newName = baseName + "(" + nextName + ").csv";
            nextName++;
            if (!SD_MMC.exists(newName))
            {
                logFile = newName;
                nameAvailable = true;
            }
        }

        Serial.print("Creating '");
        Serial.print(logFile);
        Serial.println("'. Time, Temp, SetTemp, Relay, CurrentStep");
        File_Writer(logFile, "Time,Temperature,Set Temperature, Relay Status, Current Step\n", true, false);
    }
    // Calculate the StepTimes array
    void calculateStepTimes()
    {
        Serial.println("Calculating StepTimes: ");
        for (size_t i = 0; i < totalsteps; i++)
        {
            StepsTimes[i] = startTime;
            for (size_t j = 0; j < i + 1; j++)
            {
                StepsTimes[i] += (int)(minuteSteps[j] * 60);
            }
            Serial.print("Step: ");
            Serial.print(i);
            Serial.print(" -> ");
            Serial.println(StepsTimes[i]);
        }
    }
    // logs the temperature and all the variables to a csv file associated to your projectname.
    void csv(float temperature, bool RelayStatus, String comment = "")
    {
        String Message = "";
        Message += now();
        Message += ",";
        if (heating)
        {
            if (now() > startHeating)
            {
                Message += startHeating - now();
            }
            else
            {
                Message += now() - startHeating;
            }
        }
        else
        {
            if (now() > startTime)
            {
                Message += startTime - now();
            }
            else
            {
                Message += now() - startTime;
            }
        }
        Message += ",";
        Message += temperature;
        Message += ",";
        Message += temperatureSteps[currentstep];
        Message += ",";
        Message += RelayStatus;
        Message += ",";
        Message += currentstep + 1;
        Message += ",";
        Message += comment;
        Message += "\n";
        File_Writer(csvFile, Message, true, false);
    }
    void log(String message)
    {
        return;
        // String _message = "[";
        // _message += now() - startTime;
        // _message += "] ";
        // File_Writer(logFile, _message, true, false);
    }
    // Resets the HeatRamp Object --not otimized
    void reset()
    {
        Serial.println("Reseting HeatRamp...");
        endTime = 0;
        currentstep = 0;
        projectName = "No Name";
        logFile = "/Logs/Noname.log";
        csvFile = "/Logs/Noname.csv";
        programmedStart = false;
        startTime = 0;
        startHeating = 0;
        totalsteps = 0;
        heating = false;
        heatUp = false;
        running = false;
        finished = false;
        configured = false;
        for (size_t i = 0; i < MAX_STEPS + 1; i++)
        {
            minuteSteps[i] = 0;
            temperatureSteps[i] = 0;
            StepsTimes[i] = 0;
        }

        return;
    }
    // Flags

    String toString()
    {
        String ramp = "";
        ramp += "pname=";
        ramp += projectName;
        ramp += ",steps=";
        ramp += totalsteps;
        ramp += ",Temp=";
        for (size_t i = 0; i < totalsteps; i++)
        {
            ramp += temperatureSteps[i];
            ramp += " ";
        }
        ramp += ",Mins=";
        for (size_t i = 0; i < totalsteps; i++)
        {
            ramp += minuteSteps[i];
            ramp += " ";
        }
        ramp += ",HeatingSteps=";
        for (size_t i = 0; i < totalsteps; i++)
        {
            ramp += HeatingSteps[i];
            ramp += " ";
        }
        ramp += ",start=";
        ramp += startTime;
        ramp += ",heatingStart=";
        ramp += startHeating;
        ramp += ",end=";
        ramp += endTime;
        ramp += ",programmedStart=";
        ramp += programmedStart;
        ramp += ",configured=";
        ramp += configured;
        ramp += ",running=";
        ramp += running;
        ramp += ",finished=";
        ramp += finished;
        ramp += ",heating=";
        ramp += heating;
        ramp += ",heatUp=";
        ramp += heatUp;
        ramp += ",heatUpEveryStep=";
        ramp += heatUpEveryStep;

        ramp += ",;";

        return ramp;
    }

    void fromString(String ramp)
    {
        String value = "";
        String variable = "";
        char nextChar;
        bool isValue = false;
        reset();

        for (size_t i = 0; i < ramp.length(); i++)
        {
            nextChar = ramp[i];
            if (!isValue)
            {
                if (nextChar != '=')
                    variable += nextChar;
                else
                    isValue = true;
            }
            else
            {
                if (nextChar != ',')
                    value += nextChar;
                else
                {
                    if (variable == "pname")
                        projectName = value;
                    else if (variable == "steps")
                        totalsteps = atoi(value.c_str());
                    else if (variable == "start")
                        startTime = atoi(value.c_str());
                    else if (variable == "heatingStart")
                        startHeating = atoi(value.c_str());
                    else if (variable == "end")
                        endTime = atoi(value.c_str());
                    else if (variable == "configured")
                        configured = value == "1" ? 1 : 0;
                    else if (variable == "running")
                        running = value == "1" ? 1 : 0;
                    else if (variable == "heating")
                        heating = value == "1" ? 1 : 0;
                    else if (variable == "finished")
                        finished = value == "1" ? 1 : 0;
                    else if (variable == "heatUp")
                        heatUp = value == "1" ? 1 : 0;
                    else if (variable == "heatUpEveryStep")
                        heatUpEveryStep = value == "1" ? 1 : 0;
                    else if (variable == "programmedStart")
                        programmedStart = value == "1" ? 1 : 0;

                    else if (variable == "Temp")
                    {
                        String _temp = "";
                        int _index = 0;
                        for (size_t i = 0; i < value.length(); i++)
                        {
                            if (value[i] == ' ')
                            {
                                if (_index < MAX_STEPS)
                                    temperatureSteps[_index] = atof(_temp.c_str());
                                _index++;
                            }
                            else
                                _temp += value[i];
                        }
                    }
                    else if (variable == "Mins")
                    {
                        String _temp = "";
                        int _index = 0;
                        for (size_t i = 0; i < value.length(); i++)
                        {
                            if (value[i] == ' ')
                            {
                                if (_index < MAX_STEPS)
                                    minuteSteps[_index] = atof(_temp.c_str());
                                _index++;
                            }
                            else
                                _temp += value[i];
                        }
                    }

                    value = "";
                    variable = "";
                    isValue = false;
                }
            }
        }
    }
};

struct HtmlCache
{
    String CachedPages[MAX_CACHE_PAGES];
    String Keys[MAX_CACHE_PAGES];

    void setup()
    {
        for (size_t i = 0; i < MAX_CACHE_PAGES; i++)
        {
            CachedPages[i] = "";
            Keys[i] = "";
        }
    }

    int Contains(String key)
    {
        for (size_t i = 0; i < MAX_CACHE_PAGES; i++)
        {
            if (key == Keys[i])
                return i;
        }
        return -1;
    }

    bool LoadPage(String key, String filename)
    {
        int index = getFreeSpace();
        if (index < 0 || index > MAX_CACHE_PAGES)
            return false;
        if (!is_SD_Mount)
            return false;
        if (!SD_MMC.exists(filename))
            return false;
        Keys[index] = key;
        File _file = SD_MMC.open(filename);
        CachedPages[index] = _file.readString();
        _file.close();
        return true;
    }

    bool releasePage(String key)
    {
        int index = Contains(key);
        if (index < 0)
            return false;

        CachedPages[index] = "";
        Keys[index] = "";

        return true;
    }

    String getPagebyIndex(int index)
    {
        if (index > -1 && index < MAX_CACHE_PAGES)
            return CachedPages[index];
        else
            return "";
    }

    String getPagebyKey(String key)
    {
        return getPagebyIndex(Contains(key));
    }

private:
    int getFreeSpace()
    {
        for (size_t i = 0; i < MAX_CACHE_PAGES; i++)
        {
            if (Keys[i] == "")
                return i;
        }
        return -1;
    }
};

struct Info
{
    byte ram = 0;
    byte SD = 0;
    byte SPIFFS_Used = 0;
    float internalTemp = 0;

    void update()
    {

        float _temp = (float)(ESP.getHeapSize() - ESP.getFreeHeap()) / ESP.getHeapSize() * 100;
        ram = round(_temp);
        if (is_SD_Mount)
        {

            _temp = 0;
            _temp = (float)SD_MMC.usedBytes() / SD_MMC.totalBytes() * 100;

            SD = round(_temp);
        }

        if (is_SPIFFSS_Mount)
        {

            _temp = 0;
            _temp = (float)SPIFFS.usedBytes() / SPIFFS.totalBytes() * 100;

            SPIFFS_Used = round(_temp);
        }

        // Implement DS18 internal Temp
        internalTemp = random(internalTemp - 5, internalTemp + 5); // delete after example
    }

    String toString(bool SendMax = false)
    {
        update();
        String Message = "";
        Message += "SD=";
        Message += SD;
        Message += ",SPIFFS=";
        Message += SPIFFS_Used;
        Message += ",ram=";
        Message += ram;
        if (SendMax)
        {
            Message += ",SDMax=";
            Message += double(SD_MMC.totalBytes());
            Message += ",ramMax=";
            Message += ESP.getHeapSize();
            Message += ",SPIFFSMax=";
            Message += SPIFFS.totalBytes();
            Message += ",bootTime=";
            Message += startup_time;
        }
        Message += ",internalTemp=";
        Message += internalTemp;
        Message += ",;";
        return Message;
    }

    void print(bool DisplayMax = false)
    {
        update();
        Serial.println("System Info:");
        Serial.print("Ram usage: ");
        Serial.print(ram);
        Serial.print("%");
        if (DisplayMax)
        {
            Serial.print(" of ");
            Serial.print((double)ESP.getHeapSize() / 1024);
            Serial.print("Kb");
        }
        Serial.println();
        Serial.print("SD Usage: ");
        Serial.print(SD);
        Serial.print("%");
        if (DisplayMax)
        {
            Serial.print(" of ");
            Serial.print((double)SD_MMC.totalBytes() / 1024 / 1024);
            Serial.print("Mb.");
        }
        Serial.println();
        Serial.print("SPIFFS Usage: ");
        Serial.print(SPIFFS_Used);
        Serial.print("%");
        if (DisplayMax)
        {
            Serial.print(" of ");
            Serial.print((double)SPIFFS.totalBytes() / 1024);
            Serial.print("kb.");
        }
        Serial.println();
        Serial.print("Temperature around the ESP: ");
        Serial.print(internalTemp);
        Serial.println(" C.");

        return;
    }
};

Info SysInfo;
HtmlCache Cache;

HeatRamp currentRamp;
HeatRamp lastRamp;

DebugFlags debug;

// Setup a oneWire instance to communicate with any OneWire devices;
OneWire *oneWire;
DallasTemperature *DS18;

String StateString()
{
    String msg = "";
    if (currentRamp.configured)
    {
        msg += "heat_ramp:";
        msg += currentRamp.toString();
    }
    msg += ";new_prog:";
    msg += currentProg;
    msg += ";current_state: ";
    msg += currentRamp.running;
    msg += ";new_step:";
    msg += currentRamp.currentstep + 1;
    msg += ";relay_status:";
    msg += digitalRead(Config.RELAY_PIN);
    msg += ";current_process:";
    if (currentRamp.running)
        msg += "Working";
    else if (currentRamp.heating)
        msg += "Heating";
    else if (currentRamp.configured && !currentRamp.finished)
        msg += "Waiting to Start";
    else
        msg += " Idle";
    msg += ';';

    return msg;
}

String getMIME(String filename)
{
    if (filename.endsWith(".htm"))
        return "text/html";
    else if (filename.endsWith(".html"))
        return "text/html";
    else if (filename.endsWith(".css"))
        return "text/css";
    else if (filename.endsWith(".js"))
        return "text/javascript";
    else if (filename.endsWith(".png"))
        return "image/png";
    else if (filename.endsWith(".gif"))
        return "image/gif";
    else if (filename.endsWith(".jpg"))
        return "image/jpeg";
    else if (filename.endsWith(".ico"))
        return "image/x-icon";
    else if (filename.endsWith(".xml"))
        return "text/xml";
    else if (filename.endsWith(".pdf"))
        return "application/x-pdf";
    else if (filename.endsWith(".zip"))
        return "application/x-zip";
    else if (filename.endsWith(".gz"))
        return "application/x-gzip";
    else if (filename.endsWith(".csv"))
        return "text/csv";
    else if (filename.endsWith(".log"))
        return "text/log";
    return "text/plain";
}

String normalizedDayMonth()
{

    if (!is_time_configured)
        return "";
    String msg = "";
    if (day() < 10)
        msg += '0';
    msg += day();
    msg += '-';
    if (month() < 10)
        msg += '0';
    msg += month();
    return msg;
}

String GetSdFileSafe(String filename)
{
    if (!is_SD_Mount)
        return "";
    String file;
    while (!xSemaphoreTake(sd_mutex, 50))
    {
        esp_task_wdt_reset();
    }
    File _file = SD_MMC.open(filename);

    file = _file.readString();
    _file.close();

    xSemaphoreGive(sd_mutex);
    return file;
}

void GeneralLog(String message)
{
    String _msg = "[";
    if (is_time_configured)
        _msg += now();
    else
    {
        _msg += "clock not synced:";
        _msg += millis();
    }
    _msg += "]>>>>>";
    _msg += message;
    _msg += "\n";
    File_Writer("/Logs/General.log", _msg, true, false);
}

void File_Writer(String Filename, String Content, bool append = false, bool useSPIFFS = false)
{
    if (!is_SD_Mount && !useSPIFFS)
    {
        Serial.println("SD not Mount");
        return;
    }
    if (!is_SPIFFSS_Mount && useSPIFFS)
    {
        Serial.println("SPIFFS not Mount");
        return;
    }

    if (Filename[0] != '/')
        Filename = '/' + Filename;

    File _file;
    if (!useSPIFFS)
    {
        if (append)
            _file = SD_MMC.open(Filename, "a");
        else
        {
            if (SD_MMC.exists(Filename))
                SD_MMC.remove(Filename);
            _file = SD_MMC.open(Filename, "w");
        }
    }
    else
    {
        if (append)
            _file = SPIFFS.open(Filename, "a");
        else
        {
            if (SPIFFS.exists(Filename))
                SPIFFS.remove(Filename);
            _file = SPIFFS.open(Filename, "w");
        }
    }
    _file.print(Content);

    _file.flush();
    _file.close();
}

void resetFlags() // Reset the flags of new data to be sent to HTTP front end
{
    new_ramp = false;
    new_step = false;
    new_prog = false;
    new_relay_state = false;
}

#pragma region Ramp Start - End

void StartRamp()
{
    String msg = "Starting new Ramp: ";
    msg += currentRamp.projectName;
    msg += "\nNow: ";
    msg += now();
    msg += "\nTimes: [";
    for (size_t i = 0; i < currentRamp.totalsteps; i++)
    {
        msg += currentRamp.minuteSteps[i];
        msg += ',';
    }
    msg += "]\nTemps: [";
    for (size_t i = 0; i < currentRamp.totalsteps; i++)
    {
        msg += currentRamp.temperatureSteps[i];
        msg += ',';
    }
    msg += "]\nSteps: ";
    msg += currentRamp.totalsteps;
    msg += "\n";
    currentRamp.log(msg);
    msg = "Starting Ramp: ";
    msg += currentRamp.projectName;
    GeneralLog(msg);
    currentRamp.running = true;
    currentRamp.finished = false;
    currentRamp.currentstep = 0;
    currentRamp.startTime = now() + 1;
    currentRamp.calculateStepTimes();
    currentRamp.csv(DS18Temp[DS18_CurrentIndex], digitalRead(Config.RELAY_PIN), "heat ramp started");
    new_ramp = true;
    Serial.println("======= Starting Heat Ramp =======");
    Serial.print("Name: ");
    Serial.println(currentRamp.projectName);
    oldMillis = millis();
}

void startHeating()
{
    Serial.println("Start Heating up to: ");
    Serial.print(currentRamp.temperatureSteps[0]);
    currentRamp.heating = true;
    currentRamp.startHeating = now();
    currentRamp.csv(DS18Temp[DS18_CurrentIndex], digitalRead(Config.RELAY_PIN), "Heating Started");
}

void resetRamp()
{
    lastRamp.fromString(currentRamp.toString());
    currentRamp.reset();
    currentProg = 0;
}

void EndRamp()
{
    currentRamp.running = false;
    currentRamp.heating = false;
    currentRamp.finished = true;
    currentRamp.endTime = now();
    GeneralLog("Ending Ramp: " + currentRamp.projectName);
    Serial.println("======= Ending Heat Ramp =======");
}

#pragma endregion

String listLogFiles()
{
    if (!is_SD_Mount)
        return "error:SD card not found;";

    String msg = "files:";

    File root = SD_MMC.open("/Logs");
    File file = root.openNextFile();

    while (file)
    {
        String s = file.name();
        msg += s;
        msg += '=';
        msg += (float)file.size() / 1024;
        msg += ',';
        // msg += file.getLastWrite();
        // msg += ',';
        esp_task_wdt_reset();
        file = root.openNextFile();
    }

    msg += ';';
    return msg;
}

void handleRequestHist(AsyncWebServerRequest *request)
{

    if (!is_time_configured)
    {
        request->send(200, "txt/plain", "set_time;");
        return;
    }
    bool done = false;
    String msg = "temp_history:";
    for (int i = 0; !done; i++)
    {
        if (DS18Temp[i] == 0 && DS18Time[i] == 0)
            done = true;
        else if (i + 1 >= HISTORY_SIZE)
            done = true;
        else
        {
            msg += DS18Time[i];
            msg += " ";
            msg += DS18Temp[i];
            msg += ",";
        }
    }
    msg += ';';
    msg += "new_temp:";
    int x = DS18_CurrentIndex - 1;
    if (x < 0)
        x = HISTORY_SIZE - 1;
    msg += DS18Time[x];
    msg += " ";
    msg += DS18Temp[x];
    msg += ";";

    msg += StateString();

    AsyncWebServerResponse *res = request->beginResponse(200, "text/plain", msg);
    request->send(res);
    return;
}

void handleRequestUpdate(AsyncWebServerRequest *request)
{
    String message = "new_temp:";
    int x = DS18_CurrentIndex - 1;
    if (x < 0)
        x = HISTORY_SIZE - 1;
    message += DS18Time[x];
    message += " ";
    message += DS18Temp[x];
    message += ";";

    if (!is_time_configured)
    {
        message += "set_time;";
    }
    else
    {
        message += StateString();
    }

    request->send(200, "text/plain", message);
}

void handleNewRamp(AsyncWebServerRequest *request)
{
    if (!currentRamp.running)
    {
        if (currentRamp.configured)
        {
            lastRamp.fromString(currentRamp.toString());
            currentRamp.reset();
        }
        currentRamp.totalsteps = atoi(request->arg((size_t)0).c_str());
        int j = 0;
        for (size_t i = 1; i < request->args(); i++)
        {
            if (i + 1 < request->args())
            {
                if (request->arg(i) != "" && request->arg(i + 1) != "")
                {
                    currentRamp.temperatureSteps[j] = atof(request->arg(i).c_str());
                    currentRamp.minuteSteps[j] = atof(request->arg(i + 1).c_str());
                    j++;
                }
                else
                    currentRamp.totalsteps--;
            }
            i++;
        }
        currentRamp.currentstep = 0;
        String start = request->arg("_start");
        if (request->arg("heatup") == "on")
            currentRamp.heatUp = true;
        currentRamp.projectName = request->arg("pname");
        currentRamp.startLogs();
        currentRamp.print();
        currentRamp.configured = true;
        if (start == "on")
        {
            if (currentRamp.heatUp)
                startHeating();
            else
                StartRamp();
        }
    }
    request->send(200, "text/html", "<html><script>window.location.assign(\"/\")</script></html>");
}

void SendLargeFiles(AsyncWebServerRequest *request, String _filename)
{
    if (debug.web)
    {
        Serial.print("Sending Large File: ");
        Serial.println(_filename);
    }

    while (xSemaphoreTake(sd_mutex, (TickType_t)50) != 1)
    {
        esp_task_wdt_reset();
    }

    AsyncWebServerResponse *response = request->beginResponse(SD_MMC, _filename, getMIME(_filename));
    request->send(response);
    xSemaphoreGive(sd_mutex);
    /*  */
    return;
}
void getTime()
{
    Serial.println("Syncing Time Online");
    HTTPClient http;
    http.begin("http://worldtimeapi.org/api/timezone/America/Bahia.txt"); // HTTP
    int httpCode = http.GET();
    // httpCode will be negative on error
    if (httpCode > 0)
    {
        // HTTP header has been send and Server response header has been handled
        // file found at server
        if (httpCode == HTTP_CODE_OK)
        {
            Serial.printf("[HTTP] OK... code: %d\n", httpCode);
            String payload = http.getString();
            char str[payload.length() + 1];
            strcpy(str, payload.c_str());
            char *pch;
            pch = strtok(str, ":\n");
            int i = 0;
            //  int raw_offset = 0;
            while (pch != NULL)
            {

                i++;
                if (i == 23)
                {
                    //    raw_offset = atoi(pch);
                }
                if (i == 27)
                {
                    setTime(atoi(pch));
                }
                // printf("%d: %s\n", i, pch);
                pch = strtok(NULL, ":\n");
            }
            is_time_configured = true;
            startup_time = now();
            String msg = "Time Synced ";
            msg += millis();
            msg += "ms from boot.";
            GeneralLog(msg);
            StandardTesting();
        }
        else
        {
            Serial.printf("[HTTP] Error code: %d\n", httpCode);
        }
    }
    else
    {
        Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
    }
    http.end();
}

float readTemperature(bool raw = false)
{
    if (Config.temp_sensor_type >= 3)
        return 0;
    float _temp;

    if (Config.temp_sensor_type == 0 || Config.temp_sensor_type == 0) // DS18b20
    {
        DS18->requestTemperatures();
        _temp = DS18->getTempCByIndex(0);
    }
    else if (Config.temp_sensor_type == 2) // NTC thermopar
    {
        float average = 0;

        // These 2 will be #defines
        int NTC_SAMPLES = 5000;
        int NTC_SERIES_RESISTOR = 1000;

        if (Config.NTC_ENABLE_PIN > 0)
            digitalWrite(Config.NTC_ENABLE_PIN, 1);

        for (uint16_t i = 0; i < NTC_SAMPLES; i++)
        {
            average += analogRead(Config.NTC_READ_PIN);
            delayMicroseconds(30);
        }
        if (Config.NTC_ENABLE_PIN > 0)
            digitalWrite(Config.NTC_ENABLE_PIN, 0);

        average = average / NTC_SAMPLES;

        // convert the value to resistance
        average = 4095 / average - 1;
        average = NTC_SERIES_RESISTOR / average;

        float steinhart;
        steinhart = (float)average / Config.NTC_BASE_RESISTANCE;   // (R/Ro)
        steinhart = (float)log(steinhart);                         // ln(R/Ro)
        steinhart = (float)steinhart / Config.NTC_BETA;            // 1/Beta * ln(R/Ro)
        steinhart += (float)1.0 / (Config.NTC_BASE_TEMP + 273.15); // + (1/To)
        steinhart = (float)1.0 / steinhart;                        // Invert
        steinhart -= (float)273.15;                                // convert absolute temp to C

        _temp = steinhart;
    }

    bool sim = true;

    if (sim)
    {
        _temp = (float)random_temp / 10;
    }
    if (!raw)
    {
        _temp = (float)_temp + Config.calibration;
    }

    return (float)_temp;
}

// most important
void updateTemperatures()
{
    float _temp = readTemperature();

    // ReadError

    if (now() >= LastTime + Config.sample_freq)
    {

        if (currentRamp.running || currentRamp.heating)
        {
            if (digitalRead(Config.RELAY_PIN))
                random_temp = random(random_temp, random_temp + 50);
            else
                random_temp = random(random_temp - 50, random_temp);
        }
        else
        {
            random_temp = random(random_temp - 50, random_temp + 50);
        }

        /*String file = "";
        file += "(";
        file += LineCounter;
        file += ") - ";
        file += now();
        file += " - ";
        file += _temp;
        file += "\n";
        File_Writer("/Logs/test.log", file, true);
        LineCounter++;*/

        resetFlags();
        if (is_time_configured)
        {

            if (DS18_CurrentIndex >= HISTORY_SIZE)
            {
                cycle++;
                DS18_CurrentIndex = 0;
            }
            DS18Temp[DS18_CurrentIndex] = _temp;
            DS18Time[DS18_CurrentIndex] = now();
            if (debug.general)
            {
                Serial.print("time:");
                Serial.print(is_time_configured);
                Serial.print(".cycle:");
                Serial.print(cycle);
                Serial.print(".index:");
                Serial.print(DS18_CurrentIndex);
                Serial.print(".Temp:");
                Serial.print(DS18Temp[DS18_CurrentIndex]);
                Serial.print(".Time:");
                Serial.print(DS18Time[DS18_CurrentIndex]);
                Serial.print(".Time from boot:");
                Serial.println(now() - startup_time);
            }
            DS18_CurrentIndex++;
        }
        LastTime = now();
        if (debug.temp)
        {
            Serial.print("current temp: ");
            Serial.print(_temp);
            Serial.println();
        }

        if (currentRamp.running || currentRamp.heating)
        {
            currentRamp.csv(_temp, digitalRead(Config.RELAY_PIN));
        }
    }

    // TODO GREENHOUSE CONTROL
    if (currentRamp.running)
    {
        if (now() >= currentRamp.StepsTimes[currentRamp.currentstep])
        {
            int timeup = millis() - oldMillis;
            String msg = "[";
            msg += timeup;
            msg += " ms.] ";

            currentRamp.currentstep++;
            msg += ">>> step: ";
            if (currentRamp.currentstep >= currentRamp.totalsteps)
                msg += "-";
            else
                msg += currentRamp.currentstep;
            msg += ". Time: ";
            msg += now();
            msg += ". next step: ";
            if (currentRamp.currentstep + 1 >= currentRamp.totalsteps)
                msg += "-";
            else
                msg += currentRamp.StepsTimes[currentRamp.currentstep];
            msg += "\n";
            currentRamp.log(msg);
            Serial.print(msg);
            oldMillis = millis();
            if (currentRamp.currentstep >= currentRamp.totalsteps)
            {
                currentRamp.currentstep--;
                String msg2 = "Ramp Finished. now: ";
                msg2 += now();
                msg2 += ". Step: ";
                msg2 += currentRamp.currentstep;
                msg2 += ".";
                currentRamp.log(msg);
                new_prog = true;
                currentProg = 100;
                currentRamp.csv(_temp, digitalRead(Config.RELAY_PIN), "heat ramp finished");
                EndRamp();
            }
            else
            {
                String comment = "new step:";
                comment += currentRamp.currentstep + 1;
                currentRamp.csv(_temp, digitalRead(Config.RELAY_PIN), comment);
                new_step = true;
            }
        }
        bool oldRelayState = digitalRead(Config.RELAY_PIN);

        // Serial.print(">>>>>>");Serial.println(" _temp < currentRamp.temperatureSteps[currentRamp.currentstep] && oldRelayState");
        // High Temp
        /*
        Serial.print("old: ");
        Serial.print(oldRelayState);
        Serial.print("-t: ");
        Serial.print(_temp);
        Serial.print("-st: ");
        Serial.print( currentRamp.temperatureSteps[currentRamp.currentstep]);
         Serial.print("-ev: ");
        Serial.println(_temp < currentRamp.temperatureSteps[currentRamp.currentstep]);
*/
        if (_temp > currentRamp.temperatureSteps[currentRamp.currentstep] + Config.tolerance && oldRelayState)
        {
            digitalWrite(Config.RELAY_PIN, 0);
            new_relay_state = true;
        }
        // Low Temp
        else if (_temp < currentRamp.temperatureSteps[currentRamp.currentstep] - Config.tolerance && !oldRelayState)
        {
            digitalWrite(Config.RELAY_PIN, 1);
            new_relay_state = true;
        }

        int raw_current = now() - currentRamp.startTime;
        int raw_end = currentRamp.StepsTimes[currentRamp.totalsteps - 1] - currentRamp.startTime;
        byte new_percent = map(raw_current, 0, raw_end, 0, 100);
        // byte new_percent = map(now() - currentRamp.startTime,0,computedEnd - currentRamp.startTime,0,100);

        if (new_percent != currentProg)
        {
            // Serial.print("percent: ");
            // Serial.print(new_percent);
            if (debug.ramp)
            {
                Serial.print("percent: ");
                Serial.print(new_percent);
                Serial.print("%. curr: ");
                Serial.print(raw_current);
                Serial.print(" secs. end: ");
                Serial.print(raw_end);
                Serial.println();
            }
            new_prog = true;
            currentProg = new_percent;
        }
    }

    else if (currentRamp.heating)
    {
        bool oldRelayState = digitalRead(Config.RELAY_PIN);
        if (_temp > currentRamp.temperatureSteps[0] + Config.tolerance && oldRelayState)
        {
            digitalWrite(Config.RELAY_PIN, 0);
            new_relay_state = true;
        }
        if (_temp < currentRamp.temperatureSteps[0] - Config.tolerance && !oldRelayState)
        {
            digitalWrite(Config.RELAY_PIN, 1);
            new_relay_state = true;
        }

        if (_temp >= currentRamp.temperatureSteps[0] - Config.tolerance && _temp <= currentRamp.temperatureSteps[0] + Config.tolerance)
        {
            currentRamp.log("Heating done. Starting ramp.");
            StartRamp();
            currentRamp.csv(_temp, digitalRead(Config.RELAY_PIN), "heating finished");
            currentRamp.heating = false;
        }
    }
    else if (now() > currentRamp.endTime + (HISTORY_SIZE * Config.sample_freq) && currentRamp.finished)
        resetRamp();
}

void handleStart(AsyncWebServerRequest *request)
{

    if (!currentRamp.running)
        StartRamp();

    String msg = "ramp_start:";
    msg += currentRamp.startTime;
    msg += ';';
    msg += "current_state:";
    msg += "true;";
    request->send(200, "text/plain", msg);
}

void handleStop(AsyncWebServerRequest *request)
{
    if (currentRamp.running)
        EndRamp();
    String msg = "";
    request->send(200, "text/plain", msg);
}

void handleReqState(AsyncWebServerRequest *request)
{
    String msg = StateString();
    // Serial.println(msg);
    request->send(200, "text/plain", msg);
}

void handleSetTime(AsyncWebServerRequest *request)
{

    // prevents override --dont trust clients if u can trust time api
    //  if(is_time_configured)
    //  return;

    if (request->hasArg("time"))
    {
        Serial.print("time recieved from client: ");
        Serial.println(atoi(request->arg((size_t)0).c_str()));
        setTime(atoi(request->arg((size_t)0).c_str()));
        is_time_configured = true;
        startup_time = now() - millis() / 1000;
        String msg = "Time Synced ";
        msg += millis();
        msg += "ms from boot.";
        GeneralLog(msg);
        StandardTesting();
    }

    request->send(200, "text/plain", "set_time-sucess");
    return;
}

void handleWebServer(AsyncWebServerRequest *request)
{

    // if (!request->authenticate(Config.www_username.c_str(), Config.www_password.c_str()))
    // {
    //     request->requestAuthentication();
    //     return;
    // }

    /// Check if file exists
    int a = millis();
    String filename = "/Web";
    String apiname = request->url();

    if (apiname.endsWith("/"))
        apiname += "MainPage.html";
    filename += apiname;

    if (debug.web)
    {
        Serial.print("filename: ");
        Serial.print(filename);
        Serial.print("  -----  apiname: ");
        Serial.println(apiname);
    }

    if (apiname == "/reqespupdate")
    {
        if (!is_updating)
        {
            request->send(200, "text/plain", "error:OTA Failed;");
        }
        else
        {
            String msg = "update_progress:";
            msg += update_progress;
            msg += ';';
            request->send(200, "text/plain", msg);
        }

        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    if (is_updating)
    {
        if (apiname != "/Updating.html" && apiname != "/Common.css")
            request->send(200, "text/plain", "go:/Updating.html;");
        else
        {
            if (is_SD_Mount)
                request->send(200, "text/html", GetSdFileSafe(filename));
        }

        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }

    if (Config.enableCache)
    {
        int cache = Cache.Contains(apiname);
        if (debug.web)
        {
            Serial.print("cache location: ");
            Serial.println(cache);
        }
        if (cache >= 0)
        {
            AsyncWebServerResponse *res = request->beginResponse(200, getMIME(apiname), Cache.getPagebyIndex(cache));
            request->send(res);
            if (debug.web)
            {
                Serial.print("Service Time: ");
                Serial.print(millis() - a);
                Serial.println("ms.");
            }
            return;
        }
    }

    if (apiname == "/requpdate")
    {
        handleRequestUpdate(request);
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/reqstate")
    {
        request->send(200, "text/plain", StateString());
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/reqhist")
    {
        handleRequestHist(request);
        return;
    }
    else if (apiname == "/do")
    {
        handleNewRamp(request);
        request->send(200, "text/html", "<html><script>window.location.assign(\"/\")</script></html>");
    }
    else if (apiname == "/dodo")
    {
        String message = "File Not Found\n\n";
        message += "URI: ";
        message += request->url();
        message += "\nMethod: ";
        message += request->method();
        message += "\nArguments: ";
        message += request->args();
        message += "\n";
        int params = request->params();

        for (uint8_t i = 0; i < params; i++)
        {
            AsyncWebParameter *p = request->getParam(i);
            if (p->isFile())
            { // p->isPost() is also true
                message += "FILE[";
                message += p->name();
                message += "]: ";
                message += p->value();
                message += ", size: ";
                message += p->size();
                message += '\n';
            }
            else if (p->isPost())
            {
                message += "POST[";
                message += p->name();
                message += "]: ";
                message += p->value();
                message += ", size: ";
                message += p->size();
                message += '\n';
            }
            else
            {
                message += "GET[";
                message += p->name();
                message += "]: ";
                message += p->value();
                message += ", size: ";
                message += p->size();
                message += '\n';
            }
            message += " " + request->argName(i) + ": " + request->arg(i) + "\n";
        }
        request->send(200, "text/html", message);
    }
    else if (apiname == "/settime")
    {
        handleSetTime(request);
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/deleteAllFiles")
    {
        clearDir("/Logs");
        AsyncWebServerResponse *res = request->beginResponse(200, "text/plain", listLogFiles());
        request->send(res);
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/csv")
    {
        String filename = "/Logs/";
        filename += request->arg("fileName");
        if (SD_MMC.exists(filename))
        {
            SendLargeFiles(request, filename);
        }
        else
            request->send(200, "text/plain", "error:filenotfound;");
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/fileslist")
    {
        String msg = listLogFiles();
        AsyncWebServerResponse *res = request->beginResponse(200, "text/plain", msg);
        request->send(res);

        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/deleteFile")
    {
        String filename = "/Logs/";
        filename += request->arg("fileName");
        String Message = "";
        if (SD_MMC.exists(filename))
        {
            if (filename != "/Logs/General.log")
            {
                SD_MMC.remove(filename);
                String logMsg = "File deleted: ";
                logMsg += filename;
                logMsg += ".";
                GeneralLog(logMsg);
                Message += "delete_sucessful:";
                Message += filename;
                Message += ";";
            }
            else
            {
                Message += "error:Acess Denied.\nYou don't have permission to delete the General Log;";
            }
        }
        else
            Message += "error:File was not Found;";
        Message += listLogFiles();
        AsyncWebServerResponse *res = request->beginResponse(200, "text/plain", Message);
        request->send(res);
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/loadconfig")
    {
        String config_msg = "config:";
        config_msg += Config.toString();
        request->send(200, "text/plain", config_msg);
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/saveconfig")
    {
    }
    else if (apiname == "/systeminfo")
    {
        bool complete = false;
        if (request->hasArg("complete"))
            complete = true;

        String msg = "sysinfo:";
        msg += SysInfo.toString(complete);
        request->send(200, "text/plain", msg);
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/reqwifisearch")
    {
        WiFi.scanNetworks(true);
        while (WiFi.scanComplete() < 0)
        {
            esp_task_wdt_reset();
        }

        String msg = "wifiAP:";
        msg += getApAvailables();
        msg += ";";
        AsyncWebServerResponse *res = request->beginResponse(200, "text/plain", msg);
        request->send(res);

        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/newcaltest")
    {
        // new_cal:raw:cal;
        String msg = "new_cal:";
        float temp = readTemperature();
        msg += temp;
        msg += ':';
        if (request->hasArg("cal"))
            msg += temp + atof(request->arg("cal").c_str());
        AsyncWebServerResponse *res = request->beginResponse(200, "text/plain", msg);
        request->send(res);

        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/newconfig")
    {
        if (request->hasArg("config"))
            Config.fromString(request->arg("config"));
        if (debug.general)
        {
            Serial.print("New Config Recieved:  '");
            Serial.print(Config.toString());
            Serial.println("'");
        }

        if (request->hasArg("reset"))
        {
            if (request->arg("reset") == "on")
            {
                Serial.println("New Configs Saved, ESP reseting....");
            }
        }

        AsyncWebServerResponse *res = request->beginResponse(200, "text/plain", "done");
        request->send(res);

        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }

    if (is_SD_Mount)
    {
        if (debug.web)
        {
            Serial.println("looking in SD Card");
        }

        if (SD_MMC.exists(filename))
        {
            SendLargeFiles(request, filename);
            if (debug.web)
            {
                Serial.print("Service Time: ");
                Serial.print(millis() - a);
                Serial.println("ms.");
            }
            return;
        }
        else if (SD_MMC.exists(filename + ".html"))
        {
            SendLargeFiles(request, filename + ".html");
            if (debug.web)
            {
                Serial.print("Service Time: ");
                Serial.print(millis() - a);
                Serial.println("ms.");
            }
            return;
        }
        else if (SD_MMC.exists(filename + ".css"))
        {
            SendLargeFiles(request, filename + ".css");
            if (debug.web)
            {
                Serial.print("Service Time: ");
                Serial.print(millis() - a);
                Serial.println("ms.");
            }
            return;
        }
        else if (SD_MMC.exists(filename + ".js"))
        {
            SendLargeFiles(request, filename + ".js");
            if (debug.web)
            {
                Serial.print("Service Time: ");
                Serial.print(millis() - a);
                Serial.println("ms.");
            }
            return;
        }
        else if (SD_MMC.exists(apiname))
        {
            SendLargeFiles(request, apiname);
            if (debug.web)
            {
                Serial.print("Service Time: ");
                Serial.print(millis() - a);
                Serial.println("ms.");
            }
            return;
        }
    }

    else if (is_SPIFFSS_Mount)
    {
        if (debug.web)
        {
            Serial.println("looking in SPIFFS");
        }

        if (SPIFFS.exists(filename))
        {
            File _file = SPIFFS.open(filename);
            request->send(200, getMIME(filename), _file.readString());
            _file.close();
            return;
        }
        else if (SPIFFS.exists(filename + ".html"))
        {
            File _file = SPIFFS.open(filename + ".html");
            request->send(200, getMIME(filename + ".html"), _file.readString());
            _file.close();
            Serial.print(millis() - a);
            Serial.println("ms.");
            return;
        }
        else if (SPIFFS.exists(filename + ".css"))
        {
            File _file = SPIFFS.open(filename + ".css");
            request->send(200, getMIME(filename + ".css"), _file.readString());
            _file.close();
            return;
        }
        else if (SPIFFS.exists(filename + ".js"))
        {
            File _file = SPIFFS.open(filename + ".js");
            request->send(200, getMIME(filename + ".js"), _file.readString());
            _file.close();
            return;
        }
    }

    String message = "File Not Found\n\n";
    message += "URI: ";
    message += request->url();
    message += "\nMethod: ";
    message += request->method();
    message += "\nArguments: ";
    message += request->args();
    message += "\n";

    for (uint8_t i = 0; i < request->args(); i++)
    {
        message += " " + request->argName(i) + ": " + request->arg(i) + "\n";
    }
    request->send(404, "text/plain", message);
    if (debug.web)
    {
        Serial.println(message);
        Serial.print("Service Time: ");
        Serial.print(millis() - a);
        Serial.println("ms.");
    }
    return;
}

class EstufaRequestHandler : public AsyncWebHandler
{
public:
    EstufaRequestHandler() {}
    virtual ~EstufaRequestHandler() {}

    bool canHandle(AsyncWebServerRequest *request)
    {
        // request->addInterestingHeader("ANY");
        return true;
    }

    void handleRequest(AsyncWebServerRequest *request)
    {
        handleWebServer(request);
    }
};

String getApAvailables()
{
    String returnmsg = "";
    byte numSsid = WiFi.scanComplete();
    if (numSsid == 0xFE)
    {
        numSsid = WiFi.scanNetworks();
    }
    for (byte i = 0; i < numSsid; i++)
    {
        returnmsg += WiFi.SSID(i);
        returnmsg += '=';
        returnmsg += WiFi.RSSI(i);
        returnmsg += ',';
    }
    return returnmsg;
}

#pragma region OTA
void startOTA()
{
    String type;
    is_updating = true;
    // caso a atualização esteja sendo gravada na memória flash externa, então informa "flash"
    SPIFFS.end();
    if (ArduinoOTA.getCommand() == 0)
        type = "flash";
    else                     // caso a atualização seja feita pela memória interna (file system), então informa "filesystem"
        type = "filesystem"; // U_SPIFFS
    // exibe mensagem junto ao tipo de gravação
    Serial.println("Start updating " + type);
}
// exibe mensagem
void endOTA()
{
    Serial.println("\nEnd");
}
// exibe progresso em porcentagem
void progressOTA(unsigned int progress, unsigned int total)
{
    update_progress = (float)progress / total * 100;
    Serial.printf("Progress: %u%%\r\n", (progress / (total / 100)));
}

void errorOTA(ota_error_t error)
{
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR)
        Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR)
        Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR)
        Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR)
        Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR)
        Serial.println("End Failed");

    is_updating = false;
}
#pragma endregion

void listAllFiles(String dir = "/", bool SD_card = false, byte treesize = 0)
{
    /// SPIFFS mode
    if (!SD_card)
    {
        // List all available files (if any) in the SPI Flash File System
        if (!is_SPIFFSS_Mount)
        {
            Serial.print("SPIFFS not Mount");
            return;
        }
        Serial.print("Used Bytes: ");
        Serial.print(SPIFFS.usedBytes());
        Serial.print("-----Total Bytes: ");
        Serial.print(SPIFFS.totalBytes());
        Serial.print("-----Used: ");
        Serial.print(map(SPIFFS.usedBytes(), 0, SPIFFS.totalBytes(), 0, 100));
        Serial.println("%");
        Serial.print("Listing files in: ");
        Serial.println(dir);
        File root = SPIFFS.open(dir);
        File file = root.openNextFile();
        while (file)
        {
            for (size_t i = 0; i < treesize; i++)
            {
                Serial.print("--");
            }
            Serial.print("FILE: ");
            Serial.print(file.path());
            Serial.print(" size: ");
            Serial.print((float)file.size() / 1024);
            Serial.println("Kb");
            if (file.isDirectory())
                listAllFiles(file.path(), false, treesize + 1);
            file = root.openNextFile();
        }
        root.close();
        file.close();
    }
    // SD card mode
    else if (SD_card)
    {
        if (!is_SD_Mount)
        {
            Serial.print("SD card not Mount");
            return;
        }
        if (treesize == 0)
        {
            Serial.print("Used Bytes: ");
            Serial.print(SD_MMC.usedBytes());
            Serial.print("-----Total Bytes: ");
            Serial.print(SD_MMC.totalBytes());
            Serial.print("-----Used: ");
            Serial.print(map(SD_MMC.usedBytes(), 0, SD_MMC.totalBytes(), 0, 100));
            Serial.println("%");
            Serial.print("Listing files in: ");
            Serial.println(dir);
        }
        File root = SD_MMC.open(dir);
        File file = root.openNextFile();
        while (file)
        {
            for (size_t i = 0; i < treesize; i++)
            {
                Serial.print("--");
            }

            Serial.print("FILE: ");
            Serial.print(file.path());
            Serial.print(" size: ");
            Serial.print((float)file.size() / 1024);
            Serial.println("Kb");
            if (file.isDirectory())
                listAllFiles(file.path(), true, treesize + 1);
            file = root.openNextFile();
        }
        root.close();
        file.close();
        // if (root.path() == "/Logs")
        // SD_MMC.remove(file.path());
    }
}

void loadConfig()
{
    byte mode = 0x0;

    if (is_SPIFFSS_Mount)
    {
        if (SPIFFS.exists("/config.cfg"))
            mode = 0x02;
        else
            mode = 0x01;
    }
    if (is_SD_Mount)
    {
        if (SD_MMC.exists("/config.cfg"))
            mode += 0x20;
        else
            mode += 0x10;
    }

#ifdef DEBUGMODE

    Serial.println("----- Config loader -----");
    Serial.println("mode = 0xab || a = SPIFFS. b = SD. || 0 = not mount 1 = mount 2 = found.");
    Serial.print("#########    mode = 0x");
    if (mode < 0x10)
        Serial.print(0);
    Serial.print(mode, HEX);
    Serial.println("    #########");
    Serial.println("----- Config loader END-----");

#endif

    if (mode == 0x0)
    {
        Serial.println("SPIFFS and SD filesystems not Found.");
        return;
    }

    else if (mode == 0x21 || mode == 0x20)
    {
        Serial.print("SPIFFS config not found, loading from SD.");
        String _setting = SD_MMC.open("/config.cfg").readString();
        if (mode == 0x21)
        {
            Serial.print("....Making a copy of SD card's one into SPIFFS....");
            File_Writer("/config.cfg", _setting, false, true);
        }

        Config.LoadValidated(_setting) ? Serial.println(". Sucess!") : Serial.println(". Failed Checksum.");
    }

    else if (mode == 0x22)
    {
        Serial.print("Found Config.cfg files in both SD and SPIFFS. Loading from SD");
        Config.LoadValidated(SD_MMC.open("/config.cfg").readString()) ? Serial.println(". Sucess!") : Serial.println(". Failed Checksum.");
    }
    else if (mode == 0x12 || mode == 0x02)
    {
        Serial.print("Found config.cfg in SPIFFS. Loading...");
        Config.LoadValidated(SPIFFS.open("/config.cfg").readString()) ? Serial.println(". Sucess!") : Serial.println(". Failed Checksum.");
    }
    else if (mode == 0x11 || mode == 0x10 || mode == 0x01)
    {
        Serial.println("No /config.cfg found.");
    }
}

void listDir(fs::FS &fs, const char *dirname, byte filetree = 1)
{
    if (filetree == 1)
        Serial.printf("Listing directory: %s\n", dirname);

    File root = fs.open(dirname);
    if (!root)
    {
        Serial.println("Failed to open directory");
        return;
    }
    if (!root.isDirectory())
    {
        Serial.println("Not a directory");
        return;
    }

    File file = root.openNextFile();
    while (file)
    {
        Serial.print(' ');
        for (size_t i = 0; i < filetree; i++)
        {
            Serial.print("--");
        }

        if (file.isDirectory())
        {
            Serial.print("DIR : ");
            Serial.print(file.name());
            Serial.println();
            String subdirname = dirname;
            subdirname += file.name();
            listDir(fs, subdirname.c_str(), filetree++);
        }
        else
        {
            Serial.print("FILE: ");
            Serial.print(file.name());
            Serial.print("  SIZE: ");
            Serial.print(file.size());
            Serial.println();
        }
        file = root.openNextFile();
    }

    Serial.println();
}

void clearDir(String dir)
{
    if (!is_SD_Mount)
    {
        return;
    }

    Serial.print("Deleting all files in: ");
    Serial.print(dir);
    File root = SD_MMC.open(dir);
    File file = root.openNextFile();
    while (file)
    {

        String path = file.path();
        if (path != "/Logs/General.log")
            ;
        {
            SD_MMC.remove(file.path());
            Serial.print("Deleting ");
            Serial.println(file.path());
        }
        file = root.openNextFile();
        Serial.print(".");
    }
    String log = "All Files Deleted in: \'";
    log += dir;
    log += '\'';
    GeneralLog(log);
    Serial.println("Done.");
}

void StandardTesting()
{

    float temps[5] = {40.5, 50.5, 30.5, 50.4, 60};
    float mins[5] = {1.5, 2.6, 1.4, 1.6, 1};
    String pname = "stdTest";

    currentRamp.totalsteps = 5;
    for (size_t i = 0; i < 5; i++)
    {
        currentRamp.minuteSteps[i] = mins[i];
        currentRamp.temperatureSteps[i] = temps[i];
    }
    currentRamp.projectName = pname;
    currentRamp.startLogs();
    currentRamp.configured = true;
    currentRamp.heatUp = true;
    StartRamp();
}

String getPage()
{
    return
        //##$$capPortal.html

R"===(<html>

<head>
    <style>
        body {
            background-color: aquamarine;
        }

        .bigdiv {
            display: flex;
            justify-content: center;
            align-content: center;
        }

        .holddiv {
            margin-top: 20px;
            background-color: bisque;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-content: center;
            width: 40%;
            height: 800px;
            border-radius: 100px;
            text-align: center;
        }

        table {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            margin-left: 20px;
            margin-right: 20px;
            background-color: whitesmoke;


        }

        nav {
            overflow: hidden;
            overflow-y: scroll;
            height: 200px;
        }

        td,
        th {
            border: 1px solid #dddddd;
            text-align: center;
            padding: 8px;
        }

        td:nth-child(1) {
            text-align: left;
        }

        tr:nth-child(even) {
            background-color: #dddddd;
        }

        tr:hover {
            background-color: #516ecc;
            color: whitesmoke;
        }

        button {
            margin-left: 30%;
            margin-right: 30%;
            margin-top: 5%;
            width: 40%;
            height: 10%;
        }

        tr.selected {
            background-color: #04279c;
            font-size: 16px;
            color: whitesmoke;
        }
    </style>
    <script>
        const xmlHttp = new XMLHttpRequest();
        var ssid_value = "";
        function changepasswd(object) {
            var new_type = "password";
            if (object.checked)
                new_type = "input"
            document.getElementById("input_passwd").type = new_type;
            var rows = document.getElementsByTagName("tr");
            for (i = 0; i < rows.length; i++) {
                var currentRow = rows[i];
                var createClickHandler = function (thisrow) {
                    return function () {
                        var rows = document.getElementsByTagName("tr");
                        for (i = 0; i < rows.length; i++) {
                            rows[i].className = "";
                            ssid_value = thisrow.getElementsByTagName("td")[0].innerText;
                        }
                        thisrow.className = "selected";
                    };
                };
                currentRow.onclick = createClickHandler(currentRow);
            }
        }
        window.onload = function () {
            httpGetAsync("/Wifilist", ParseNewData)

        }
        function aba(aa) {
            alert("hi");
            console.log(aa);
        }

        function httpGetAsync(theUrl, callback) {
            xmlHttp.onreadystatechange = function () {
                if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
                    callback(xmlHttp.responseText);
            }
            xmlHttp.open("GET", theUrl, true); // true for asynchronous
            xmlHttp.send();
        }
        function ParseNewData(incomeString) {

            try {

                for (var i = 0; i < incomeString.split(';').length; i++) {
                    var _args = incomeString.split(';')[i].split(':');
                    if (_args[0] == 'W') {
                        newHeatRamp(_args[1], _args[2]);
                    }
                }


            }
            catch (err) {
                console.log(err);
            }

        }

        function RefreshWifiList(params) {
            httpGetAsync("/Wifilist", ParseNewData);
        }

    </script>
</head>

<body>
    <div class="bigdiv">
        <div class="holddiv">
            <label>Welcome to your ESP32 Deployment</label>
            <label>Please select an WiFi network</label>
            <div id="wifilistdiv">
                <nav>
                    <table>
                        <tr>
                            <th>Company</th>
                            <th>Contact</th>
                            <th>Country</th>
                        </tr>
                        <tr>
                            <td>Alfreds Futterkiste</td>
                            <td>Maria Anders</td>
                            <td>Germany</td>
                        </tr>
                        <tr>
                            <td>Centro comercial Moctezuma</td>
                            <td>Francisco Chang</td>
                            <td>Mexico</td>
                        </tr>
                        <tr>
                            <td>Ernst Handel</td>
                            <td>Roland Mendel</td>
                            <td>Austria</td>
                        </tr>

                    </table>
                </nav>

                <div> <input type="password" id="input_passwd" name="ssidpassword" placeholder="Password"></input><input
                        type="checkbox" name="Show Password" onchange="changepasswd(this)"></input><label>Show
                        Password</label></div>
                <button>Connect !</button>
            </div>
        </div>
    </div>
</body>

</html>)==="
//##$$
        ;
}
String getPage2()
{
    return
        //##$$Circles.css

R"===(:root{
    --circ_box_size: 200px;
}
.circle_box {
    position: relative;
    width: 200px;
    height: 200px;
    display: flex;
    flex-direction: column;
    -webkit-justify-content: center;
    justify-content: center;
    -webkit-align-items: center;
    align-items: center;
    
}

    .circle_box .circle_Pbar {
        left: 0;
        width: 150px;
        height: 150px;
        position: relative;
        align-items: center;
    }

        .circle_box .circle_Pbar svg {
            width: 150px;
            height: 150px;
            position: relative;
        }

            .circle_box .circle_Pbar svg circle {
                width: 150px;
                height: 150px;
                fill: none;
                stroke-width: 10px;
                stroke-linecap: round;
                stroke-dasharray: 440;
                stroke-dashoffset: 440;
                transform: translate(5px, 5px);
            }

                .circle_box .circle_Pbar svg circle:nth-child(1) {
                    stroke-dashoffset: 0;
                    
                }

        .circle_box .circle_Pbar .circle_prog {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
        }

            .circle_box .circle_Pbar .circle_prog h2 {
                font-size: 60px;
            }

                .circle_box .circle_Pbar .circle_prog h2 span {
                    font-size: 30px;
                }

    .circle_box .legend {
        top: -7.5%;
        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
        position: absolute;
        font-size: 20px;
    }

)==="
//##$$
        ;
}
String getPage3()
{
    return
        //##$$Circles.js

R"===(var CircCount = 0;
const HandledCircles = [];
function CirclePropertyHandler(nameOfCircle) {
    this.id = nameOfCircle;
    this.NeedToMap = false;
    this.PercentMap = {
        'min': 0,
        'max': 100,
        'new_min': 0,
        'new_max': 100
    };
    this.RainbowBar = false;
    this.RainbowNumber = false;
    this.Rainbow = { 'min': '#000000', 'max': '#FFFFFF' };
    this.SetNew = function (value) {
        _val = parseInt(value);
        var _color = undefined;
        var _numberColor = undefined;
        var _valueText = undefined;
        if (_val < 0 || _val > 100) {
            console.log('cant parse new value.', this.id, value);
        }
        if (this.NeedToMap) {
            if (Number.isNaN(this.PercentMap.min) || Number.isNaN(this.PercentMap.max) || Number.isNaN(this.PercentMap.new_min) || Number.isNaN(this.PercentMap.new_max)) {
                this.NeedToMap = false;
                console.log('NaN detected in Mapping ' + this.id + ' disabling map functionality');
                return;
            }
            _val = mapN(_val, this.PercentMap.min, this.PercentMap.max, this.PercentMap.new_min, this.PercentMap.new_max);
            _valueText = value;
        }
        if (this.RainbowBar) {
            //TODO get raibow color
            _color = "#FFFFF0";
        }
        if (this.RainbowNumber) {
            //TODO get raibow color
            _numberColor = "#FFFFF0";
        }

        setnew(this.id, _val, _valueText, _color, _numberColor);
    };

}
///Circles
function generateCircle(div, _title, _initialPercent, _id, _bgcolor, _color, _numbercolor, _sign, args) {
    if (typeof div === 'object')
        div.innerHTML = createCircle(_title, _initialPercent, _id, _bgcolor, _color, _numbercolor, _sign);
    else {
        document.getElementById(div).innerHTML = createCircle(_title, _initialPercent, _id, _bgcolor, _color, _numbercolor, _sign);
    }

    var _property = new CirclePropertyHandler(_id);

    if (typeof args !== 'undefined') {
        _args = args.split(',');


        for (var i = 0; i < _args.length; i++) {
            _args2 = _args[i].split(' ');
            if (_args2[0] == 'map') {
                _property.NeedToMap = true;
                _property.PercentMap.min = parseInt(_args2[1]);
                _property.PercentMap.max = parseInt(_args2[2]);
                _property.PercentMap.new_min = parseInt(_args2[3]);
                _property.PercentMap.new_max = parseInt(_args2[4]);
            }
            else if (_args2[0] == 'rainbow') {
                _property.RainbowBar = true;
                _property.RainbowTitle = true;
                _property.Rainbow.min = _args2[1];
                _property.Rainbow.max = _args2[2];
            }
        }
    }

    HandledCircles.push(_property);
}
function createCircle(_title, _percent, _Id, _bgcolor, _color, _numbercolor, _sign) {
    if (typeof _title === 'undefined') {
        _title = null;
    }
    if (typeof _percent === 'undefined') {
        _percent = 0;
    }
    if (typeof _Id === 'undefined') {
        _Id = 'newId';

    }
    if (typeof _bgcolor === 'undefined') {
        _bgcolor = "#d4ebd3";
    }
    if (typeof _color === 'undefined') {
        _color = "darkred";
    }
    if (typeof _numbercolor === 'undefined') {
        _numbercolor = "#5f6362";
    }
    if (typeof _sign === 'undefined') {
        _sign = '%';
    }

    var percent = 440 * _percent / 100;
    percent = 440 - percent;
    var rtr = `
<div class="circle_box">
<h2 class="legend">` + _title + `</h2>
<div class="circle_Pbar">
<svg id= "`+ _Id+`_svg">
<circle style="stroke:` + _bgcolor + `;"cx ="70" cy="70" r="70" > </circle>
<circle class="c` + CircCount + `" id="` + _Id + `" cx="70" cy="70" r="70">
<style>
.circle_box .circle_Pbar .c`+ CircCount + ` {

stroke:`+ _color + `;
stroke-dasharray: 440;
stroke-dashoffset:`+ percent + `;
animation: mymove`+ CircCount + ` 2s ease-in;
animation-iteration-count: 1;
}
@keyframes mymove`+ CircCount + `{
from {stroke-dashoffset: 440;}
to {stroke-dashoffset:` + percent + `;}
}</style>
</circle>
</svg>
<div class="circle_prog" style="color:`+ _numbercolor + `;"> <h2 id="` + _Id + "N" + `"> ` + _percent + ` </h2><span>` + _sign + `</span></div></div>
</div>`;

    CircCount++;
    return rtr;
}
function setnew(_id, _newPercent, _newNumber, _color, _titleColor, ) {
    var _idN = _id + "N";
    if (typeof _color !== 'undefined') {
        document.getElementById(_id).style.stroke = _color;
    }
    if (typeof _titleColor !== 'undefined') {
        document.getElementById(_idN).style.color = _titleColor;
    }
    if (typeof _newNumber === 'undefined')
        document.getElementById(_idN).innerHTML = _newPercent;
    else
        document.getElementById(_idN).innerHTML = _newNumber;

    var _newoffset = 440 - (440 * _newPercent / 100);
    var _foward = true;
    if (_newoffset > parseInt(getComputedStyle(document.getElementById(_id)).strokeDashoffset, 10))
        _foward = false;

    //            console.log(parseInt(getComputedStyle(document.getElementById(_id)).strokeDashoffset, 10), _newoffset, _newPercent, _newNumber, _foward)
    if (!document.hidden)
        animateRoute(document.getElementById(_id), parseInt(getComputedStyle(document.getElementById(_id)).strokeDashoffset, 10), _newoffset, _foward);
}
function animateRoute(_id, _start, _end, _foward) {
    if (_foward) {
        _start -= 1;
        if (_start <= _end) {
            _start = _end;
            _id.style.strokeDashoffset = _start;
        }
        else {
            _id.style.strokeDashoffset = _start;
            setTimeout(function () { animateRoute(_id, _start, _end, true); }, 10);
        }
    }
    else {
        _start += 1;
        if (_start >= _end) {
            _start = _end;
            _id.style.strokeDashoffset = _start;
        }
        else {
            _id.style.strokeDashoffset = _start;
            setTimeout(function () { animateRoute(_id, _start, _end, false); }, 10);
        }
    }

}
function mapN(value, in_min, in_max, out_min, out_max) {
    if (value > out_max)
        return out_max;
    if (value < out_min)
        return out_min;
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

function setnewangle(id, angle)
{
        document.getElementById(id + "_svg").style.transform ="rotate("+angle+"deg)";     
}

function setLabelSize(id, size) {
    id = id+"N";
    document.getElementById(id).style.fontSize = size;
    
}
/// REturns [minIncrement, convertTime]
function ds18(resolution) {

    resolution = resolution - 9;
    var data = [];
    resolution = Math.pow(2, resolution);
    data[0] = 0.5 / resolution;  
    data[1] = 93.75 * resolution;
    console.log(data);
    return data;

    
})==="
//##$$
        ;
}
String getPage4()
{
    return
        //##$$Common.css

R"===(
@charset "utf-8";

h1 {
    border-radius: 15px 50px;
    border: 3px solid;
    border-color: #7E1315;
    color: #000000;
    background-color: #6ccca3;
    padding: 40px;
    text-align: center;
    font-size: 45pt;
    font-family: 'Stylish', sans-serif;
}

body {
    background-color: #F0FFF0;
}

p {
    text-align: center;
}

.button {
    font-family: Cambria;
    font-size: 30px;
    color: black;
    /* margin-top: auto; */
    /* margin-right: auto; */
    /* margin-bottom: auto; */
    /* margin-left: auto; */
    /* padding-top: 20px; */
    /* padding-right: 10px; */
    /* padding-bottom: 20px; */
    /* padding-left: 10px; */
    text-align: center;
    vertical-align: middle;
    border-radius: 30px 25px;
    text-transform: uppercase;
    font-weight: bold;
    letter-spacing: 2px;
    border: 3px solid black;
    transition: all 0.5s linear;
    min-width: 200px;
    min-height: 60px;
    position: relative;
    align-content:center;
    justify-content:center;
}

    .button:hover:enabled {
        background-color: #24248f;
        color: white;
        cursor: pointer;
        width: 250px;
        border-radius: 25px 30px;
    }

.buttonStop:hover:enabled {
    background-color: darkred;
    color: white;
    cursor: pointer;
    border-radius: 25px 30px;
}
.buttonStart:hover:enabled {
        background-color: darkgreen;
        color: white;
        cursor: pointer;
        border-radius: 25px 30px;
    }
.buttonPause:hover:enabled {
    background-color: darkgreen;
    color: white;
    cursor: pointer;
    border-radius: 25px 30px;
}
.buttonPaused{
    background-color: red;
    color:white;
}
.buttonPaused:hover:enabled {
    background-color: darkgreen;
    color: white;
    cursor: pointer;
    border-radius: 25px 30px;
}
.button:disabled {
    background-color: lightgray;
    border-color:darkgray;
    color: gray;
}

footer {
    width: 100%;
    justify-content: center;
    align-items: center;
    float: none;
}

b {
    font-size: inherit;
}

.buttonLine {
    display: flex;
    /* padding: 5%; */
    position: relative;
    width: 100%;
    justify-content: space-evenly;
    align-items: center;
}

.box {
    position: relative;
    width: 200px;
    height: 200px;
    display: flex;
    -webkit-justify-content: center;
    justify-content: center;
    -webkit-align-items: center;
    align-items: center;
}

    .box .Pbar {
        left: 0;
        width: 150px;
        height: 150px;
        position: relative;
        align-items: center;
    }

        .box .Pbar svg {
            width: 150px;
            height: 150px;
            position: relative;
        }

            .box .Pbar svg circle {
                width: 150px;
                height: 150px;
                fill: none;
                stroke-width: 10px;
                stroke-linecap: round;
                stroke-dasharray: 440;
                stroke-dashoffset: 440;
                transform: translate(5px, 5px);
            }

                .box .Pbar svg circle:nth-child(1) {
                    stroke-dashoffset: 0;
                }

        .box .Pbar .prog {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
        }

            .box .Pbar .prog h2 {
                font-size: 60px;
            }

                .box .Pbar .prog h2 span {
                    font-size: 30px;
                }

    .box .legend {
        bottom: 170px;
        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
        position: absolute;
        font-size: 20px;
    }



.BigBox {
    justify-content: space-between;
    width: 40%;
    display: flex;
    background: #fff;
}

.switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
}

    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    -webkit-transition: .4s;
    transition: .4s;
}

    .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        -webkit-transition: .4s;
        transition: .4s;
    }

input:checked + .slider {
    background-color: #2196F3;
}

input:focus + .slider {
    box-shadow: 0 0 1px #2196F3;
}

input:checked + .slider:before {
    -webkit-transform: translateX(26px);
    -ms-transform: translateX(26px);
    transform: translateX(26px);
}

/* Rounded sliders */
.slider.round {
    border-radius: 34px;
}

    .slider.round:before {
        border-radius: 50%;
    }


.button .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: #555;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 0;
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 30%;
    margin-left: -60px;
    opacity: 0;
    font-size:16px;
    text-align:center;
    width:200px;
    text-transform: none;
    transition: opacity 0.3s;
}

.button .tooltiptext::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: #555 transparent transparent transparent;
}

    .button:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }

    
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
       
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }

.GraphOptionsBox
{

    display: flex;
    flex-direction: row;
    align-content: center;
    justify-content: space-around;
    margin-bottom:  10px   ;
    border: #000000 dotted;
    height: 60px;
    width: 80%;
    margin-left: 10%;
    margin-right: 10%;
}
.GraphOptionsBox button
{
    font-size: 20px;
    align-content: center;
    align-items: center;
    text-align: center;
    border-radius: 10px;
    border: 3px solid;
    font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif
   
}
.hold{
    background-color: #7E1315;
    color: #F0FFF0;
    border-radius: 10px;
    border: 3px solid black;
    }
    
.dropdownBox
{
    font: 20px;
    align-content: center;
    align-items: center;
    text-align: center;
}

.stateLabel
{
    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    font-size:  20px;
}
.stateLabel .aaa
{
  color: #7E1315;
}

.status_div 
{
    /*border: #7E1315 5px solid;*/
    border-radius: 200px;
    padding: 5px;
    font-size: 20px;
}
.offline-div
{
    display: none;
}
.offline-div-table
{
    width: 40%;
    border: 3px solid black;
    align-items: center;
    justify-content: center;
    display: flex;
}

.offline-div-table table
{
    border: 3px solid black;
    justify-items: center;
    align-items: center;
    border-collapse: collapse;
}

.offline-div-table th
{
 background-color: coral;
}

.offline-div-table td, th 
{
    border: 2px solid #dddddd;
    text-align: center;
    padding: 8px;
}

.selectedRow
{
    background-color: chartreuse;
    font-weight: bold;
    border: 3px solid #000000;
}
.selectedRow td
{
    border: 3px solid #000000;
}
.even-Row
{
    background-color: #d0d0d0;

}
/* stateLabel */
.Heating
{
    color: darkgoldenrod;
}
.Working
{
    color: darkred;
}
.Idle
{
    color: darkgreen;
}
  


)==="
//##$$
        ;
}
String getPage5()
{
    return
        //##$$CommonScript.js

R"===(var count = 0;
var CircCount = 0;


var failedRequests = 0;
var ESP_Connected = true;

var getDataTimer = setInterval(RequestData, 5000);
var getConfig = setTimeout(() => {RequestData("/loadconfig")}, 1000);
var updateTimer = setInterval(setTime, 1000);
var dns_name = window.location.hostname;

google.charts.load('current', { 'packages': ['corechart'] });
google.charts.setOnLoadCallback(drawChart);
var am_i_offline = false;

const HandledCircles = [];


const GraphOptions = new GraphOptionsCreator();
const CurrentRamp = new CurrentRampCreator();
const State = new StateCreator();
const Config = new ConfigCreator();

function CurrentRampCreator() {
    this.temp = [];
    this.times = [];
    this.stepsTimeStamps = [];

    this.totalsteps = 0;
    this.start = 0;
    this.heatingStart = 0;
    this.end = 0;
    this.computedEnd = 0;

    this.configured = false;
    this.finished = false;
    this.running = false;
    this.heating = false;
    this.programmedStart = false;
    this.heatUp = false;

    this.name = "";
    this.reset = function () {
        this.temp = [];
        this.times = [];
        this.stepsTimeStamps = [];

        this.totalsteps = 0;
        this.start = 0;
        this.heatingStart = 0;
        this.end = 0;
        this.computedEnd = 0;

        this.configured = false;
        this.finished = false;
        this.running = false;
        this.heating = false;
        this.heatUp = false;
        this.programmedStart = false;
        this.name = "";
    }

}

function StateCreator() {
    this.Temperature = 0;
    this.CurrentStep = 0;
    this.Progress = 0;
    this.isRunning = false;
    this.Paused = false;
    this.Finished = false;
    this.relay_status = false;
    this.WorkerState = 'Unknown';
    this.update = function () { updateRampState() };

}
function GraphOptionsCreator() {
    this.DrawProgramedRamp = true;
    this.RampOption = 'function';
    this.GraphSize = -1;
    this.DataTable = undefined;
    this.ShowFuture = true;
    this.HoldGraph = false;
    this.GraphName = "";
    this.resetDataTable = function () {
        var data = new google.visualization.DataTable();
        data.addColumn('date', 'Time');
        data.addColumn('number', 'Temperature');
        data.addColumn({ 'type': 'string', 'role': 'style' });
        this.DataTable = data;
    }
}
function CirclePropertyHandler(nameOfCircle) {
    this.id = nameOfCircle;
    this.NeedToMap = false;
    this.PercentMap = {
        'min': 0,
        'max': 100,
        'new_min': 0,
        'new_max': 100
    };
    this.RainbowBar = false;
    this.RainbowNumber = false;
    this.Rainbow = { 'min': '#000000', 'max': '#FFFFFF' };
    this.SetNew = function (value) {
        _val = parseInt(value);
        var _color = undefined;
        var _numberColor = undefined;
        var _valueText = undefined;
        if (_val < 0 || _val > 100) {
            console.log('cant parse new value.', this.id, value);
        }
        if (this.NeedToMap) {
            if (Number.isNaN(this.PercentMap.min) || Number.isNaN(this.PercentMap.max) || Number.isNaN(this.PercentMap.new_min) || Number.isNaN(this.PercentMap.new_max)) {
                this.NeedToMap = false;
                console.log('NaN detected in Mapping ' + this.id + ' disabling map functionality');
                return;
            }
            _val = mapN(_val, this.PercentMap.min, this.PercentMap.max, this.PercentMap.new_min, this.PercentMap.new_max);
            _valueText = value;
        }
        if (this.RainbowBar) {
            //TODO get raibow color
            _color = "#FFFFF0";
        }
        if (this.RainbowNumber) {
            //TODO get raibow color
            _numberColor = "#FFFFF0";
        }

        setnew(this.id, _val, _valueText, _color, _numberColor);
    };

}

function ConfigCreator() {
    this.tolerance;
    //Resolution of DS18b20 Sensor
    this.TEMPERATURE_RESOLUTION;

    //Web Site Credentials
    this.www_username;
    this.www_password;

    //Wifi Credentials
    this.WIFI_SSID;
    this.WIFI_PASSWORD;

    //Sample rate for logging
    this.sample_rate_in_seconds;

    this.load = function (newConfig) {

        var value = "";
        var variable = "";
        var nextChar;
        var isValue = false;
        for (var i = 0; i < newConfig.length; i++) {
            nextChar = newConfig[i];
            if (!isValue) {
                if (nextChar != '=')
                    variable += nextChar;
                else
                    isValue = true;
            }
            else {
                if (nextChar != ',')
                    value += nextChar;
                else {
                    if (variable == "tolerance")
                        this.tolerance = parseFloat(value);
                    else if (variable == "WIFI_SSID")
                        this.WIFI_SSID = value;
                    else if (variable == "WIFI_PASSWORD")
                        this.WIFI_PASSWORD = value;
                    else if (variable == "www_username")
                        this.www_username = value;
                    else if (variable == "www_password")
                        this.www_password = value;
                    else if (variable == "TEMPERATURE_RESOLUTION")
                        this.TEMPERATURE_RESOLUTION = parseInt(value);
                    else if (variable == "sample_rate_in_seconds")
                        this.sample_rate_in_seconds = parseInt(value);

                    value = "";
                    variable = "";
                    isValue = false;
                }
            }
        }
    };
}

function test() {
    // var x = "new_temp" + (Date.now() / 1000) + " 23.81;heat_ramp:-1,10.00 20.00,20.00 20.00,40.00 10.00,20.00 10.00,15.00 15.00,;new_step:1; address:;ramp_start:1622612683;"

    // ParseNewData(x);

    saveData();
}

function setcircle(CircId, value) {

    for (var i = 0; i < HandledCircles.length; i++) {
        if (HandledCircles[i].id == CircId) {
            HandledCircles[i].SetNew(value);
            return;
        }
    }
}

function updateButtonState(buttonState) {
    var name = buttonState.id;
    document.getElementById(name + '_text').innerHTML = buttonState.state;
    document.getElementById(name).className = 'button button' + buttonState.state;
    document.getElementById(name + '_tooltip').hidden = true;
    if (typeof buttonState.enabled !== 'undefined') {

        if (buttonState.enabled) {
            document.getElementById(buttonState.id).removeAttribute("disabled");
        }
        else
            document.getElementById(buttonState.id).setAttribute("disabled", "disabled");
    }
    if (typeof buttonState.tooltip !== 'undefined') {

        if (buttonState.tooltip.enabled) {
            document.getElementById(name + '_tooltip').hidden = false;
        }
        else
            document.getElementById(name + '_tooltip').hidden = true;
        document.getElementById(name + '_tooltip').innerHTML = buttonState.tooltip.text;
    }

}

function newHeatRamp(args) {

    var _newtimes = [];
    var _newtemps = [];
    var _args = args.split(',');
    for (var i = 0; i < _args.length; i++) {
        var variable = _args[i].split('=')[0];
        var value = _args[i].split('=')[1];
        if (variable == "pname")
            CurrentRamp.name = value;
        else if (variable == "steps")
            CurrentRamp.totalsteps = parseInt(value);
        else if (variable == "start")
            CurrentRamp.start = parseInt(value);
        else if (variable == "heatingStart")
            CurrentRamp.heatingStart = parseInt(value);
        else if (variable == "end")
            CurrentRamp.end = parseInt(value) == 1 ? true : false;
        else if (variable == "configured")
            CurrentRamp.configured = parseInt(value) == 1 ? true : false;
        else if (variable == "running")
            CurrentRamp.running = parseInt(value) == 1 ? true : false;
        else if (variable == "heating")
            CurrentRamp.heating = parseInt(value) == 1 ? true : false;
        else if (variable == "finished")
            CurrentRamp.finished = parseInt(value) == 1 ? true : false;
        else if (variable == "heatUp")
            CurrentRamp.heatUp = parseInt(value) == 1 ? true : false;
        else if (variable == "programmedStart")
            CurrentRamp.programmedStart = parseInt(value) == 1 ? true : false;
        else if (variable == "Temp") {
            var newFloat = value.split(' ');
            for (var j = 0; j < newFloat.length; j++) {

                if (!isNaN(parseFloat(newFloat[j]))) {
                    _newtemps[j] = parseFloat(newFloat[j]);
                }
            }
            CurrentRamp.temp = _newtemps;
        }
        else if (variable == "Mins") {
            var newFloat = value.split(' ');
            for (var j = 0; j < newFloat.length; j++) {

                if (!isNaN(parseFloat(newFloat[j]))) {
                    _newtimes[j] = parseFloat(newFloat[j]);
                }
            }
            CurrentRamp.times = _newtimes;
        }
    }

    if (CurrentRamp.finished)
        EndRampRoutine(true);
    else if (CurrentRamp.running || CurrentRamp.heating)
        StartRampRoutine(true);
    else if (CurrentRamp.configured)
        NewRampRoutine(true);


    drawChart();
}

function SetStopButton(state, enabled) {
    var newBtnState =
    {
        id: undefined,
        state: undefined,
        tooltip: undefined,
        enabled: true
    }

    if (typeof enabled !== 'undefined') {
        newBtnState.enabled = enabled;
        if (!enabled)
            newBtnState.tooltip = { enabled: true, text: 'Load a heat ramp to be able to start it' }
    }


    newBtnState.id = 'btnStop'
    newBtnState.state = state;
    updateButtonState(newBtnState);


}

function SetNewRampButton(enabled) {
    var newBtnState =
    {
        id: undefined,
        state: undefined,
        tooltip: undefined,
        enabled: true
    }

    if (typeof enabled !== 'undefined') {
        newBtnState.enabled = enabled;
        if (!enabled)
            newBtnState.tooltip = { enabled: true, text: 'Stop or finish current procedure before loading a new ramp' }
    }


    newBtnState.id = 'btnNewRamp'
    newBtnState.state = 'New Ramp';
    updateButtonState(newBtnState);


}


function updateRampState() {

    document.getElementById("stateLabel").innerHTML = State.WorkerState;
    document.getElementById("stateLabel").className = 'stateLabel ' + State.WorkerState.trim();
    updateRemTime()
    document.getElementById('currentStepsLabel').innerText = State.CurrentStep + '/' + CurrentRamp.totalsteps;
    if (CurrentRamp.name !== "" && typeof (CurrentRamp.name) !== undefined && !CurrentRamp.finished)
        GraphOptions.GraphName = ": " + CurrentRamp.name;
    else
        GraphOptions.GraphName = "";
}

function updateRemTime() {

    if (!CurrentRamp.configured)
        return;

    var _remTime = "";

    var maxSize = 0;
    for (let i = 0; i < CurrentRamp.times.length; i++) {
        maxSize += CurrentRamp.times[i] * 60;
    }

    if (CurrentRamp.finished)
        maxSize = 0;
    if (CurrentRamp.running)
        maxSize = maxSize - (Date.now() / 1000 - CurrentRamp.start);

    var minutes = Math.floor(maxSize / 60);
    var seconds = Math.floor(maxSize % 60);

    if (minutes < 10)
        _remTime += "0";

    if (minutes >= 0)
        _remTime += minutes;
    else
        _remTime += "0"

    if ((Date.now() / 1000) % 2 < 1)
        _remTime += ":";
    else
        _remTime += " ";

    if (seconds < 10)
        _remTime += "0";
    if (seconds >= 0)
        _remTime += seconds;
    else
        _remTime += "0"

    document.getElementById('remainingTimeLabel').innerHTML = _remTime;

}

window.onload = function () {

    generateCircle('circle_1', 'Temperature', 0, 'Temp', '#d4ebd3', '#ff3f38', '#964845', '&degC', 'map 10 90 1 99');
    generateCircle('circle_2', 'Progress', 0, 'Prog', '#f79e9e', '#60bd6b', '#ad8053', '%', 'rainbow #FF0000 #00FF00');
    GraphOptions.resetDataTable();
    ResetRoutine();

    document.getElementById('DrawHeatRampSlider').checked = GraphOptions.DrawProgramedRamp;
    document.getElementById('TimeSpanSelect').value = GraphOptions.GraphSize;
    document.getElementById('ShowFutureSlider').checked = GraphOptions.ShowFuture;
    setTime();
    RequestData('reqhist');
    am_i_offline = isOnline();
};
function setTime() {

    //var x = "new_temp:" + Date.now()/1000 + " 20;";
    //ParseNewData(x);

    var date = new Date(Date.now());
    document.getElementById('timeLabel').innerHTML = formatDate(date);

    if (CurrentRamp.end > 0) {
        if (Date.now() / 1000 - CurrentRamp.end > 2 * 60 * 60) {
            ResetRoutine();
        }

    }

    updateRemTime();
    updateProg();



}

function formatDate(date) {
    if (typeof date === 'object') {
        try {

            var str = '';
            if (date.getHours() < 10)
                str += '0';
            str += date.getHours();
            if (date.getSeconds() % 2 == 0)
                str += ':';
            else
                str += ' ';
            if (date.getMinutes() < 10)
                str += '0'
            str += date.getMinutes();

            return str;
        }

        catch (error) {
            console.log(error);
            return null;
        }
    }

}

//Request Data from backend and add to chart
function RequestData(whichdata) {
    if (typeof whichdata !== 'string') {
        httpGetAsync("requpdate", ParseNewData);
    }
    else
        httpGetAsync(whichdata, ParseNewData);
}

function ParseNewData(incomeString) {
    try {
        var new_routine = 'none';
        var requestStateUpdate = false;
        for (var i = 0; i < incomeString.split(';').length; i++) {
            var _args = incomeString.split(';')[i].split(':');
            if (_args[0] == 'heat_ramp') {
                newHeatRamp(_args[1]);
            }
            if (_args[0] == 'new_temp') {

                var new_temp = _args[1].split(' ')[1];
                State.Temperature = parseInt(new_temp);
                setcircle('Temp', new_temp.substr(0, 4));
                addData(GraphOptions.DataTable, _args[1]);
            }
            if (_args[0] == 'raw') {
                handleRaw(_args[1]);
            }
            if (_args[0] == 'new_prog') {
                var new_prog = parseInt(_args[1]);
                if (!isNaN(new_prog)) {
                    State.Progress = new_prog;
                    updateProg();
                }
            }
            if (_args[0] == 'new_step') {
                var new_step = parseInt(_args[1]);
                State.CurrentStep = new_step;
                requestStateUpdate = true;
                if (new_step - 1 >= 0)
                    CurrentRamp.stepsTimeStamps[new_step - 1] = Date.now() / 1000;
            }
            if (_args[0] == 'relay_status') {
                State.relay_status = (_args[1] == true);
                requestStateUpdate = true;
            }
            if (_args[0] == 'temp_history') {
                addData(GraphOptions.DataTable, _args[1]);
            }
            if (_args[0] == 'current_state') {
                State.isRunning = (_args[1] == true);
                if (State.isRunning && !CurrentRamp.configured)
                    RequestData("/heatramp");
                requestStateUpdate = true;
            }
            if (_args[0] == 'ramp_start') {
                CurrentRamp.start = parseInt(_args[1]);
                if (CurrentRamp.start > 0) {
                    if (!State.isRunning)
                        StartRampRoutine();

                }
                console.log('start', Date.now());
            }
            if (_args[0] == 'ramp_end') {
                var end = parseInt(_args[1]);
                if (end > 0) {
                    CurrentRamp.end = end;
                    if (State.isRunning())
                        EndRampRoutine();

                }
                console.log('end', Date.now());
            }
            if (_args[0] == 'ramp_reset') {
                new_routine = 'reset';

            }
            if (_args[0] == 'set_time') {
                sendTime();
                GraphOptions.resetDataTable();

            }
            if (_args[0] == 'set_time-sucess') {
                alert('Time Synced!');
            }
            if (_args[0] == 'error') {
                alert(_args[1]);
            }
            if (_args[0] == 'current_process') {
                State.WorkerState = _args[1];
                State.update();
            }
            if (_args[0] == 'pname') {
                CurrentRamp.name = _args[1];
                State.update();
            }
            if (_args[0] == 'config') {
                Config.load(_args[1]);
            }
            if (_args[0] == 'go') {
               go(_args[1]);
            }

        }

        if (new_routine !== 'none') {
            if (new_routine === 'start')
                StartRampRoutine();
            if (new_routine === 'end')
                EndRampRoutine();
            if (new_routine === 'reset')
                ResetRoutine();
        }

        if (requestStateUpdate) {
            State.update();
        }

    }


    catch (err) {
        console.log(err);
    }
}

function handleRaw(args) {
    var commands = args.split(',');
    for (var command in commands) {
    }
}

function httpGetAsync(theUrl, callback) {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function () {
        if (xmlHttp.readyState == 4){
            if (xmlHttp.status == 200) {
                callback(xmlHttp.responseText);
                if (!ESP_Connected) {
                    ESP_Connected = true;
                    changeESPConnected(ESP_Connected);
                }
                failedRequests = 0;
            }
            else {
                if (ESP_Connected) {
                    failedRequests++;
                if (failedRequests >= 3) {
                    ESP_Connected = false;
                    changeESPConnected(ESP_Connected);
                }
            }
            }
    }

}
xmlHttp.open("GET", theUrl, true); // true for asynchronous
xmlHttp.timeout = 1000;
try {
    xmlHttp.send();

} catch (error) {
    console.log(error);
}

}
//Change the current HTML Page
function go(where) {
    if (where[0] != "/")
    window.location.assign("/" + where);
    else
    window.location.assign(where);


}

function manualStop() {

    confirm("Are you sure you want to stop the current running process?");
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function () {
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
            rld(xmlHttp.responseText);
    }
    xmlHttp.open("POST", '/pause', true); // true for asynchronous
    xmlHttp.send();
}

function rld(dummy) {
    document.location.reload();
}

//Graph Functions

function genRampGraph(data, steps) {
    var _currRampTime = CurrentRamp.start * 1000;
    if (_currRampTime <= 1)
        _currRampTime = Date.now();

    if (typeof (steps) !== 'number')
        steps = 10;

    if (steps <= 0)
        steps = 10;

    // data.addRow([new Date(_currRampTime), CurrentRamp.temp[0]]);
    for (var i = 0; i < CurrentRamp.temp.length; i++) {
        for (var j = 1; j < steps; j++) {
            data.addRow([new Date(_currRampTime + ((j / steps) * 60 * 1000 * CurrentRamp.times[i])), CurrentRamp.temp[i]]);
        }
        var newtime = _currRampTime + 60 * 1000 * CurrentRamp.times[i];
        _currRampTime = newtime;
    }
}

function drawChart() {

    if (GraphOptions.HoldGraph)
        return;

    //Create a separated datatable then join 
    var data = new google.visualization.DataTable();
    data.addColumn('date', 'Time');
    data.addColumn('number', 'Set Temperature');

    genRampGraph(data, 100);


    //nowMarker = new google.visualization.DataTable();
    //nowMarker.addColumn('date', 'Time');
    //nowMarker.addColumn('number', 'Set Temperature');
    //nowMarker.addRow([new Date(Date.now()), State.Temperature]);
    //var semiData = google.visualization.data.join(GraphOptions.DataTable, data, 'full', [[0, 0]], [1], [1]);
    //var finalData = google.visualization.data.join(semiData, nowMarker, 'full', [[0, 0]], [1, 2], [1]);
    var finalData = google.visualization.data.join(GraphOptions.DataTable, data, 'full', [[0, 0]], [1, 2], [1]);

    var date_formatter = new google.visualization.DateFormat({
        pattern: "HH:mm:ss"
    });
    date_formatter.format(finalData, 0);

    var dataview = new google.visualization.DataView(finalData);

    if (!GraphOptions.DrawProgramedRamp) {
        dataview.setColumns([0, 1, 2]);
    }
    else
        dataview.setColumns([0, 1, 2, 3]);
    if (GraphOptions.GraphSize > 0)
        dataview.setRows(dataview.getFilteredRows([{ column: 0, minValue: new Date(Date.now() - 60 * 1000 * GraphOptions.GraphSize) }]));
    if (!GraphOptions.ShowFuture)
        dataview.setRows(dataview.getFilteredRows([{ column: 0, maxValue: new Date(Date.now()) }]));

    if (CurrentRamp.running)
        GraphOptions.RampOption = "Line";

    var options = {
        //tooltip: {isHtml: true, trigger: 'selection'},
        title: 'Live Data' + GraphOptions.GraphName,
        backgroundColor: '#F0FFF0',
        interpolateNulls: true,
        titleTextStyle: { textAlign: 'center', justify: 'center', fontName: 'Arial', fontSize: '30', bold: 'true' },
        legend: 'none',
        dataOpacity: 1,
        pointSize: 1,
        curveType: GraphOptions.RampOption, animation: { startup: true, easing: 'in' },
        hAxis: { title: 'Time', format: 'HH:mm' },
        colors: ['red', 'darkred', 'darkgreen'],
        vAxes: {
            0: {
                logScale: false, gridlines: { count: 5 }, title: 'Temp(\xB0C)', titleTextStyle: {
                    color: 'red',
                    fontName: 'Arial',
                    fontSize: '30'
                }
            },
            1: {
                logScale: false, maxValue: 100, minValue: 50, gridlines: { count: 10 }, title: 'Humidity(%)', fontName: 'Arial', titleTextStyle: {
                    color: 'blue',
                    fontName: 'Arial',
                    fontSize: '25'
                }
            }
        },
        series: {
            0: { targetAxisIndex: 0 },
            1: { targetAxisIndex: 0 },
            2: { targetAxisIndex: 0 },
        },
        explorer: {
            keepInBounds: true,
            maxZoomIn: 4.0,
            maxZoomOut: 2.0
        },
    };

    var chart = new google.visualization.LineChart(document.getElementById('ramp_chart'));
    chart.draw(dataview, options);

}

function addData(_DataTable, _newData) {
    try {
        var data = _newData.split(',');
        if (typeof data === 'undefined')
            return;

        for (var i = 0; i < data.length; i++) {
            var data2 = data[i].split(' ');
            if (data2[0] == 0 && data2[1] == 0);
            else {
                if (_DataTable.getNumberOfRows() - 1 >= 0)
                    _DataTable.setCell(GraphOptions.DataTable.getNumberOfRows() - 1, 2, null);
                _DataTable.addRow([new Date(parseInt(data2[0]) * 1000), parseFloat(data2[1]), "point { size: 7; shape-type: circle; fill-color: #006400}"]);
                if (_DataTable.getNumberOfRows() > 5000) {
                    _DataTable.removeRow(0);
                }
            }
        }

        drawChart();

    } catch (e) {
        console.log(e);
    }
}



function isOnline() {
    return window.navigator.onLine;
}

///Circles
function generateCircle(div, _title, _initialPercent, _id, _bgcolor, _color, _numbercolor, _sign, args) {
    if (typeof div === 'object')
        div.innerHTML = createCircle(_title, _initialPercent, _id, _bgcolor, _color, _numbercolor, _sign);
    else {
        document.getElementById(div).innerHTML = createCircle(_title, _initialPercent, _id, _bgcolor, _color, _numbercolor, _sign);
    }

    var _property = new CirclePropertyHandler(_id);

    if (typeof args !== 'undefined') {
        _args = args.split(',');


        for (var i = 0; i < _args.length; i++) {
            _args2 = _args[i].split(' ');
            if (_args2[0] == 'map') {
                _property.NeedToMap = true;
                _property.PercentMap.min = parseInt(_args2[1]);
                _property.PercentMap.max = parseInt(_args2[2]);
                _property.PercentMap.new_min = parseInt(_args2[3]);
                _property.PercentMap.new_max = parseInt(_args2[4]);
            }
            else if (_args2[0] == 'rainbow') {
                _property.RainbowBar = true;
                _property.RainbowTitle = true;
                _property.Rainbow.min = _args2[1];
                _property.Rainbow.max = _args2[2];
            }
        }
    }

    HandledCircles.push(_property);
}
function createCircle(_title, _percent, _Id, _bgcolor, _color, _numbercolor, _sign) {
    if (typeof _title === 'undefined') {
        _title = null;
    }
    if (typeof _percent === 'undefined') {
        _percent = 0;
    }
    if (typeof _Id === 'undefined') {
        _Id = 'newId';

    }
    if (typeof _bgcolor === 'undefined') {
        _bgcolor = "#d4ebd3";
    }
    if (typeof _color === 'undefined') {
        _color = "darkred";
    }
    if (typeof _numbercolor === 'undefined') {
        _numbercolor = "#5f6362";
    }
    if (typeof _sign === 'undefined') {
        _sign = '%';
    }

    var percent = 440 * _percent / 100;
    percent = 440 - percent;
    var rtr = `
<div class="box">
<div class="Pbar">
<svg>
<circle style="stroke:` + _bgcolor + `;"cx ="70" cy="70" r="70"> </circle>
<circle class="c` + CircCount + `" id="` + _Id + `" cx="70" cy="70" r="70">
<style>
.box .Pbar .c`+ CircCount + ` {
 stroke:`+ _color + `;
 stroke-dasharray: 440;
 stroke-dashoffset: `+ percent + `;
 animation: mymove`+ CircCount + ` 2s ease-in;
 animation-iteration-count: 1;
}
@keyframes mymove`+ CircCount + `{
    from {stroke-dashoffset: 440;}
    to {stroke-dashoffset:` + percent + `;}
}</style>
</circle>
</svg>
<div class="prog" style="color:`+ _numbercolor + `;"> <h2 id="` + _Id + "N" + `"> ` + _percent + ` </h2><span>` + _sign + `</span></div></div><h2 class="legend">` + _title + `</h2>
</div>`;

    CircCount++;
    return rtr;
}
function setnew(_id, _newPercent, _newNumber, _color, _titleColor) {
    var _idN = _id + "N";
    if (typeof _color !== 'undefined') {
        document.getElementById(_id).style.color = _color;
    }
    if (typeof _titleColor !== 'undefined') {
        document.getElementById(_idN).style.color = _titleColor;
    }
    if (typeof _newNumber === 'undefined')
        document.getElementById(_idN).innerHTML = _newPercent;
    else
        document.getElementById(_idN).innerHTML = _newNumber;

    var _newoffset = 440 - (440 * _newPercent / 100);
    var _foward = true;
    if (_newoffset > parseInt(getComputedStyle(document.getElementById(_id)).strokeDashoffset, 10))
        _foward = false;

    //            console.log(parseInt(getComputedStyle(document.getElementById(_id)).strokeDashoffset, 10), _newoffset, _newPercent, _newNumber, _foward)

    if (!document.hidden)
        animateRoute(document.getElementById(_id), parseInt(getComputedStyle(document.getElementById(_id)).strokeDashoffset, 10), _newoffset, _foward);
}
function animateRoute(_id, _start, _end, _foward) {
    if (_foward) {
        _start -= 1;
        if (_start <= _end) {
            _start = _end;
            _id.style.strokeDashoffset = _start;
        }
        else {
            _id.style.strokeDashoffset = _start;
            setTimeout(function () { animateRoute(_id, _start, _end, true); }, 10);
        }
    }
    else {
        _start += 1;
        if (_start >= _end) {
            _start = _end;
            _id.style.strokeDashoffset = _start;
        }
        else {
            _id.style.strokeDashoffset = _start;
            setTimeout(function () { animateRoute(_id, _start, _end, false); }, 10);
        }
    }

}
function mapN(value, in_min, in_max, out_min, out_max) {
    if (value > out_max)
        return out_max;
    if (value < out_min)
        return out_min;
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

///Toggle Buttons
function changeDrawHeatRamp(slider) {
    GraphOptions.DrawProgramedRamp = slider.checked;
    drawChart();
}
function changeTimeSpan(object) {
    GraphOptions.GraphSize = parseInt(object.value);
    drawChart();
}
function changeShowFuture(object) {
    GraphOptions.ShowFuture = object.checked;
    drawChart();
}
function changeGraphMode(object) {
    GraphOptions.RampOption = object.value;
    drawChart();
}
function handleHoldButton() {
    GraphOptions.HoldGraph = !GraphOptions.HoldGraph;
    if (GraphOptions.HoldGraph) {
        document.getElementById('btnHold').className = "hold";
        // document.getElementById('btnHold').innerText="Release";
    }
    else {
        document.getElementById('btnHold').className = "";
        // document.getElementById('btnHold').innerText="Hold";

    }

    if (!GraphOptions.HoldGraph)
        drawChart();
}



///Ramp Routines
function NewRampRoutine(silent) {
    SetStopButton('Start');
    document.getElementById('WorkingState').style.display = 'flex';
    var _remTime = new Date(State._end * 1000);
    document.getElementById('remainingTimeLabel').innerText = _remTime.getTime() / 60000;

    document.getElementById('currentStepsLabel').innerText = '0/' + CurrentRamp.totalsteps;
    if (silent != true)
        alert('New ramp loaded!');


}

function StartRampRoutine(silent) {
    document.getElementById('WorkingState').style.display = 'flex';
    SetNewRampButton(false);
    SetStopButton("Stop");
    State.isRunning = true;
    updateRemTime();
    if (silent != true)
        alert("Ramp Started");

}

function PauseRampRoutine(params) {

}

function EndRampRoutine(silent) {
    SetStopButton('Start', true);
    SetNewRampButton(true);
    State.Finished = true;
    if (silent != true)
        alert('This Ramp has finished');

}

function ResetRoutine(params) {
    SetStopButton('Start', false);
    SetNewRampButton(true);
    CurrentRamp.reset();
    State.Progress = 0;
    document.getElementById('WorkingState').style.display = 'none';
}



function saveData() {

    if (confirm('Do you want to download this last ramp?')) {
        var _start = CurrentRamp.start;
        var text = "[Heat Ramp] [csv] [unixtimestamp in m]\n";
        text += "start = ";
        text += _start;
        text += ", Heat Ramp = {temp: ";
        text += CurrentRamp.temp;
        text += "} {time: ";
        text += CurrentRamp.times;
        text += "}\r\n";
        text += "Temperature, time, delta time\r\n";
        text += "======== Starting step: ";
        text += 1;
        text += ". Set Tempereture: ";
        text += CurrentRamp.temp[0];
        text += "\u00B0C for ";
        text += CurrentRamp.times[0];
        text += " minutes\r\n";
        var _step = 1;
        var stepFlag = true;
        if (CurrentRamp.stepsTimeStamps.length < 1)
            stepFlag = false;


        var endFlag = true;
        if (CurrentRamp.end <= 0)
            endFlag = false;

        for (var i = 0; i < GraphOptions.DataTable.getNumberOfRows(); i++) {
            var delta = GraphOptions.DataTable.getValue(i, 0).getTime() / 1000 - _start;

            if (delta >= 0) {
                if (GraphOptions.DataTable.getValue(i, 0).getTime() / 1000 >= CurrentRamp.stepsTimeStamps[_step] && stepFlag) {
                    text += "======== Starting step: ";
                    text += _step + 1;
                    text += ". Set Tempereture: ";
                    text += CurrentRamp.temp[_step];
                    text += "\u00B0C for ";
                    text += CurrentRamp.times[_step];
                    text += " minutes\r\n";
                    _step++;

                    if (CurrentRamp.stepsTimeStamps.length <= _step)
                        stepFlag = false;

                }
                if (GraphOptions.DataTable.getValue(i, 0).getTime() / 1000 >= CurrentRamp.end && endFlag) {
                    text += "========//========== Heat Ramp Ended ========//==========\r\n"
                    endFlag = false;
                }
                text += GraphOptions.DataTable.getValue(i, 1);
                text += ", ";
                text += GraphOptions.DataTable.getValue(i, 0).getTime() / 1000;
                text += ", ";
                text += delta;
                text += "\r\n";
            }
            var blob = new Blob([text], { type: "text/plain;charset=utf-8" });
            var _now = new Date(Date.now());

        }
        saveAs(blob, "HeatRampLog[" + _now.toLocaleDateString() + "].txt");

    }
}

function getnextStep(start, time) {
    return start + time * 60;
}

function stopbutton() {

    if (State.isRunning)
        RequestData('/stop');
    else
        RequestData('/start');
}


function sendTime() {
    var text = "settime?time=";
    text += Math.round(Date.now() / 1000);
    RequestData(text);
}

function makeTable(_selectedRow) {
    if (typeof _selectedRow === 'undefined')
        return;
    var newTable = "";
    newTable = "<tr><th>Step</th><th>Temperature (&deg;C)</th><th>Time (Mins)</th></tr>";
    for (var i = 0; i < CurrentRamp.temp.length; i++) {

        newTable += "<tr ";
        if (i === _selectedRow)
            newTable += "class = \"selectedRow\"";
        else if (i % 2 === 0)
            newTable += "class = \"even-Row\"";
        newTable += "><td>" + (i + 1) + "</td><td>" + CurrentRamp.temp[i] + "</td><td>" + CurrentRamp.times[i] + "</td></tr>"
    }
    document.getElementById("offline-table").innerHTML = newTable;
    document.getElementById("offline-div").style.display = 'flex';

}

function updateProg(prog) {
    setcircle('Prog', State.Progress);
}

function changeESPConnected(isESPConnected) {
    if (typeof (isESPConnected) === 'undefined')
        return;

    if (isESPConnected)//do Online stuff
    {

        document.getElementById("esp_connected").style.display = "block";
        document.getElementById("esp_not_connected").style.display = "none";
        drawChart();       
        ESP_Connected = true;
    }
    else//do Offline stuff 
    {
        document.getElementById("esp_connected").style.display = "none";
        document.getElementById("esp_not_connected").style.display = "block";
        ESP_Connected = false;
        console.log('esp-offline');
        animatereconect(0);

    }

}

function animatereconect(size) {

    var div = document.getElementById("reconnect-animation");
    var divhtml = "";
    for (let index = 0; index < size; index++) {
       
        divhtml+= ".";
    }    

    size ++;
    if (size >= 4)
    size = 0;
    
    div.innerHTML = divhtml;

    if (!ESP_Connected)
    setTimeout(() => {animatereconect(size)},500);
})==="
//##$$
        ;
}
String getPage6()
{
    return
        //##$$doPage_pt.html

R"===(<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta charset="utf-8">
    <style>
        input[type=number] {
            width: 50px;
            height: 30px;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-right: 2px;
            font-size: 18px;
            text-align: center;
        }

        label {
            font-size: 18px;
        }


        .do {
            margin-left: 15%;
        }

        .boxTitle {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .Title {
            display: block;
            text-align: center;
            line-height: 150%;
            font-size: 50px;
            width: 50%;
            font-family: "Comic Sans MS";
            padding-bottom: 10px;
            color: #f52456;
            text-shadow: 2px 2px 2px 2px white;
            border: 5px solid;
            border-radius: 100px 200px;
            border-color: black;
        }

        .buttonBox {
            display: flex;
            align-items: center;
            justify-content: space-around;
            min-width: 60%;

        }

        .buttonBox .buttonBox_tn {
            height: 50px;
            border: 2px solid;
            border-radius: 10px;
            font-size: 20px;
            min-width: 100px;
            text-transform: uppercase;
        }

        .buttonBox .buttonBox_tn:hover:enabled {
            background: black;
            color: white;
            border-radius: 100px;
            width: 150px;
            transition: all 0.5s linear;
        }

        .buttonBox .bt_sub:hover:enabled {
            background: darkgreen;
            color: white;
            border-radius: 100px;
            width: 150px;
            transition: all 0.5s linear;
        }

        .h1_welcome {
            text-align: center;
            font: 24px Arial;
        }

        .infoBox {
            display: flex;
            justify-content: center;
        }

        .h1_dropdownBox {
            font: 16px Arial;
        }

        .infoBox {
            margin-left: 5%;
        }

        .infoBox .dropdownBox {
            margin-left: 10px;
            font: 20px Arial;
            align-content: center;
            align-items: center;
            text-align: center;
        }

        .bigBox {
            margin-left: 5%;
            display: flex;
            justify-content: space-evenly;
        }

        .inputBox {
            border: 1px solid;
            padding: 10px;
        }

        .preview_chart {
            min-width: 50%;
            width: 700px;
            min-height: 400px
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 40px;
            height: 23px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            -webkit-transition: .4s;
            transition: .4s;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 17px;
            width: 17px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

        input:checked+.slider {
            background-color: #2196F3;
        }

        input:focus+.slider {
            box-shadow: 0 0 1px #2196F3;
        }

        input:checked+.slider:before {
            -webkit-transform: translateX(17px);
            -ms-transform: translateX(17px);
            transform: translateX(17px);

        }

        /* Rounded sliders */
        .slider.round {
            border-radius: 23px;
        }

        .slider.round:before {
            border-radius: 50%;
        }

        .optionsBox
        {
            justify-content: space-between;
        }

    </style>
    <script>
        var currentSize = 0;
        function loadtxt() {
        }
        function generateLabel(_size) {
            var s = '<div id="div' + _size + '"><label>Temperature:</label> <input type="number" step="0.5" onchange="ManualDraw()" id="temp' + _size + '" name="temp' + _size + '" min="-55" max="85"> <label>&deg;C  </label> <label style="margin-left: 10px">Time:</label><input type="number" step="any" onchange="ManualDraw()" min="0" id="time' + _size + '" name="time' + _size + '"> <label>Mins</label><br><br></div>';
            return s;
        }
        function sizeChanged(value) {
            var newSize = parseInt(value);
            // console.log(value, currentSize, value < currentSize, value > currentSize);
            var s = "";
            //  console.log('one');
            if (newSize > currentSize) {
                //console.log('two');
                for (var i = 0; i < newSize; i++) {
                    s = s + generateLabel(i);
                }

                var temp = [];
                for (var i = 0; i < currentSize; i++) {
                    try {
                        temp[i * 2] = document.getElementById('temp' + i).value;
                        temp[i * 2 + 1] = document.getElementById('time' + i).value;
                    }
                    catch (err) {
                        temp[i * 2] = "";
                        temp[i * 2 + 1] = "";
                    }
                }

                document.getElementById('inputBox').innerHTML = s;

                for (var i = 0; i < currentSize; i++) {
                    document.getElementById('temp' + i).value = temp[i * 2];
                    document.getElementById('time' + i).value = temp[i * 2 + 1];

                }
                currentSize = newSize;
                document.getElementById('dropdownBox').value = newSize;
            }
            else if (newSize < currentSize) {
                // console.log('three');
                for (var i = currentSize - 1; i >= newSize; i--) {
                    var c = document.getElementById('div' + i);
                    c.parentNode.removeChild(c);
                }
                currentSize = newSize;
                document.getElementById('dropdownBox').value = newSize;
            }


        }
        function requestLast() {

        }
        function bodyLoadEvent() {

            var options = "";
            //generate dropdown options
            for (var i = 1; i <= 20; i++) {
                options += '<option value="' + i + '">' + i + '</option>';
            }
            document.getElementById('dropdownBox').innerHTML = options;
            sizeChanged(5);

        }
        function preventEnter(event) {
            var key = parseInt(event.keyCode);
            if (key == 13) {
                event.preventDefault();

                console.log('suppressing Enter');
            }

        }
        function go(where) {
            window.location.assign(where);
            //window.location.href(place);
        }

        window.onload = function () { bodyLoadEvent(); };

    </script>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        google.charts.load('current', { 'packages': ['corechart'] }); google.charts.setOnLoadCallback(drawChart); var dataview;
        function drawChart() {
            var data = new google.visualization.DataTable();
            data.addColumn('date', 'Time');
            data.addColumn('number', 'Temperature');
            // data.addRow([new Date((Date.now())), 0]);
            var _dropdownSize = parseInt(document.getElementById('dropdownBox').value);
            var _trackTime = 0;
            for (var i = 0; i < _dropdownSize; i++) {
                var _temp = parseFloat(document.getElementById('temp' + i).value);
                var _time = parseFloat(document.getElementById('time' + i).value);
                console.log(_temp, _time);
                if (!isNaN(_temp) && !isNaN(_time)) {
                    data.addRow([new Date(Date.now() + 1000 * (_trackTime)), _temp]);
                    data.addRow([new Date(Date.now() + 1000 * (_trackTime + (60 * _time))), _temp]);
                    //data.addRow([_trackTime, _temp]);
                    //  data.addRow([_trackTime + (60 * _time), _temp]);
                    _trackTime = _trackTime + (60 * _time);
                }
            }
            dataview = data;
            var options = {
                title: 'Preview',
                backgroundColor: '#F0FFF0',
                titleTextStyle: { fontName: 'Arial', fontSize: '30', bold: 'true' },
                legend: 'none',
                curveType: 'line', animation: { startup: true, easing: 'in' },
                hAxis: { title: 'Time', format: 'HH:mm' },
                colors: ['red'],
                vAxes: {
                    0: {
                        logScale: false, maxValue: 35, minValue: 25, gridlines: { count: 5 }, title: 'Temp(\xB0C)', titleTextStyle: {
                            color: 'black',
                            fontName: 'Arial',
                            fontSize: '20'
                        }
                    },

                },
                series: {
                    0: { targetAxisIndex: 0 },
                }
            };
            var date_formatter = new google.visualization.DateFormat({
                pattern: "HH:mm:ss"
            });
            date_formatter.format(data, 0);
            var chart = new google.visualization.LineChart(document.getElementById('preview_chart'));
            chart.draw(data, options);
        }
        function ManualDraw() {
            drawChart();
        }
        function addData(time, temp, hum) {
            var data = new google.visualization.DataTable();
            data = dataview;
            data.addRow([new Date(1000 * (10800 + time)), temp, hum]);
            if (data.getNumberOfRows() > 60) {
                data.removeRow(0);
            }
            dataview = data;
            var options = {
                title: 'Live Data',
                backgroundColor: '#F0FFF0',
                titleTextStyle: { fontName: 'Arial', fontSize: '30', bold: 'true' },
                legend: 'none',
                curveType: 'function', animation: { startup: true, easing: 'in' },
                hAxis: { title: 'Time(s)', format: 'mm:ss' },
                colors: ['red', 'blue'],
                vAxes: {
                    0: {
                        logScale: false, maxValue: 35, minValue: 25, gridlines: { count: 5 }, title: 'Temp(\xB0C)', titleTextStyle: {
                            color: 'red',
                            fontName: 'Arial',
                            fontSize: '30'
                        }
                    },
                    1: {
                        logScale: false, maxValue: 100, minValue: 50, gridlines: { count: 10 }, title: 'Humidity(%)', fontName: 'Arial', titleTextStyle: {
                            color: 'blue',
                            fontName: 'Arial',
                            fontSize: '25'
                        }
                    }
                },
                series: {
                    0: { targetAxisIndex: 0 },
                    1: { targetAxisIndex: 1 },
                }
            };
            var date_formatter = new google.visualization.DateFormat({
                pattern: "HH:mm:ss"
            });
            date_formatter.format(data, 0);
            var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));
            chart.draw(data, options);
        }
    </script>
</head>

<body style="background-color: #F0FFF0;">
    <title>Estufa</title>
    <div class="boxTitle">
        <label class="Title">Nova Rampa de Calor</label>
    </div>
    <div style="justify-content: center; margin-left:10%; margin-right:10%;">
        <h2 class="h1_welcome">Bem vindo a p&aacutegina de configura&ccedil;&atildeo. Configure abaixo a rampa de calor
            a ser executada.<br>Note que a atemperatura pode ser variada entre -125&deg;C e +85&deg;C por
            limita&ccedil;ões do sensor</h2>
    </div>

    <form action="/do" id="doForm" method="GET" onkeypress="preventEnter(event)">
        <div class="infoBox">
            <h1 class="h1_dropdownBox">Selecione a quantidade de passos que deseja</h1>
            <select name="steps" class="dropdownBox" id="dropdownBox" onchange="sizeChanged(this.value)">
            </select>
        </div>
        <br>
        <div class="bigBox">
            <div class="inputBox" id="inputBox">
            </div>
            <div class="chartBox">
                <div class="preview_chart" id="preview_chart">
                </div>
                <!-- <div style="margin-bottom:5px; margin-left:20px; flex-direction: row; justify-content: space-evenly; display: flex;"> -->

                <div style="display: flex; flex-direction: row; justify-content: space-between">
                    <div class="buttonBox">
                        <input class="buttonBox_tn" type="button" value="Back" onclick="go('/')">
                        <!-- <input class="buttonBox_tn" type="button" disabled value="Preview" onclick="ManualDrawChart()"> -->
                        <input class="buttonBox_tn" type="button" value="Last" onclick="requestLast()">
                        <input class="buttonBox_tn bt_sub" type="submit" value="Submit">

                    </div>
                    <div class="optionsBox" style="justify-content: space-between; display: flex; flex-direction: column;">
                        <div >
                            <div style="justify-content: space-between; display: flex;">
                            <label style="margin-right: 2px">Nome do projeto: </label>
                            <input type="text" name="pname" size="10px">
                            </div>
                            <br>
                            <div style="justify-content: space-between; display: flex;">
                                <label style="margin-right: 2px">
                                    Esquentar antes de come&ccedil;ar:
                                </label>
                                <label class="switch">
                                    <input type="checkbox" name="heatup">
                                    <span class="slider round"></span>
                                </label>
                            </div>
                            <br>
                            <div style="justify-content: space-between; display: flex;">
                                <label style="margin-right: 10px">
                                    Come&ccedil;ar ap&oacute;s Salvar:
                                </label>
                                <label class="switch">
                                    <input type="checkbox" name="_start" checked on>
                                    <span class="slider round"></span>
                                </label>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            </div>


    </form>
    <footer style="justify-content: center; display: flex;">
        <p>
            <i>Supersonic by MattediWorks&copy;</i>
        </p>
    </footer>
</body>

</html>)==="
//##$$
        ;
}
String getPage7()
{
    return
        //##$$doPage.html

R"===(<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta charset="utf-8">
    <style>
        input[type=number] {
            width: 50px;
            height: 30px;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-right: 2px;
            font-size: 18px;
            text-align: center;
        }

        label {
            font-size: 18px;
        }


        .do {
            margin-left: 15%;
        }

        .boxTitle {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .Title {
            display: block;
            text-align: center;
            line-height: 150%;
            font-size: 50px;
            width: 50%;
            font-family: "Comic Sans MS";
            padding-bottom: 10px;
            color: #f52456;
            text-shadow: 2px 2px 2px 2px white;
            border: 5px solid;
            border-radius: 100px 200px;
            border-color: black;
        }

        .buttonBox {
            display: flex;
            align-items: center;
            justify-content: space-around;
            min-width: 60%;

        }

        .buttonBox .buttonBox_tn {
            height: 50px;
            border: 2px solid;
            border-radius: 10px;
            font-size: 20px;
            min-width: 100px;
            text-transform: uppercase;
        }

        .buttonBox .buttonBox_tn:hover:enabled {
            background: black;
            color: white;
            border-radius: 100px;
            width: 150px;
            transition: all 0.5s linear;
        }

        .buttonBox .bt_sub:hover:enabled {
            background: darkgreen;
            color: white;
            border-radius: 100px;
            width: 150px;
            transition: all 0.5s linear;
        }

        .h1_welcome {
            text-align: center;
            font: 24px Arial;
        }

        .infoBox {
            display: flex;
            justify-content: center;
        }

        .h1_dropdownBox {
            font: 16px Arial;
        }

        .infoBox {
            margin-left: 5%;
        }

        .infoBox .dropdownBox {
            margin-left: 10px;
            font: 20px Arial;
            align-content: center;
            align-items: center;
            text-align: center;
        }

        .bigBox {
            margin-left: 5%;
            display: flex;
            justify-content: space-evenly;
        }

        .inputBox {
            border: 1px solid;
            padding: 10px;
        }

        .preview_chart {
            min-width: 50%;
            width: 700px;
            min-height: 400px
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 40px;
            height: 23px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            -webkit-transition: .4s;
            transition: .4s;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 17px;
            width: 17px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

        input:checked+.slider {
            background-color: #2196F3;
        }

        input:focus+.slider {
            box-shadow: 0 0 1px #2196F3;
        }

        input:checked+.slider:before {
            -webkit-transform: translateX(17px);
            -ms-transform: translateX(17px);
            transform: translateX(17px);

        }

        /* Rounded sliders */
        .slider.round {
            border-radius: 23px;
        }

        .slider.round:before {
            border-radius: 50%;
        }

        .optionsBox
        {
            justify-content: space-between;
        }

    </style>
    <script>
        var currentSize = 0;
        function loadtxt() {
        }
        function generateLabel(_size) {
            var s = '<div id="div' + _size + '"><label>Temperature:</label> <input type="number" step="0.5" onchange="ManualDraw()" id="temp' + _size + '" name="temp' + _size + '" min="-55" max="85"> <label>&deg;C  </label> <label style="margin-left: 10px">Time:</label><input type="number" step="any" onchange="ManualDraw()" min="0" id="time' + _size + '" name="time' + _size + '"> <label>Mins</label><br><br></div>';
            return s;
        }
        function sizeChanged(value) {
            var newSize = parseInt(value);
            // console.log(value, currentSize, value < currentSize, value > currentSize);
            var s = "";
            //  console.log('one');
            if (newSize > currentSize) {
                //console.log('two');
                for (var i = 0; i < newSize; i++) {
                    s = s + generateLabel(i);
                }

                var temp = [];
                for (var i = 0; i < currentSize; i++) {
                    try {
                        temp[i * 2] = document.getElementById('temp' + i).value;
                        temp[i * 2 + 1] = document.getElementById('time' + i).value;
                    }
                    catch (err) {
                        temp[i * 2] = "";
                        temp[i * 2 + 1] = "";
                    }
                }

                document.getElementById('inputBox').innerHTML = s;

                for (var i = 0; i < currentSize; i++) {
                    document.getElementById('temp' + i).value = temp[i * 2];
                    document.getElementById('time' + i).value = temp[i * 2 + 1];

                }
                currentSize = newSize;
                document.getElementById('dropdownBox').value = newSize;
            }
            else if (newSize < currentSize) {
                // console.log('three');
                for (var i = currentSize - 1; i >= newSize; i--) {
                    var c = document.getElementById('div' + i);
                    c.parentNode.removeChild(c);
                }
                currentSize = newSize;
                document.getElementById('dropdownBox').value = newSize;
            }


        }
        function requestLast() {

        }
        function bodyLoadEvent() {

            var options = "";
            //generate dropdown options
            for (var i = 1; i <= 20; i++) {
                options += '<option value="' + i + '">' + i + '</option>';
            }
            document.getElementById('dropdownBox').innerHTML = options;
            sizeChanged(5);

        }
        function preventEnter(event) {
            var key = parseInt(event.keyCode);
            if (key == 13) {
                event.preventDefault();

                console.log('suppressing Enter');
            }

        }
        function go(where) {
            window.location.assign(where);
            //window.location.href(place);
        }

        window.onload = function () { bodyLoadEvent(); };

    </script>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        google.charts.load('current', { 'packages': ['corechart'] }); google.charts.setOnLoadCallback(drawChart); var dataview;
        function drawChart() {
            var data = new google.visualization.DataTable();
            data.addColumn('date', 'Time');
            data.addColumn('number', 'Temperature');
            // data.addRow([new Date((Date.now())), 0]);
            var _dropdownSize = parseInt(document.getElementById('dropdownBox').value);
            var _trackTime = 0;
            for (var i = 0; i < _dropdownSize; i++) {
                var _temp = parseFloat(document.getElementById('temp' + i).value);
                var _time = parseFloat(document.getElementById('time' + i).value);
                console.log(_temp, _time);
                if (!isNaN(_temp) && !isNaN(_time)) {
                    data.addRow([new Date(Date.now() + 1000 * (_trackTime)), _temp]);
                    data.addRow([new Date(Date.now() + 1000 * (_trackTime + (60 * _time))), _temp]);
                    //data.addRow([_trackTime, _temp]);
                    //  data.addRow([_trackTime + (60 * _time), _temp]);
                    _trackTime = _trackTime + (60 * _time);
                }
            }
            dataview = data;
            var options = {
                title: 'Preview',
                backgroundColor: '#F0FFF0',
                titleTextStyle: { fontName: 'Arial', fontSize: '30', bold: 'true' },
                legend: 'none',
                curveType: 'line', animation: { startup: true, easing: 'in' },
                hAxis: { title: 'Time', format: 'HH:mm' },
                colors: ['red'],
                vAxes: {
                    0: {
                        logScale: false, maxValue: 35, minValue: 25, gridlines: { count: 5 }, title: 'Temp(\xB0C)', titleTextStyle: {
                            color: 'black',
                            fontName: 'Arial',
                            fontSize: '20'
                        }
                    },

                },
                series: {
                    0: { targetAxisIndex: 0 },
                }
            };
            var date_formatter = new google.visualization.DateFormat({
                pattern: "HH:mm:ss"
            });
            date_formatter.format(data, 0);
            var chart = new google.visualization.LineChart(document.getElementById('preview_chart'));
            chart.draw(data, options);
        }
        function ManualDraw() {
            drawChart();
        }
        function addData(time, temp, hum) {
            var data = new google.visualization.DataTable();
            data = dataview;
            data.addRow([new Date(1000 * (10800 + time)), temp, hum]);
            if (data.getNumberOfRows() > 60) {
                data.removeRow(0);
            }
            dataview = data;
            var options = {
                title: 'Live Data',
                backgroundColor: '#F0FFF0',
                titleTextStyle: { fontName: 'Arial', fontSize: '30', bold: 'true' },
                legend: 'none',
                curveType: 'function', animation: { startup: true, easing: 'in' },
                hAxis: { title: 'Time(s)', format: 'mm:ss' },
                colors: ['red', 'blue'],
                vAxes: {
                    0: {
                        logScale: false, maxValue: 35, minValue: 25, gridlines: { count: 5 }, title: 'Temp(\xB0C)', titleTextStyle: {
                            color: 'red',
                            fontName: 'Arial',
                            fontSize: '30'
                        }
                    },
                    1: {
                        logScale: false, maxValue: 100, minValue: 50, gridlines: { count: 10 }, title: 'Humidity(%)', fontName: 'Arial', titleTextStyle: {
                            color: 'blue',
                            fontName: 'Arial',
                            fontSize: '25'
                        }
                    }
                },
                series: {
                    0: { targetAxisIndex: 0 },
                    1: { targetAxisIndex: 1 },
                }
            };
            var date_formatter = new google.visualization.DateFormat({
                pattern: "HH:mm:ss"
            });
            date_formatter.format(data, 0);
            var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));
            chart.draw(data, options);
        }
    </script>
</head>

<body style="background-color: #F0FFF0;">
    <title>Estufa</title>
    <div class="boxTitle">
        <label class="Title">New Heat Ramp</label>
    </div>
    <div style="justify-content: center; margin-left:10%; margin-right:10%;">
        <h2 class="h1_welcome">Welcome to the new ramp configuration page. You can configure how you would like next heat ramp to be.
            <br>Please note that due to the DS18b20 sensor limitations, the temperature must be between -125&deg;C e +85&deg;C</h2>
    </div>

    <form action="/do" id="doForm" method="GET" onkeypress="preventEnter(event)">
        <div class="infoBox">
            <h1 class="h1_dropdownBox">Selecione a quantidade de passos que deseja</h1>
            <select name="steps" class="dropdownBox" id="dropdownBox" onchange="sizeChanged(this.value)">
            </select>
        </div>
        <br>
        <div class="bigBox">
            <div class="inputBox" id="inputBox">
            </div>
            <div class="chartBox">
                <div class="preview_chart" id="preview_chart">
                </div>
                <!-- <div style="margin-bottom:5px; margin-left:20px; flex-direction: row; justify-content: space-evenly; display: flex;"> -->

                <div style="display: flex; flex-direction: row; justify-content: space-between">
                    <div class="buttonBox">
                        <input class="buttonBox_tn" type="button" value="Back" onclick="go('/')">
                        <!-- <input class="buttonBox_tn" type="button" disabled value="Preview" onclick="ManualDrawChart()"> -->
                        <input class="buttonBox_tn" type="button" value="Last" onclick="requestLast()">
                        <input class="buttonBox_tn bt_sub" type="submit" value="Submit">

                    </div>
                    <div class="optionsBox" style="justify-content: space-between; display: flex; flex-direction: column;">
                        <div >
                            <div style="justify-content: space-between; display: flex;">
                            <label style="margin-right: 2px">Project name: </label>
                            <input type="text" name="pname" size="10px">
                            </div>
                            <br>
                            <div style="justify-content: space-between; display: flex;">
                                <label style="margin-right: 2px">
                                    Warm up before starting:
                                </label>
                                <label class="switch">
                                    <input type="checkbox" name="heatup">
                                    <span class="slider round"></span>
                                </label>
                            </div>
                            <br>
                            <div style="justify-content: space-between; display: flex;">
                                <label style="margin-right: 10px">
                                    Start on submit:
                                </label>
                                <label class="switch">
                                    <input type="checkbox" name="_start" checked on>
                                    <span class="slider round"></span>
                                </label>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            </div>


    </form>
    <footer style="justify-content: center; display: flex;">
        <p>
            <i>Supersonic by MattediWorks&copy;</i>
        </p>
    </footer>
</body>

</html>)==="
//##$$
        ;
}
String getPage8()
{
    return
        //##$$Files.css

R"===(@charset "utf-8";

:root{
    --files_size: 350px;
}
body {
    background-color: #F0FFF0;
}
.FilesList{
    display: absolute;
    width: 400px;
    flex-direction: column;
    justify-content: center;
    margin: auto;
    overflow: auto;
    max-height: 80%;


    /* border: black 1px solid; */
}
    
.FilesLine{
    display: flex;
    justify-content: space-between;
    font-size:  1.2em;
    width: var(--files_size);

}
.LineSelected
{
    background-color: rgb(62, 156, 152);
}
.FilesHeader
{
    display: flex;
    justify-content: space-evenly;
    margin-right: 9px;
    font-size:  1.2em;
    width: fill;
}

.FilesDiv{
    display:flex; justify-content: space-evenly;
}
a{
    cursor: pointer;
    text-decoration: none;
}
a:hover{
    text-decoration: underline;
}
.buttonBox {
    display: flex;
    align-items: center;
    justify-content: space-around;
    min-width: 25%;
    margin: auto;
    width: 80%;

}

.buttonBox .buttonBox_tn {
    height: 50px;
    border: 2px solid;
    border-radius: 10px;
    font-size: 20px;
    min-width: 100px;
    text-transform: uppercase;
}

.buttonBox_tn:hover:enabled {
    background: rgb(35, 32, 223);
    color: white;
    border-radius: 100px;
    width: 150px;
    transition: all 0.5s linear;
}
.deleteAll:hover:enabled
{
    background: rgb(146, 12, 12);
    color: white;
    border-radius: 100px;
    width: 150px;
    transition: all 0.5s linear;
}
.buttonFiles
{
    color: rgb(68, 66, 66);
    background: inherit;
    border-radius: 5px;
    height: 30px;
    min-width: 100px;
    font-size: 20px;
}
.buttonShowAll 
{
    color: rgb(0, 0, 0);
    background: inherit;
    border-radius: 5px;
    height: 30px;
    min-width: 100px;
    font-size: 16px;
}
.buttonDelete:enabled:hover
{
    background: rgb(163, 1, 1);
    color: white;
    transition: all 0.5s linear;
    text-decoration: underline;
    cursor: pointer;
   
}
.buttonLoad:enabled:hover
{
    background: rgb(140, 240, 235);
    color: white;
    transition: all 0.5s linear;
    text-decoration: underline;
    cursor: pointer;
}
.title{
    color:brown;
    text-decoration: underline;
    font-family: 'Glory', sans-serif;
    font-size: 3.75em;
}

h1{
    font-family: 'Noto Sans JP', sans-serif;
}

.tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 0;
    position: absolute;
    z-index: 1;
    bottom: 150%;
    left: 50%;
    margin-left: -60px;
  }
  
  .tooltip .tooltiptext::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: black transparent transparent transparent;
  }
  
  .tooltip:hover .tooltiptext {
    visibility: visible;
  })==="
//##$$
        ;
}
String getPage9()
{
    return
        //##$$Files.html

R"===(<html>

<head>
  <link href="Files.css" rel="stylesheet" type="text/css">
  <link rel="apple-touch-icon" sizes="57x57" href="/Favicons/index/apple-icon-57x57.png">
  <link rel="apple-touch-icon" sizes="60x60" href="/Favicons/index/apple-icon-60x60.png">
  <link rel="apple-touch-icon" sizes="72x72" href="/Favicons/index/apple-icon-72x72.png">
  <link rel="apple-touch-icon" sizes="76x76" href="/Favicons/index/apple-icon-76x76.png">
  <link rel="apple-touch-icon" sizes="114x114" href="/Favicons/index/apple-icon-114x114.png">
  <link rel="apple-touch-icon" sizes="120x120" href="/Favicons/index/apple-icon-120x120.png">
  <link rel="apple-touch-icon" sizes="144x144" href="/Favicons/index/apple-icon-144x144.png">
  <link rel="apple-touch-icon" sizes="152x152" href="/Favicons/index/apple-icon-152x152.png">
  <link rel="apple-touch-icon" sizes="180x180" href="/Favicons/index/apple-icon-180x180.png">
  <link rel="icon" type="image/png" sizes="192x192" href="/Favicons/index/android-icon-192x192.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/Favicons/index/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="96x96" href="/Favicons/index/favicon-96x96.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/Favicons/index/favicon-16x16.png">
  <meta name="msapplication-TileColor" content="#ffffff">
  <meta name="msapplication-TileImage" content="/Favicons/index/ms-icon-144x144.png">
  <meta name="theme-color" content="#ffffff">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Glory:wght@100&family=Noto+Sans+JP:wght@100&display=swap"
    rel="stylesheet">
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <script type="text/javascript" src="Graphs.js"></script>

  <script>

    const xmlHttp = new XMLHttpRequest();
    RequestData("/fileslist");

    var test = "files:test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,test.log 159.25,jolts.csv 0.06,;";
    var use_relative_time_flag = false;
    var stopLoadingAnimation = false;
    var currentDiv = undefined;
    var currentName = "";
    var savedFileList = "";
    var showAllFiles = false;
    var incomeCSV = false;

    function RequestData(whichdata, loading) {
      if (typeof whichdata !== 'string')
        httpGetAsync("requpdate", ParseNewData);
      else
        httpGetAsync(whichdata, ParseNewData);

    }
    function httpGetAsync(theUrl, callback) {
      xmlHttp.onreadystatechange = function () {
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
          callback(xmlHttp.responseText);
      }
      xmlHttp.open("GET", theUrl, true); // true for asynchronous
      xmlHttp.send();
    }
    function ParseNewData(incomeString) {
      try {

        for (var i = 0; i < incomeString.split(';').length; i++) {
          var _args = incomeString.split(';')[i].split(':');
          if (_args[0] == "files") {
            savedFileList = incomeString.split(';')[i];
            getFiles(_args[1]);
          }
          if (_args[0] == 'error') {
            alert(_args[1]);
          }
          // if (_args[0] == "title") {
          //   GraphOptions.GraphName = _args[1];
          // }
          // if (_args[0] == "CSV") {
          //   parseCSV(incomeString.split(';')[i]);
          // }
          if (incomeCSV)
          {
            parseCSV(incomeString)
            incomeCSV = false;
          }
          if (_args[0] == 'go') {
            go(_args[1]);
          }
        }


      }
      catch (err) {
        console.log(err);
      }
      SetLoading(false);
    }

    function getFiles(filesString) {
      var FilesCSV = [,];
      var CSVIndex = 0;
      var _args = filesString.split(',');
      for (var i = 0; i < _args.length; i++) {
        _args2 = _args[i].split('=');
        if (_args2[0] !== "" && _args2[1] !== "") {

          if (_args2[0].endsWith(".csv")) {
            FilesCSV[CSVIndex] = _args2;
            CSVIndex++;
          }
          else {
            if (showAllFiles === true) {
              FilesCSV[CSVIndex] = _args2;
              CSVIndex++;
            }

          }

        }
      }
      genFileList(FilesCSV, "CSV");
    }

    function genFileList(files, what) {
      if (typeof (files[0]) !== 'undefined') {

        //  var s = '<div class="FilesDiv"><div class="FilesLine HeaderLine"><label>File: </label><label>Size:&nbsp;&nbsp;</label></div><label>delete</label></div>';
        var s = "";
        for (let i = 0; i < files.length; i++) {
          s += genLines(files[i][0], files[i][1]);
        }

        document.getElementById("FilesList" + what).innerHTML = s;
      }
      else
        document.getElementById("FilesList" + what).innerHTML = "";
    }

    function genLines(name, size) {
      divString = '<div class="FilesDiv"><div class="FilesLine" onclick="selectDiv(this, \'' + name + '\')"><a href="/Logs/' + name + '" download>' + name + '</a><label>' + size + ' kb</label></div>';
      divString = divString + '</div>';
      return divString;
    }
    function go(where) {
      window.location.assign(where);
      //window.location.href(place);
    }

    function deleteFile() {

      if (currentName === "")
        return;

      if (confirm("Tem certeza que deseja deletar o arquivo: " + currentName + " ?")) {
        var url = "/deleteFile?fileName=" + currentName;
        RequestData(url);
      }
    }

    window.onload = function () {
      GraphOptions.resetDataTable();
      drawChart();
    }

    function changeGraphDisplay() {

      if (document.getElementById("ramp_chart").style.display != "none") {
        document.getElementById("ramp_chart").style.display = "none";
        document.getElementById("graph-options").value = "Show Graph"
      }
      else {
        document.getElementById("ramp_chart").style.display = "block";
        document.getElementById("graph-options").value = "Hide Graph"
        drawChart();
      }
    }

    function CustomAddData(_newData, j) {
      try {
        var data = _newData.split(',');

        if (typeof data === 'undefined')
          return;
        var newRow = [];
        if (use_relative_time_flag)
          newRow[0] = new Date(parseInt(data[1]) * 1000);
        else
          newRow[0] = new Date(parseInt(data[0]) * 1000);

        newRow[1] = parseFloat(data[2]);
        newRow[2] = parseFloat(data[3])
        newRow[3] = null;
        newRow[4] = null;
        if (data[6] != '\r') {
          console.log(j, newRow[0], data[6])
          if (data[6] === "heat ramp finished") {
            newRow[3] = "F";
            newRow[4] = "Final: " + getFormattedTime(newRow[0]);
          }
          else if (data[6] === "heat ramp started\r") {
            newRow[3] = "S";
            newRow[4] = "Começo: " + getFormattedTime(newRow[0]);
          }
          else {
            console.log(newRow[0], j);

            newRow[3] = data[6].split(':')[1];
            newRow[4] = "Passo " + data[6].split(':')[1] + ": " + getFormattedTime(newRow[0]);
          }

        }

        GraphOptions.DataTable.addRow(newRow);




      } catch (e) {
        console.log(e);
      }
    }
    function getFormattedTime(date) {
      try {
        var formattedTime = "";
        var h = date.getHours();
        var m = date.getMinutes();

        if (h < 10)
          formattedTime += "0";
        formattedTime += h;
        formattedTime += ":"
        if (m < 10)
          formattedTime += "0";
        formattedTime += m

        return formattedTime;
      } catch (error) {
        return null;
      }
    }

    function parseCSV(csvFile) {
      var data = new google.visualization.DataTable();
      data.addColumn('date', 'Time');
      data.addColumn('number', 'Temperature');
      data.addColumn('number', 'Set Temperature');
      data.addColumn({ type: 'string', role: 'annotation' });
      data.addColumn({ type: 'string', role: 'annotationText' });
      GraphOptions.DataTable = data;
      var line = 0;
      var rows = csvFile.split('\n');
      for (var i = 1; i < rows.length; i++) {
        CustomAddData(rows[i], i);
      }
      drawChart();
    }

    function loadFile() {
      if (currentName != "") {
        if (!currentName.endsWith(".csv")) {
          alert("Select a CSV file to view.\nyou can download a file by clicking on its name.");
          return;
        }
        GraphOptions.title = currentName.trim('.csv');
        var url = "/csv?fileName=" + currentName;
        incomeCSV = true;
        RequestData(url);
      }
    }
    function selectDiv(object, name) {
      if (typeof (currentDiv) !== 'undefined')
        currentDiv.className = "FilesLine";

      if (typeof (object) !== 'undefined') {
        object.className = "FilesLine LineSelected";
        document.getElementById('buttonDelete').removeAttribute("disabled");
        document.getElementById('buttonLoad').removeAttribute("disabled");
      }
      else {
        document.getElementById('buttonDelete').setAttribute("disabled", "disabled");
        document.getElementById('buttonLoad').setAttribute("disabled", "disabled");

      }

      currentDiv = object;
      currentName = name;
    }

    function deleteAllFiles() {
      if (confirm("This will delete all heat ramp logs. Are you sure?")) {
        var url = "/deleteAllFiles";
        RequestData(url);
      }


    }


    function SetLoading(param) {

      if (typeof (param) === 'boolean') {
        if (param) {
          document.getElementById("bottombuttons").style.display = "none";
          document.getElementById("bottomloading").style.display = "flex";
          SetLoading(0);

        }
        else {
          document.getElementById("bottombuttons").style.display = "flex";
          document.getElementById("bottomloading").style.display = "none";
          stopLoadingAnimation = true;
        }
      }
      else if (typeof (param) === 'number') {
        var text = "<h1>Loading";
        for (var i = 0; i < param; i++) {
          text += ".";
        }
        text += "</h1><h3>(sometimes it takes a while because the microcontroller have to read off the SD disk)</h3>";
        param++;
        if (param >= 4) {
          param = 0;
        }
        document.getElementById("bottomloading").innerHTML = text;
        if (stopLoadingAnimation) {
          stopLoadingAnimation = false;
        }
        else {
          setTimeout(() => { SetLoading(param) }, 500);
        }

      }

    }
    function ChangeShowAllFilesFlag(button) {
      showAllFiles = !showAllFiles;
      if (showAllFiles)
        button.innerHTML = "Show CSV Files";
      else
        button.innerHTML = "Show All Files";

      ParseNewData(savedFileList);
    }
  </script>
</head>

<body>
  <title>Estufa</title>
  <div style="display: flex; justify-content: space-evenly;">
    <h1 class="title">Files Available:</h1>
  </div>

  <div style="display: flex; justify-content: space-evenly; max-height: 60%;">
    <div id="ramp_chart" style="min-width: 50%; height: fill;"></div>
    <div>
      <div style=" border: brown 1px solid; min-height: 400px;">
        <div style="display: flex; justify-content: space-evenly;">
          <h1>Ramp logs</h1>
        </div>
        <div class="FilesHeader">
          <div style="display:flex;  justify-content: space-between; width: var(--files_size);"
            onclick="selectDiv(undefined,'')"><label>File: </label><label>Size:&nbsp;&nbsp;</label></div>
        </div>
        <div id="FilesListCSV" class="FilesList">
        </div>
      </div>
      <div class="buttonBoxFiles"
        style="width: var( --files_size);justify-content: space-evenly; margin: auto;margin-top: 5px; display: flex;">
        <button id="buttonLoad" class="buttonFiles buttonLoad" disabled onclick="loadFile()">Load</button>
        <button id="buttonShowAll" class=" buttonShowAll" onclick="ChangeShowAllFilesFlag(this)">Show All Files</button>
        <button id="buttonDelete" class="buttonFiles buttonDelete" disabled onclick="deleteFile()">Delete</button>
      </div>
    </div>
  </div>
  <br>
  <br>
  <div style="display: flex; flex-direction: row; justify-content: space-between; margin: auto; margin-top: 20px;">
    <div class="buttonBox" id="bottombuttons">
      <input id="graph-options" class="buttonBox_tn" type="button" value="Hide Graph" onclick="changeGraphDisplay()">
      <input class="buttonBox_tn" type="button" value="Back" onclick="go('/')">
      <input class="buttonBox_tn" type="button" value="Reload" onclick="go('/Files.html')">
      <input class="buttonBox_tn deleteAll" type="button" value="Delete all" onclick="deleteAllFiles()">
    </div>
    <div class="buttonBox" id="bottomloading" style="display: none; flex-direction: column;">
      <h1>Loading</h1>
      <h2>(sometimes it takes a while because the microcontroller have to read off the SD disk)</h2>
    </div>
  </div>

</body>

</html>)==="
//##$$
        ;
}
String getPage10()
{
    return
        //##$$Graphs.js

R"===(

google.charts.load('current', { 'packages': ['corechart'] });
google.charts.setOnLoadCallback(drawChart);

const GraphOptions = new GraphOptionsCreator();
const CurrentRamp = new CurrentRampCreator();

function GraphOptionsCreator() {
    this.DrawProgramedRamp = true;
    this.RampOption = 'function';
    this.GraphSize = -1;
    this.DataTable = undefined;
    this.ShowFuture = true;
    this.HoldGraph = false;
    this.GraphName = "Live Data";
    this.hColors = ['red', 'darkred', 'darkgreen'];
    this.resetDataTable = function () {
        var data = new google.visualization.DataTable();
        data.addColumn('date', 'Time');
        data.addColumn('number', 'Temperature');
        data.addColumn({ 'type': 'string', 'role': 'style' });
        this.DataTable = data;
    }
}

function CurrentRampCreator() {
    this.temp = [];
    this.times = [];
    this.stepsTimeStamps = [];

    this.totalsteps = 0;
    this.start = 0;
    this.heatingStart = 0;
    this.end = 0;
    this.computedEnd = 0;

    this.configured = false;
    this.finished = false;
    this.running = false;
    this.heating = false;
    this.programmedStart = false;
    this.heatUp = false;

    this.name = "";
    this.reset = function () {
        this.temp = [];
        this.times = [];
        this.stepsTimeStamps = [];

        this.totalsteps = 0;
        this.start = 0;
        this.heatingStart = 0;
        this.end = 0;
        this.computedEnd = 0;

        this.configured = false;
        this.finished = false;
        this.running = false;
        this.heating = false;
        this.heatUp = false;
        this.programmedStart = false;
        this.name = "";
    }

}

function genRampGraph(data, steps) {
    var _currRampTime = CurrentRamp.start * 1000;
    if (_currRampTime <= 1)
        _currRampTime = Date.now();

    if (typeof (steps) !== 'number')
        steps = 10;

    if (steps <= 0)
        steps = 10;

    // data.addRow([new Date(_currRampTime), CurrentRamp.temp[0]]);
    for (var i = 0; i < CurrentRamp.temp.length; i++) {
        for (var j = 1; j < steps; j++) {
            data.addRow([new Date(_currRampTime + ((j / steps) * 60 * 1000 * CurrentRamp.times[i])), CurrentRamp.temp[i]]);
        }
        var newtime = _currRampTime + 60 * 1000 * CurrentRamp.times[i];
        _currRampTime = newtime;
    }
}

function drawChart() {

    if (GraphOptions.HoldGraph)
        return;

        var finalData;
    //Create a separated datatable then join 
    if (CurrentRamp.times.length != 0 && CurrentRamp.temp.length != 0) {
        var data = new google.visualization.DataTable();
        data.addColumn('date', 'Time');
        data.addColumn('number', 'Set Temperature');

        genRampGraph(data, 100);
        finalData = google.visualization.data.join(GraphOptions.DataTable, data, 'full', [[0, 0]], [1, 2], [1]);
    }
    else {
        finalData = GraphOptions.DataTable;
    }


    var date_formatter = new google.visualization.DateFormat({
        pattern: "HH:mm:ss"
    });
    date_formatter.format(finalData, 0);

    var dataview = new google.visualization.DataView(finalData);

    if (!GraphOptions.DrawProgramedRamp) {
        dataview.setColumns([0, 1, 2]);
    }

    if (GraphOptions.GraphSize > 0)
        dataview.setRows(dataview.getFilteredRows([{ column: 0, minValue: new Date(Date.now() - 60 * 1000 * GraphOptions.GraphSize) }]));
    if (!GraphOptions.ShowFuture)
        dataview.setRows(dataview.getFilteredRows([{ column: 0, maxValue: new Date(Date.now()) }]));

    if (CurrentRamp.running)
        GraphOptions.RampOption = "Line";

    var options = {
        //tooltip: {isHtml: true, trigger: 'selection'},
        title: GraphOptions.GraphName,
        backgroundColor: '#F0FFF0',
        interpolateNulls: true,
        titleTextStyle: { textAlign: 'center', justify: 'center', fontName: 'Arial', fontSize: '30', bold: 'true' },
        legend: 'none',
        dataOpacity: 1,
        pointSize: 1,
        curveType: GraphOptions.RampOption, animation: { startup: true, easing: 'in' },
        hAxis: { title: 'Time', format: 'HH:mm' },
        colors: GraphOptions.hColors,
        vAxes: {
            0: {
                logScale: false, gridlines: { count: 5 }, title: 'Temp(\xB0C)', titleTextStyle: {
                    color: 'red',
                    fontName: 'Arial',
                    fontSize: '30'
                }
            },
            1: {
                logScale: false, maxValue: 100, minValue: 50, gridlines: { count: 10 }, title: 'Humidity(%)', fontName: 'Arial', titleTextStyle: {
                    color: 'blue',
                    fontName: 'Arial',
                    fontSize: '25'
                }
            }
        },
        series: {
            0: { targetAxisIndex: 0 },
            1: { targetAxisIndex: 0 },
            2: { targetAxisIndex: 0 },
        },
        explorer: {
            keepInBounds: true,
            maxZoomIn: 4.0,
            maxZoomOut: 2.0
        },
    };

    var chart = new google.visualization.LineChart(document.getElementById('ramp_chart'));
    chart.draw(dataview, options);

}

function addData(_DataTable, _newData) {
    try {
        var data = _newData.split(',');
        if (typeof data === 'undefined')
            return;

        for (var i = 0; i < data.length; i++) {
            var data2 = data[i].split(' ');
            if (data2[0] == 0 && data2[1] == 0);
            else {
                if (_DataTable.getNumberOfRows() - 1 >= 0)
                    _DataTable.setCell(GraphOptions.DataTable.getNumberOfRows() - 1, 2, null);
                _DataTable.addRow([new Date(parseInt(data2[0]) * 1000), parseFloat(data2[1]), "point { size: 7; shape-type: circle; fill-color: #006400}"]);
                if (_DataTable.getNumberOfRows() > 5000) {
                    _DataTable.removeRow(0);
                }
            }
        }

        drawChart();

    } catch (e) {
        console.log(e);
    }
}

function changeDrawHeatRamp(slider) {
    GraphOptions.DrawProgramedRamp = slider.checked;
    drawChart();
}
function changeTimeSpan(object) {
    GraphOptions.GraphSize = parseInt(object.value);
    drawChart();
}
function changeShowFuture(object) {
    GraphOptions.ShowFuture = object.checked;
    drawChart();
}
function changeGraphMode(object) {
    GraphOptions.RampOption = object.value;
    drawChart();
}
function handleHoldButton() {
    GraphOptions.HoldGraph = !GraphOptions.HoldGraph;
    if (GraphOptions.HoldGraph) {
        document.getElementById('btnHold').className = "hold";
        // document.getElementById('btnHold').innerText="Release";
    }
    else {
        document.getElementById('btnHold').className = "";
        // document.getElementById('btnHold').innerText="Hold";

    }

    if (!GraphOptions.HoldGraph)
        drawChart();
}

)==="
//##$$
        ;
}
String getPage11()
{
    return
        //##$$MainPage.html

R"===(<html>

<head>
    <link href="Common.css" rel="stylesheet" type="text/css">
    <link rel="apple-touch-icon" sizes="57x57" href="/Favicons/index/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/Favicons/index/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/Favicons/index/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/Favicons/index/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/Favicons/index/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/Favicons/index/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/Favicons/index/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/Favicons/index/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/Favicons/index/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="/Favicons/index/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/Favicons/index/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="/Favicons/index/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/Favicons/index/favicon-16x16.png">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="/Favicons/index/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js">
    </script>
    <script type="text/javascript" src="CommonScript.js"></script>

</head>

<body>
    <h1>Estufa do Laboratorio</h1>
    <div id="esp_connected">
        <div class="status_div"
            style="display:flex; justify-content: space-around; margin-right: 10%; margin-left: 10%;">
            <div>
                <Label>Current State: </Label>
                <Label id="stateLabel"> Unknown </Label>
            </div>
            <div>
                <Label id="timeLabel"
                    style="font-family:'Courier New', Courier, monospace; font-size: 30px; border: 1px solid black; border-radius: 15px; padding: 4px; background-color: cornflowerblue;">
                </Label>
            </div>
            <div class="WorkingState" id="WorkingState"
                style="display: flex; justify-content: space-between; width: 40%;">
                <div>
                    <!-- <Label>Remaining Time: </Label> -->
                    <Label id="remainingTimeLabel"
                        style="font-family:'Courier New', Courier, monospace; font-size: 30px; border: 1px solid black; border-radius: 15px; padding: 4px; background-color: darkred;"></Label>
                </div>
                <div>
                    <Label>Current Step: </Label>
                    <Label id="currentStepsLabel"></Label>
                </div>
            </div>
        </div>
        <div style="width: 100%; height:500px; align-items: center; justify-items: center; display: flex;">
            <div style="width: 10%"></div>
            <div id="ramp_chart" style="width:70%;height:500px; position: relative; display: flex;"></div>
            <div id="boxSide" style="width: 20%;">
                <div id="circle_1"></div>
                <div id="circle_2"></div>
            </div>
            <div></div><br>
        </div>
        <div class="GraphOptionsBox">
            <div style="align-content: center; align-items: center; display: flex; flex-direction: row;"> <label
                    style="font-family: Helvetica, sans-serif; font-size: 16; margin-right: 10px;">
                    Show Heat Ramp:
                </label>
                <label class="switch">
                    <input type="checkbox" checked on onchange="changeDrawHeatRamp(this)" id="DrawHeatRampSlider">
                    <span class="slider round"></span>
                </label>
            </div>
            <div
                style="flex-direction: row; display: none; align-items: center; font-family: Helvetica, sans-serif; font-size: 16; margin-right: 10px;">
                <label style="margin-right: 10px;">
                    Set Time Span
                </label>
                <select class="dropdownBox" style="width: 80px; height: 20px;" id="TimeSpanSelect"
                    style="font-family: 'Courier New', Courier, monospace;" onchange="changeTimeSpan(this)">
                    <option value="-1">All</option>
                    <option value="1">1 Min</option>
                    <option value="5">5 Min</option>
                    <option value="5">15 Min</option>
                    <option value="30">30 Min</option>
                    <option value="60">1 Hour</option>
                    <option value="120">2 Hour</option>
                </select>
            </div>
            <div
                style="flex-direction: row; display: flex; align-items: center; font-family: Helvetica, sans-serif; font-size: 16; margin-right: 10px;">
                <label style="margin-right: 10px;">
                    Graph Mode:
                </label>
                <select class="dropdownBox" style="width: 80px; height: 30px;" id="GraphOptionSelect"
                    style="font-family: 'Courier New', Courier, monospace, 20px;" onchange="changeGraphMode(this)">
                    <option style=" font-size: 20px;" value="function">Function</option> <span id="btnStop_tooltip"
                        class="button tooltiptext">Tooltip text</span>
                    <option style=" font-size: 20px;" value="line">Line</option>
                </select>
            </div>

            <div style="align-content: center; align-items: center; display: flex; flex-direction: row;"> <label
                    style="font-family: Helvetica, sans-serif; font-size: 16; margin-right: 10px;">
                    Show Future:
                </label>
                <label class="switch">
                    <input type="checkbox" checked on onchange="changeShowFuture(this)" id="ShowFutureSlider">
                    <span class="slider round"></span>
                </label>
            </div>
            <button onclick="handleHoldButton()" id='btnHold'>Hold
            </button>
        </div>
        <div class="buttonLine">
            <button onclick="go('Files.html')" class="button">
                <div> Files</div>
                <span class="tooltiptext">Check current files and past ramps</span>
            </button>
            <button onclick="go('Settings.html')" class="button"> Settings
            </button>
            <button id="btnStop" onclick="stopbutton()" class="button buttonStop">
                <div id="btnStop_text">STOP</div>
                <span id="btnStop_tooltip" class="tooltiptext" hidden>Tooltip text</span>
            </button>
            <button onclick="go('doPage.html')" class="button" id='btnNewRamp'>
                <div id="btnNewRamp_text">New Ramp</div>
                <span id="btnNewRamp_tooltip" class="tooltiptext" hidden>Tooltip text</span>
            </button>

        </div>

        <div class="offline-div" id="offline-div">
            <div class="offline-div-table">
                <table id=offline-table>
                </table>
            </div>

        </div>
    </div>

    <div id="esp_not_connected" style='display: none; min-height: 70%;'>

        <div style="display: flex; margin: auto; justify-content: center;">
            <label style="font-size: 24px;">The connection with the ESP microcontroller was lost</label>
        </div>
        <div style="display: flex; margin: auto; justify-content: center; margin-top: 20px;">

            <label style="font-size: 20px; ">trying to reconnect</label>
            <span id="reconnect-animation" style="width: 10px;font-size: 20px; ">...</span>

        </div>
    </div>

    <footer>
        <p class="footer"><i>Supersonic by MattediWorks&copy;</i></p>
    </footer>

</body>

</html>)==="
//##$$
        ;
}
String getPage12()
{
    return
        //##$$medium-slider.css

R"===(@charset "utf-8";

        .switch {
            position: relative;
            display: inline-block;
            width: 40px;
            height: 23px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            -webkit-transition: .4s;
            transition: .4s;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 17px;
            width: 17px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

        input:checked+.slider {
            background-color: #2196F3;
        }

        input:focus+.slider {
            box-shadow: 0 0 1px #2196F3;
        }

        input:checked+.slider:before {
            -webkit-transform: translateX(17px);
            -ms-transform: translateX(17px);
            transform: translateX(17px);

        }

        /* Rounded sliders */
        .slider.round {
            border-radius: 23px;
        }

        .slider.round:before {
            border-radius: 50%;
        }
)==="
//##$$
        ;
}
String getPage13()
{
    return
        //##$$Settings.css

R"===(@charset "utf-8";
:root{
    --TextWidth: 200px;
    --TextHeight: 25px;
    --BoxSize: 400px;
}
body {
    background-color: #F0FFF0;
    flex-wrap: wrap;
}
.circle_box
{
    transform: scale(0.65,0.65);
    width: 130px !important;
    height: 130px !important;
}
input[type=number] {
    width: calc(var(--BoxSize)/4);
    height: 30px;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-right: 2px;
    font-size: 18px;
    text-align: center;
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    
    
}
input[type='number']::-webkit-inner-spin-button
{
    display: none;
}

input
{
    text-align: center;
    width: var(--TextWidth);
    height: var(--TextHeight);
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    font-size: 16px;
  
}

label {
    font-size: 18px;
}
.settings-title
{
    justify-self: center;
    align-self: center;
    margin: auto;
    color: indianred;
    font-family: 'Glory', sans-serif;
    font-size: 5rem;
    text-decoration: underline;

}

.div-pin{
    width: 200px !important;
    display: flex;
    justify-content: space-between;
}

.dropdownBox{
    width: var(--TextWidth);
    height: var(--TextHeight);
    font-size: 16px;
    
}
.dropDown2{
    width: calc(var(--TextWidth)/6px);
    height: var(--TextHeight);
    font-size: 16px;
    
}

.dropdownBox option{
    width: var(--TextWidth);
    height: var(--TextHeight);
    font-size: 16px;
    
}
.dropDown2 option{
    width: calc(var(--TextWidth)/6px);
    height: var(--TextHeight);
    font-size: 16px;
    
}
.wholepage
{
    display: flex;
    flex-direction:unset;
    flex-wrap: wrap;
}

.box-title 
{
    text-transform: uppercase;
    display: flex;
    background-color: wheat;
    width: var(--BoxSize);
    justify-content: center;
    margin-bottom: 7px;
    
}
.box-title label
{
    font-family: 'Glory', sans-serif;
    font-weight: bold;
    font-size: 24px;
}

.box-div
{
    display: flex;
    margin: auto;
    border: peru solid 1px; 
    width: var(--BoxSize); 
    flex-direction: column;
    margin: auto;
    margin-top: 10px;
    justify-content: center;
}
.basic-div
{
    margin: 2.5px;
    display: flex;
    align-items: center;
}
.basic-three
{
    justify-content: space-between;
}
.basic-three .basic-two
{
    justify-content: space-between;
    min-width: calc(var(--BoxSize) * 0.85);
}
.basic-two
{
    justify-content: space-between;
}
.basic-one
{
    justify-content: center;
}
.box-button1
{
    height: 1.5rem;
 
    width: calc(var(--BoxSize)/6);
    background: inherit;
    border-radius: 10px;
    border: 2px solid;

}
.box-button1:hover
{
    background-color: darkcyan;
    color: white;
    border: 2px solid;
}

.item-label
{
    font-size: 18px;
    text-decoration: underline;
    font-family: 'Open Sans', sans-serif;
    font-weight: bold;
}
.desc-label
{
    text-align: justify;
    font-size: 16px;
    font-family: 'Bona Nova', serif;
}

.button2
{
    margin-top: 10px;
    height: 1.75rem;
    width: calc(var(--BoxSize)/2);
    border-radius: 5px;
    border: 1px solid;
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    font-size: 1rem;
    background-color: #fff7f7;

}
.button2:hover
{
    border: 2px solid black;
    background-color: #fff7f7b0;
    color: red;
}

                    
.basic-number
{
    width: var(--BoxSize)/4;
    
}

.savebutton
{
    width: var(--BoxSize);
    height: 3rem;
    margin: auto;
    margin-top: 5%;
    text-align: center;
    font-family:Verdana, Geneva, Tahoma, sans-serif;
    font-size: 1.25rem;
    border-radius: 20px;
}
.savebutton:hover
{
    background-color: snow;
    border: 3px solid black;
    color: salmon;
    border-radius: 40px;
}

.redbk{

    animation: redness;
    animation-duration: 4s;

}

@keyframes redness
{
    from{ background-color: #ff0000;}
    to{}
}

.pinselector
{
    width: calc(var(--BoxSize)/4);
    height: 30px;
    border: 1px solid #ccc;
    border-radius: 3px;
    font-size: 18px;
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    text-align: center;
}
.pinselector option
{
    border-radius: 3px;
    font-size: 18px;
    font-family: Verdana, Geneva, Tahoma, sans-serif;
})==="
//##$$
        ;
}
String getPage14()
{
    return
        //##$$Settings.html

R"===(<html>

<head>
  <link href="Settings.css" rel="stylesheet" type="text/css">
  <link href="Circles.css" rel="stylesheet" type="text/css">
  <link href="medium-slider.css" rel="stylesheet" type="text/css">
  <link rel="apple-touch-icon" sizes="57x57" href="/Favicons/index/apple-icon-57x57.png">
  <link rel="apple-touch-icon" sizes="60x60" href="/Favicons/index/apple-icon-60x60.png">
  <link rel="apple-touch-icon" sizes="72x72" href="/Favicons/index/apple-icon-72x72.png">
  <link rel="apple-touch-icon" sizes="76x76" href="/Favicons/index/apple-icon-76x76.png">
  <link rel="apple-touch-icon" sizes="114x114" href="/Favicons/index/apple-icon-114x114.png">
  <link rel="apple-touch-icon" sizes="120x120" href="/Favicons/index/apple-icon-120x120.png">
  <link rel="apple-touch-icon" sizes="144x144" href="/Favicons/index/apple-icon-144x144.png">
  <link rel="apple-touch-icon" sizes="152x152" href="/Favicons/index/apple-icon-152x152.png">
  <link rel="apple-touch-icon" sizes="180x180" href="/Favicons/index/apple-icon-180x180.png">
  <link rel="icon" type="image/png" sizes="192x192" href="/Favicons/index/android-icon-192x192.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/Favicons/index/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="96x96" href="/Favicons/index/favicon-96x96.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/Favicons/index/favicon-16x16.png">
  <meta name="msapplication-TileColor" content="#ffffff">
  <meta name="msapplication-TileImage" content="/Favicons/index/ms-icon-144x144.png">
  <meta name="theme-color" content="#ffffff">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Bona+Nova:ital@1&family=Open+Sans:wght@300&family=Glory:wght@100&family=Noto+Sans+JP:wght@100&display=swap"
    rel="stylesheet">
  <script type="text/javascript" src="Settings.js"></script>
  <script type="text/javascript" src="Circles.js"></script>

  <script>

  </script>
</head>

<body>

  <title>Estufa</title>
  <div style="display: flex; margin-top: 10px; flex-direction: row; justify-content: space-around; flex-wrap: wrap; ">
    <div style="display: flex; min-width: 50%; max-width: stretch;">
      <h1 class="settings-title">Settings</h1>
    </div>
    <div style="display: flex; margin: auto; width: min-content;">
      <div id="circle_1"></div>
      <div id="circle_2"></div>
      <div id="circle_3"></div>
      <div id="circle_4"></div>
    </div>
  </div>

  <div style="display: flex; justify-content: space-evenly; flex-wrap: wrap; max-width: 80%; margin: auto;">
    <div>
      <!-- Wifi Settings -->
      <div class="box-div">
        <div class="box-title">
          <label>Wifi Settings</label>
        </div>

        <div class="basic-div basic-two">
          <label class="item-label">Use Custom SSID</label>
          <label class="switch"><input type="checkbox" name="Custom SSID" id="wifi_custom_ssid"
              onchange="togglediv('wifi_ssid',this.checked)"><span class="slider round"></label>
          </span>
        </div>

        <div class="basic-div"><label class="desc-label">Enable this to try to connect to a hidden SSID</label></div>

        <div class="basic-div basic-three" id="wifi_ssid_list_div">
          <label class="item-label">Wifi SSID List:</label>
          <select name="WIFI_SSID" class="dropdownBox" id="wifi_dropdownBox"
            onchange="handleSettingsChanges(this,'wifi',)"></select>
          <div class="basic-one"> <button class="box-button1" onclick="RequestData('/reqwifisearch',10000)">Refresh</button>
          </div>
        </div>
        <div class="basic-div basic-three" id="wifi_custom_ssid_div">
          <label class="item-label">Wifi SSID:</label>
          <input id="wifi_custom_ssid" style="margin-right: 72px;"
            onchange="handleSettingsChanges(this,'wifi','alias:WIFI_SSID')"></input>
        </div>
        <div class="basic-div basic-two">
          <label class="item-label">Wifi Password:</label>
          <input type="password" id="WIFI_PASSWORD" onchange="handleSettingsChanges(this,'wifi')" />
          <div class="basic-one"> <button class="box-button1" onclick="Connect()">Connect</button></div>
        </div>
        <div class="basic-div basic-two">
          <label class="item-label">Use Static IP:</label>
          <label class="switch"><input type="checkbox" id="use_static_ip"
              onchange="enable('ip_address', this.checked); handleSettingsChanges(this,'wifi','supressdraw')"><span
              class="slider round"></span></label>
        </div>
        <div class="basic-div basic-two">
          <label class="item-label">IP:</label>
          <input class="input-wifi" id="ip_address" onchange="handleSettingsChanges(this,'wifi')" />
        </div>

        <div class="basic-div basic-two">
          <label class="item-label">Force AP:</label>
          <label class="switch"><input type="checkbox" name="Custom SSID" id="forceAP"
              onchange="handleSettingsChanges(this,'wifi','slider')"><span class="slider round"></label>
          </span>
        </div>
        <div class ="basic-div basic-one"><label class="desc-label">Enable this to create an Acess Point Even if you are connected
          to Wifi
        </label></div>


        <div class="basic-div basic-two"><label class="item-label">AP SSID:</label><input id="WIFI_AP_SSID"
            onchange="handleSettingsChanges(this,'wifi')"></input></div>
        <div class="basic-div basic-two"><label class="item-label">AP Password:</label><input type="password"
            class="dropdownBox" id="WIFI_AP_PASSWORD" onchange="handleSettingsChanges(this,'wifi')"></input></div>

        <div class="basic-div basic-one"><label class="desc-label">The Acess Point Will be visible if the ESP can't
            connect
            to the Wifi.</label></div>
      </div>


      <!-- Backup Settings -->
      <div class="box-div">
        <div class="box-title">
          <label>Backup</label>
        </div>
        <div class="basic-div basic-two"><label class="item-label">Enable Backup</label>
          <label class="switch"><input type="checkbox" name="Cache" id="enable_backup"
              onclick="enable('backup_freq', this.checked);handleSettingsChanges(this,'backup','slider');"><span
              class="slider round"></label>
          </span>
        </div>
        <div class="basic-div basic-three">
          <div class="basic-div basic-two"><label class="item-label">Backup every: </label><input id="backup_freq"
              onclick="handleSettingsChanges(this,'backup')" type="number" /></div><label
            class="item-label">Days.</label>
        </div>

        <div class="basic-div basic-two">
          <div class="basic-div "><label class="item-label">Last Backup:</label></div><label class="item-label"
            id='lastbackup'>Never</label>
        </div>

        <div class="basic-div basic-one"><button class="button2" onclick="ReqData('/backupnow')">Backup Now</button>
        </div>
      </div>

      <!--  Files Settings -->
      <div class="box-div">
        <div class="box-title">
          <label>Files Settings</label>
        </div>
        <div class="basic-div basic-one"><button class="button2"
            onclick="if (confirm('This is going to restart the microcontroller'))RequestData('/resetesp')">Reset
            ESP</button>
        </div>
        <div class="basic-div basic-one"><label class="desc-label">Resets the ESP.</label></div>
        <div class="basic-div basic-one"><button class="button2"
            onclick="if (confirm('Are you sure you want to reset all configuration?')){if (confirm('Are double sure you want to factory reset?\nThis is not possible to be undone.'))RequestData('/factoryreset')}">Factory
            Reset</button></div>
        <div class="basic-div basic-one"><label class="desc-label">Reset all the configurations to default.</label>
        </div>

      </div>
    </div>

    <!-- Sensor Settings -->
    <div>
      <div class="box-div">
        <div class="box-title">
          <label>Sensor Settings</label>
        </div>

        <div style="display: flex; width: inherit; justify-content: space-between;"><label class="item-label">Sensor
            Type:</label> <select class="dropdownBox" id="temp_sensor_type"
            onchange="togglediv('temp_sensor',this.value);handleSettingsChanges(this,'sensor')">
            <option value="0">DS18B20</option>
            <option value="2">NTC Thermopar</option>
          </select></div>

        <!-- NTC Thermopar options -->
        <div id="ntc-div" style="display: none;">
          <div class="basic-div basic-three">
            <div class="basic-div basic-two"><label class="item-label">NTC Pin:</label> <select class="pinselector"
                id="NTC_READ_PIN" type="number" min="32" max="39" onchange="handleSettingsChanges(this,'sensor')">
                <option value="33">32</option>
                <option value="33">33</option>
                <option value="34">34</option>
                <option value="35">35</option>
                <option value="36">36</option>
                <option value="37">37</option>
                <option value="38">38</option>
                <option value="39">39</option>
              </select>
            </div><span></span>
          </div>
          <div class="basic-div basic-three">
            <div class="basic-div basic-two"><label class="item-label">NTC ENABLE Pin:</label> <input
                onchange="handleSettingsChanges(this,'sensor')" id="NTC_ENABLE_PIN" type="number" min="0" max="39" />
            </div><span></span>
          </div>
          <div class ="basic-div basic-one"><label class="desc-label">If the enable pin is 0, then it will be enabled all the time.</label></div>
          <div class="basic-div basic-one"><label class="desc-label"></label></div>
          <div class="basic-div basic-one"><label class="desc-label">Please inform the caracteristcs of the NTC used
              below:</label></div>
          <div class="basic-div basic-three">
            <div class="basic-div basic-two">
              <label class="item-label">Thermopar Resistance:</label>
              <input id="NTC_BASE_RESISTANCE" type="number" min=0 onchange="handleSettingsChanges(this,'sensor')" />
            </div>
            <label class="item-label">k&#x3A9;</label>
          </div>

          <div class="basic-div basic-three">
            <div class="basic-div basic-two">
              <label class="item-label">Thermopar Beta Coeff:</label>
              <input id="NTC_BETA" type="number" min=0 onchange="handleSettingsChanges(this,'sensor')" />
            </div>
            <label class="item-label"></label>
          </div>

          <div class="basic-div basic-three">
            <div class="basic-div basic-two"><label class="item-label">Thermopar Nominal Temp: </label>
              <input id="NTC_BASE_TEMP" type="number" min=0 onchange="handleSettingsChanges(this,'sensor')" />
            </div>
            <label class="item-label">&deg;C</label>
          </div>
          <div class="basic-div basic-one"><label class="desc-label">If you want even more precion on the readings of a
              NTC,
              you can make a ADC calibration of the specific microcontroller.</label></div>
          <div class="basic-div basic-two"><label class="item-label">Use Correction polynome for ADC values:</label>
            <label class="switch"><input type="checkbox" name="Cache" id="ADC_REQ_CORRECT"
                onchange="handleSettingsChanges(this,'sensor','slider');enable('ADC_CORRECTION',this.checked)"><span
                class="slider round"></label>
            </span>
          </div>
          <div class="basic-div basic-two"><label class="item-label">Correction polynome:</label><input
              class="dropdownBox" id="ADC_CORRECTION" onchange="handleSettingsChanges(this,'sensor')"></input></div>
          <div class="basic-div basic-one"><label class="desc-label">Usege: 'coeff' <label
                style="font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif; font-size: 14;">x</label>
              'expoent'+... Example:<br></label>
          </div>
          <div class="basic-div basic-one"><label class="desc-label"
              style="font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;">2x0+3x4+1.65E-9x5+0.354E8x6</label>
          </div>
        </div>
        <div id="ds18-div">
          <div class="basic-div basic-three">
            <div class="basic-div basic-two"><label class="item-label">OneWire Pin:</label> <input id="ONEWIRE_BUS"
                type="number" onchange="handleSettingsChanges(this,'sensor')" /></div><span></span>
          </div>
          <div class="basic-div basic-three">
            <div class="basic-div basic-two"><label class="item-label">Resolution:</label> <input
                id="TEMPERATURE_RESOLUTION" type="number" min=9 max=12 step="1"
                onchange="handleSettingsChanges(this,'sensor')" value="9" /></div>
            <label class="item-label">bits</label>
          </div>
          <div class="basic-div basic-one"><label class="desc-label" style="text-align: justify;">The resolution of the
              sensor changes how much time it
              takes to calculate a temperature and how little the temperature increments are. Do note that, in the
              <label style="font-family:Verdana, Geneva, Tahoma, sans-serif; font-size: 14px;">DS18B20</label> sensor
              family,
              altought the
              reported temperature can have up to <label
                style="font-family:Verdana, Geneva, Tahoma, sans-serif; font-size: 14px;">0.0625&deg;C</label> of
              increments, the <a href="https://datasheets.maximintegrated.com/en/ds/DS18B20.pdf" target="_blank"
                rel="noopener noreferrer">datasheet</a> informs that it is a product of an avarage and the precision is
              around <label style="font-family:Verdana, Geneva, Tahoma, sans-serif; font-size: 14px;">0.5&deg;C</label>
              across the measuring spectrum.</label></div>
        </div>
        <div class="basic-div basic-three">
          <div class="basic-div basic-two"><label class="item-label">Tolerance:</label> <input id="tolerance"
              type="number" class="input-pin" value="0" onchange="handleSettingsChanges(this,'sensor')" /></div>
          <label class="item-label">&deg;C</label>
        </div>
        <div class="basic-div basic-one"><label class="desc-label">The Relay will be switched on or off on the set
            temperature plus
            or less the tolerance.</label></div>

        <!-- Calibrations -->

        <div id="nocal_div">
          <div class="basic-div basic-one">
            <button class="button2" onclick="togglediv('cal_div',true)">Calibrate</button>
          </div>
          <div class="basic-div basic-one"><label class="desc-label">Manually Calibrate Sensor</label></div>
        </div>

        <div id="cal_div" style="display: none;">
          <div class="basic-div basic-one"><label class="item-label">Value on Sensor:</label></div>
          <div style="display:flex; margin:auto; justify-content: center;">
            <div id="cal_raw_sensor"></div>
            <div id="cal_sensor"></div>
          </div>


          <div class="basic-div basic-three">
            <div class="basic-div basic-two"><label class="item-label">Calibration:</label> <input id="calibration"
                type="number" class="input-pin" value="0" onchange="handleSettingsChanges(this,'sensor')"/></div>
            <label class="item-label">&deg;C</label>
          </div>

          <div class="basic-div basic-one">
            <button onclick="togglediv('cal_div',false);validateCalibration();" class="button2">Validate</button>
          </div>
        </div>
      </div>


      <div>
        <button class="savebutton" onclick="saveconfig()">Save</button>
        <div class="basic-div basic-one"><label class="desc-label">Remember to save before leaving</label></div>
        <div class="basic-div basic-two">
          <label class="item-label">Restart after Saving</label>
          <label class="switch"><input type="checkbox" id="restartaftersave"><span class="slider round"></label>
          </span>
        </div>
        <div class="basic-div basic-one"><label class="desc-label">Some settings may need a restart to work.</label>
        </div>
        <button class="savebutton" onclick="window.location='/'">Back</button>
      </div>

    </div>

    <div>
      <!-- General Settings -->
      <div class="box-div">
        <div class="box-Title">
          <label>General</label>
        </div>
        <div class="basic-div basic-two"><label class="item-label">Host name:</label><input id="host_name"
            onchange="handleSettingsChanges(this,'general')" /></div>
        <div class="basic-div basic-three">
          <div class="basic-div basic-two"><label class="item-label">Relay Pin:</label> <input id="RELAY_PIN"
              type="number" onchange="handleSettingsChanges(this,'general')" min=0 max=39 step="1" /></div><span></span>
        </div>
        <div class="basic-div basic-two"><label class="item-label">Enable Cache</label>
          <label class="switch"><input type="checkbox" id="enableCache"
              onchange="handleSettingsChanges(this,'general','slider')"><span class="slider round"></label>
          </span>
        </div>
        <div class="basic-div basic-one"><label class="desc-label">Enable Cache of Files, trading RAM for
            prefomance.</label>
        </div>
        <div class="basic-div basic-two"><label class="item-label">Continuos Log:</label>
          <label class="switch"><input type="checkbox" id="continousLog"
              onchange="handleSettingsChanges(this,'general','slider')"><span class="slider round"></label>
          </span>
        </div>
        <div class="basic-div basic-one"><label class="desc-label">Logs the temperature continously on a file even while
            idle.</label></div>

        <div class="basic-div basic-three">
          <div class="basic-div basic-two"><label class="item-label">Sample Rate:</label><input class="basic-number"
              type="number" step="1" min="0" id="sample_freq" onchange="handleSettingsChanges(this,'general')" /></div>
          <label class="item-label">Secs.</label>
        </div>
        <div class="basic-div basic-one"><label class="desc-label">how long between each input on the csv file.<br>Also
            this
            will be the time between each update in the web interface.</label></div>
        <div id="nonewpassdiv" style="display: block;">
          <div class="basic-div basic-one"><button class="button2" onclick="togglediv('change_password',true)">Change
              Password</button></div>
          <div class="basic-div basic-one"><label class="desc-label">Click here to change the Credentials.</label></div>
        </div>
        <div id="newpassdiv" style="display: none;">
          <div class="basic-div basic-two"><label class="item-label">Old Password:</label><input id="oldpassword"
              class="input-wifi" type="password" /></div>
          <div class="basic-div basic-two"><label class="item-label">New Password:</label><input id="newpassword"
              class="input-wifi" type="password" /></div>
          <div class="basic-div basic-two"><label class="item-label">Confirm:</label><input id="confirmpassword"
              class="input-wifi" type="password" /></div>
          <div class="basic-div basic-one"><button class="button2" onclick="send()">Save</button></div>
        </div>

      </div>

      <!--  Upload Settings -->
      <div class="box-div">
        <div class="box-title">
          <label>Auto Upload Results</label>
        </div>
        <div class="basic-div basic-two"><label class="item-label">Enable Auto Upload</label>
          <label class="switch"><input type="checkbox" id="auto_upload"
              onclick="handleSettingsChanges(this,'upload','slider')"><span class="slider round"></label>
          </span>
        </div>
        <div class="basic-div basic-one"><label class="desc-label">This enables the upload of continuos log after an
            amount
            of time.</label></div>

        <div class="basic-div basic-three">
          <div class="basic-div basic-two"><label class="item-label">Upload Monitor Log every: </label><input
              id="auto_upload_freq" class="input-wifi" type="number" onclick="handleSettingsChanges(this,'upload')" />
          </div><label class="item-label">Days.</label>
        </div>
        <div class="basic-div basic-two"><label class="item-label">Enable Upload Results:</label>
          <label class="switch"><input type="checkbox" name="Cache" id="enable_upload"
              onchange="handleSettingsChanges(this,'upload','slider')"><span class="slider round"></label>
          </span>
        </div>
        <div class="basic-div basic-one"><label class="desc-label">Enables the automatic upload of the result csv file
            after
            every ramp.</label></div>

        <div class="basic-div basic-two"><label class="item-label">Service:</label><select name="WifiSSID"
            class="dropdownBox" id="UploadServiceType"
            onchange="togglediv('upload_service',this.value);handleSettingsChanges(this,'upload')">
            <option value="0">Gmail</option>
            <option value="1">Google Drive</option>
            <option value="2">IFTTT</option>

          </select></div>
        <div class="basic-div basic-two" id="UploadLoginDiv"><label class="item-label"
            id="UploadLoginLabel">Login:</label><input id='UploadLogin'
            onclick="handleSettingsChanges(this,'upload')"></input></div>
        <div class="basic-div basic-two" id="UploadPasswordDiv"><label class="item-label" id="UploadPasswordLabel"
            onclick="handleSettingsChanges(this,'upload')">Password:</label><input id='UploadPassword'
            type="password" /></div>

      </div>
    </div>



  </div>



</body>

</html>)==="
//##$$
        ;
}
String getPage15()
{
    return
        //##$$Settings.js

R"===(RequestData('/loadconfig');
RequestData('/systeminfo?complete=true');
RequestData('/reqwifisearch', 10000);
var ReqInfo = setInterval(() => { RequestData('/systeminfo') }, 1500);
var CalTimer;//Placeholder for the setInterval below;
var ESP_Connected = true;
var failedRequests = 0;
var wifiAPs = []

var wf = "wifiAP:VIVO-E2D8=-32,MCarvalho=-38,VIVOFIBRA-1AA8=-55,Quarto 02=-80,LIVE TIM_9A28_2G=-81,LIVE TIM_3014_2G=-83,R&E=-90,Sala=-92,VIVOFIBRA-9951=-92,Corredor - Geral (VISITANTE)=-92,Corredor - Geral=-93,VIVOFIBRA-28C0=-94,;";
const sysinfo = new InfoCreator();
const config = new Settings();

const maxCheck = {
    tolerance: 0,
    // Will mantain temperature within this tolerance.
    calibration: 0,
    //Resolution of DS18b20 Sensor 
    TEMPERATURE_RESOLUTION: [9, 12],
    sample_freq: [1, 65535],

    RELAY_PIN: [1, 39],
    ONEWIRE_BUS: [1, 39],

    NTC_BASE_RESISTANCE: [1, 4294967295],
    NTC_BASE_TEMP: [-127, 127],
    NTC_READ_PIN: [1, 39],
    NTC_ENABLE_PIN: [-1, 39],
    NTC_BETA: [1, 65535],

    backup_freq: [0, 4294967295],
    auto_upload_freq: [0, 4294967295]
}

var test = "config:tolerance=0.50,calibration=0.00,TEMPERATURE_RESOLUTION=9,sample_freq=1,WIFI_SSID=MCarvalho,www_username=admin,WIFI_AP_SSID=ESP32,use_static_ip=0,static_ip=,enable_upload=0,UploadServiceType=0,UploadLogin=,enableCache=1,continousLog=1,enable_backup=0,backup_freq=0,lastbackup=0,RELAY_PIN=13,ONEWIRE_BUS=16,host_name=Estufa,WIFI_AP_PASSWORD=ESP32ESP32,;";

function InfoCreator() {
    this.ram = 0;
    this.ramMax = 0;
    this.SD = 0;
    this.SDMax = 0;
    this.internalTemp = 0;
    this.SPIFFS = 0;
    this.SPIFFSMax = 0;
    this.bootTime = -1;
    this.load = function (params) {
        var value = "";
        var variable = "";
        var nextChar;
        var isValue = false;

        for (var i = 0; i < params.length; i++) {
            nextChar = params[i];
            if (!isValue) {
                if (nextChar != '=')
                    variable += nextChar;
                else
                    isValue = true;
            }
            else {
                if (nextChar != ',')
                    value += nextChar;
                else {
                    if (variable == "SD")
                        this.SD = parseInt(value);
                    else if (variable == "SDMax")
                        this.SDMax = parseInt(value);
                    else if (variable == "ram")
                        this.ram = parseInt(value);
                    else if (variable == "ramMax")
                        this.ramMax = parseInt(value);
                    else if (variable == "SPIFFS")
                        this.SPIFFS = parseInt(value);
                    else if (variable == "SPIFFSMax")
                        this.SPIFFSMax = parseInt(value);
                    else if (variable == "internalTemp")
                        this.internalTemp = parseFloat(value);
                    else if (variable == "bootTime")
                        this.bootTime = parseInt(value);

                    value = "";
                    variable = "";
                    isValue = false;
                }
            }
        }
        this.update();
    };
    this.update = function () {
        setnew('internalTemp', this.internalTemp);

        if (ram >= 85)
            setnew('ram', this.ram, this.ram, 'darkred', 'darkred');
        else
            setnew('ram', this.ram, this.ram, 'darkblue', 'darkblue');

        if (ram >= 85)
            setnew('sdcard', this.SD, this.SD, 'darkred', 'darkred');
        else
            setnew('sdcard', this.SD, this.SD, 'darkgreen', 'darkgreen');

        if (ram >= 85)
            setnew('SPIFFS', this.SPIFFS, this.SPIFFS, 'darkred', 'darkred');
        else
            setnew('SPIFFS', this.SPIFFS, this.SPIFFS, 'darkgreen', 'darkgreen');


    };
}

function Settings() {
    this.tolerance = 0;
    // Will mantain temperature within this tolerance.
    this.calibration = 0;
    //Resolution of DS18b20 Sensor 
    this.TEMPERATURE_RESOLUTION = 9;

    //Web Site Credentials
    this.www_username = "";

    //Wifi Credentials
    this.WIFI_SSID = "";
    this.WIFI_PASSWORD = "";
    this.WIFI_AP_SSID = "";
    this.WIFI_AP_PASSWORD = "";
    this.use_static_ip = false;
    this.static_ip = "";

    /*
    * Available Services: Gmail = 0
    *                    Google Drive = 1
    */
    this.enable_upload = false;
    this.UploadServiceType = 0;
    this.UploadLogin = "";
    this.UploadPassword = "";
    this.auto_upload = false;
    this.auto_upload_freq = 0;

    //Sample rate for logging
    this.sample_freq = 0;

    //Config of Pins
    this.RELAY_PIN = 0;
    this.ONEWIRE_BUS = 0;


    /*
        0 = DS1820
        1 = DS1820 High Temp
        2 = NTC thermopar
    */
    this.temp_sensor_type = 0;

    this.NTC_BASE_RESISTANCE = 0;
    this.NTC_BASE_TEMP = 0;
    this.NTC_READ_PIN = 0;
    this.NTC_ENABLE_PIN = 0;
    this.NTC_BETA = 0;
    this.ADC_REQ_CORRECT = false;
    this.ADC_CORRECTION = "";


    //Enables Cacheing; 
    this.enableCache = true;
    this.continousLog = true;

    //Backup Options 
    this.enable_backup = false;
    this.backup_freq = 0;
    this.lastbackup = 0;

    this.host_name = "";

    this.load = function (newConfig) {

        var value = "";
        var variable = "";
        var nextChar;
        var isValue = false;
        for (var i = 0; i < newConfig.length; i++) {
            nextChar = newConfig[i];
            if (!isValue) {
                if (nextChar != '=')
                    variable += nextChar;
                else
                    isValue = true;
            }
            else {
                if (nextChar != ',')
                    value += nextChar;
                else {
                    if (variable == "tolerance")
                        this.tolerance = parseFloat(value);
                    else if (variable == "calibration")
                        this.calibration = parseFloat(value);
                    else if (variable == "WIFI_SSID")
                        this.WIFI_SSID = value;
                    else if (variable == "WIFI_PASSWORD")
                        this.WIFI_PASSWORD = value;
                    else if (variable == "WIFI_AP_SSID")
                        this.WIFI_AP_SSID = value;
                    else if (variable == "WIFI_AP_PASSWORD")
                        this.WIFI_AP_PASSWORD = value;
                    else if (variable == "www_username")
                        this.www_username = value;
                    else if (variable == "TEMPERATURE_RESOLUTION")
                        this.TEMPERATURE_RESOLUTION = parseInt(value);
                    else if (variable == "sample_freq")
                        this.sample_freq = parseInt(value);
                    else if (variable == "use_static_ip ")
                        this.use_static_ip = value == "1" ? true : false;
                    else if (variable == "static_ip")
                        this.static_ip = value;
                    else if (variable == "enableCache")
                        this.enableCache = value == "1" ? true : false;
                    else if (variable == "continousLog")
                        this.continousLog = value == "1" ? true : false;
                    else if (variable == "enable_backup")
                        this.enable_backup = value == "1" ? true : false;
                    else if (variable == "backup_freq")
                        this.backup_freq = parseInt(value);
                    else if (variable == "lastbackup")
                        this.lastbackup = parseInt(value);
                    else if (variable == "host_name")
                        this.host_name = value;
                    else if (variable == "RELAY_PIN")
                        this.RELAY_PIN = parseInt(value);
                    else if (variable == "ONEWIRE_BUS")
                        this.ONEWIRE_BUS = parseInt(value);
                    else if (variable == "UploadServiceType")
                        this.UploadServiceType = parseInt(value);
                    else if (variable == "enable_upload")
                        this.enable_upload = value == "1" ? true : false;
                    else if (variable == "UploadLogin")
                        this.UploadLogin = value;
                    else if (variable == "UploadPassword")
                        this.UploadPassword = value;
                    else if (variable == "temp_sensor_type")
                        this.temp_sensor_type = parseInt(value);
                    else if (variable == "NTC_BASE_RESISTANCE")
                        this.NTC_BASE_RESISTANCE = parseInt(value) / 1000;
                    else if (variable == "NTC_BASE_TEMP")
                        this.NTC_BASE_TEMP = parseInt(value);
                    else if (variable == "NTC_READ_PIN")
                        this.NTC_READ_PIN = parseInt(value);
                    else if (variable == "NTC_ENABLE_PIN")
                        this.NTC_ENABLE_PIN = parseInt(value);
                    else if (variable == "NTC_BETA")
                        this.NTC_BETA = parseInt(value);
                    else if (variable == "auto_upload")
                        this.auto_upload = value == "1" ? true : false;
                    else if (variable == "auto_upload_freq")
                        this.auto_upload_freq = parseInt(value);
                    else if (variable == "ADC_REQ_CORRECT")
                        this.ADC_REQ_CORRECT = value == "1" ? true : false;
                    else if (variable == "ADC_CORRECTION")
                        this.ADC_CORRECTION = value;

                    value = "";
                    variable = "";
                    isValue = false;
                }
            }
        }
    };

    this.send = function (complete) {

        var message = "";
        message += "tolerance=";
        message += this.tolerance;
        message += ",calibration=";
        message += this.calibration;
        message += ",TEMPERATURE_RESOLUTION=";
        message += this.TEMPERATURE_RESOLUTION;
        message += ",sample_freq=";
        message += this.sample_freq;
        message += ",WIFI_SSID=";
        message += this.WIFI_SSID;
        if (complete) {
            message += ",WIFI_PASSWORD=";
            message += this.WIFI_PASSWORD;
        }
        message += ",www_username=";
        message += this.www_username;
        message += ",WIFI_AP_SSID=";
        message += this.WIFI_AP_SSID;
        message += ",WIFI_AP_PASSWORD=";
        message += this.WIFI_AP_PASSWORD;
        message += ",use_static_ip=";
        message += this.use_static_ip;
        message += ",static_ip=";
        message += this.static_ip;
        message += ",enable_upload=";
        message += this.enable_upload;
        message += ",UploadServiceType=";
        message += this.UploadServiceType;
        message += ",UploadLogin=";
        message += this.UploadLogin;
        if (complete) {
            message += ",UploadPassword=";
            message += this.UploadPassword;
        }
        message += ",enableCache=";
        message += this.enableCache;
        message += ",continousLog=";
        message += this.continousLog;
        message += ",enable_backup=";
        message += this.enable_backup;
        message += ",backup_freq=";
        message += this.backup_freq;
        message += ",lastbackup=";
        message += this.lastbackup;
        message += ",RELAY_PIN=";
        message += this.RELAY_PIN;
        message += ",ONEWIRE_BUS=";
        message += this.ONEWIRE_BUS;
        message += ",host_name=";
        message += this.host_name;
        message += ",temp_sensor_type=";
        message += this.temp_sensor_type;
        message += ",NTC_BASE_RESISTANCE=";
        message += this.NTC_BASE_RESISTANCE;
        message += ",NTC_BASE_TEMP=";
        message += this.NTC_BASE_TEMP;
        message += ",NTC_READ_PIN=";
        message += this.NTC_READ_PIN;
        message += ",NTC_ENABLE_PIN=";
        message += this.NTC_ENABLE_PIN;
        message += ",NTC_BETA=";
        message += this.NTC_BETA;
        message += ",auto_upload=";
        message += this.auto_upload;
        message += ",auto_upload_freq=";
        message += this.auto_upload_freq;
        message += ",ADC_REQ_CORRECT=";
        message += this.ADC_REQ_CORRECT;
        message += ",ADC_CORRECTION=";
        message += this.ADC_CORRECTION;


        message += ",;";

        return message;
    };
}

function RequestData(whichdata, timeout) {
    if (typeof whichdata !== 'string') {
        httpGetAsync("requpdate", ParseNewData, timeout);
    }
    else
        httpGetAsync(whichdata, ParseNewData, timeout);
}

function ParseNewData(incomeString) {
    try {

        for (var i = 0; i < incomeString.split(';').length; i++) {
            var _args = incomeString.split(';')[i].split(':');
            if (_args[0] == 'config') {
                config.load(_args[1]);
                draw('all');
            }
            if (_args[0] == 'sysinfo') {
                sysinfo.load(_args[1]);

            }
            if (_args[0] == 'wifiAP') {
                var aps = _args[1].split(',');
                wifiAPs = [];
                for (var i = 0; i < aps.length - 1; i++) {
                    if (aps[i] !== '') {
                        wifiAPs.push (aps[i].split('='));
                    }
                }
                GenWifis();
            }
            if (_args[0] == 'cal_temp') {
                if (!isNaN((parseFloat(_args[1]))))
                    setnew('raw_temp', _args[1]);
                if (!isNaN((parseFloat(_args[2]))))
                    setnew('cal_temp', _args[2]);
            }
            if (_args[0] == 'error') {
                alert(_args[1]);
            }
            if (_args[0] == 'connect_result') {
                enable(config.WIFI_SSID, true);
                enable(config.WIFI_PASSWORD, true);
                enable('wifi_custom_ssid', true);
                alert(_args[1]);
            }

        }


    }


    catch (err) {
        console.log(err);
    }
}


function SetCalTimer(turnon) {

    if (turnon)
        CalTimer = setInterval(() => { RequestData('/newcaltest?cal=' + config.calibration) }, 500);
    else
        clearInterval(CalTimer);
}

function httpGetAsync(theUrl, callback, timeout) {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function () {
        if (xmlHttp.readyState == 4) {
            if (xmlHttp.status == 200) {
                callback(xmlHttp.responseText);
                if (!ESP_Connected) {
                    ESP_Connected = true;
                    changeESPConnected(ESP_Connected);
                }
                failedRequests = 0;
            }
            else {
                if (ESP_Connected) {
                    failedRequests++;
                    if (failedRequests >= 3) {
                        ESP_Connected = false;
                        changeESPConnected(ESP_Connected);
                    }
                }
            }
        }

    }
    xmlHttp.open("GET", theUrl, true); // true for asynchronous
    xmlHttp.timeout = 1000;
    if (typeof (timeout) === 'number')
        xmlHttp.timeout = timeout
    try {
        xmlHttp.send();

    } catch (error) {
        console.log(error);
    }

}

window.onload = function () {
    generateCircle('circle_1', 'RAM:', 0, 'ram', '#d4ebd3', 'darkblue', 'darkblue', '%');
    generateCircle('circle_2', 'TEMP:', 0, 'internalTemp', '#d4ebd3', 'darkred', 'darkred', '&deg;C', 'map 20 80 0 100');
    generateCircle('circle_3', 'SD:', 0, 'sdcard', '#d4ebd3', 'darkgreen', 'darkgreen', '%');
    generateCircle('circle_4', 'SPIFFS:', 0, 'SPIFFS', '#d4ebd3', 'darkgreen', 'darkgreen', '%');
    generateCircle('cal_raw_sensor', 'Raw:', 0, 'raw_temp', '#d4ebd3', 'red', 'red', '&deg;C', 'map 20 80 0 100');
    generateCircle('cal_sensor', 'Calib:', 0, 'cal_temp', '#d4ebd3', 'darkred', 'darkred', '&deg;C', 'map 20 80 0 100');
    setLabelSize('cal_temp', '45px');
    setLabelSize('raw_temp', '45px');
    setnewangle('raw_temp', 120);
    setnewangle('cal_temp', 120);
    setnewangle('ram', 120);
    setnewangle('internalTemp', 120);
    setnewangle('sdcard', 120);
    setnewangle('SPIFFS', 120);
    draw('all');


}

function goodbye(e) {
    if(!e) e = window.event;
    //e.cancelBubble is supported by IE - this will kill the bubbling process.
    e.cancelBubble = true;
    e.returnValue = 'You sure you want to leave?'; //This is displayed on the dialog

    //e.stopPropagation works in Firefox.
    if (e.stopPropagation) {
        e.stopPropagation();
        e.preventDefault();
    }
}

function changeESPConnected(isESPConnected) {
    if (typeof (isESPConnected) === 'undefined')
        return;

    if (isESPConnected)//do Online stuff
    {


        ESP_Connected = true;
    }
    else//do Offline stuff 
    {
        ESP_Connected = false;

    }

}

function animatereconect(size) {

    if (!ESP_Connected)
        setTimeout(() => { animatereconect(size) }, 500);
}

function enable(id, value) {
    if (value)
        $(id).removeAttribute("disabled");
    else
        $(id).setAttribute("disabled", "disabled");

}

function showCalibrationDiv(show) {
    if (show) //Show Calibration Div
    {
        document.getElementById("cal_div").style.display = "block";
    }
    else //Hide Calibration Div
    {
        document.getElementById("cal_div").style.display = "none";

    }
}

function inRange(id, value) {
    if (typeof (value) !== 'number' || typeof (maxCheck[id]) === 'undefined')
        return true;

    if (value > maxCheck[id][1] || value < maxCheck[id][0])
        return false;

    return true;

}

function handleSettingsChanges(sender, area, type) {
    if (typeof (type) === 'undefined')
        type = 'common';
    var variable = "";
    variable += sender.id;
    var value = parseFloat(sender.value);

    console.log(sender.id, value, maxCheck[sender.id], inRange(sender.id, value))

    if (!inRange(sender.id, value)) {
        var oldclass = $(sender.id).className;
        $(sender.id).className = oldclass + " redbk";
        setTimeout(() => {
            $(sender.id).className = oldclass;
        }, 4500)

        alert('!Wrong Value!\nThe value of: ' + sender.id + '\nshould be between: ' + maxCheck[sender.id][0] + ' and ' + maxCheck[sender.id][1] + '.');
        sender.value = config[sender.id];
        return;
    }
    if (type == 'common') {
        config[variable] = sender.value;
        return;
    }
    if (type == 'suppressdraw') {
        config[variable] = sender.value;
        return;
    }



    if (type === 'slider') {
        config[variable] = sender.checked;
        return;
    }
}


function draw(params) {

    if (params == 'all') {
        draw('wifi');
        draw('general');
        draw('files');
        draw('backup');
        draw('sensors');
        draw('upload');
    }
    if (params == 'wifi') {
        $('wifi_custom_ssid').value = config.WIFI_SSID;//custom ssid
        $('WIFI_PASSWORD').value = config.WIFI_PASSWORD;
        $('WIFI_AP_SSID').value = config.WIFI_AP_SSID;
        $('WIFI_AP_PASSWORD').value = config.WIFI_AP_PASSWORD;
        $('ip_address').value = config.static_ip;
        $('use_static_ip').checked = config.use_static_ip;

        enable('ip_address', config.use_static_ip);
        togglediv('wifi_ssid', $('wifi_custom_ssid').checked);

    }

    if (params == 'general') {
        $('host_name').value = config.host_name;
        $('sample_freq').value = config.sample_freq;
        $('enableCache').checked = config.enableCache;
        $('continousLog').checked = config.continousLog;
        $('RELAY_PIN').value = config.RELAY_PIN;

    }
    if (params == 'backup') {
        $('enable_backup').checked = config.enable_backup;
        $('backup_freq').value = config.backup_freq;
        if (config.lastbackup > 0)
            $('lastbackup').innerText = new Date(config.lastbackup * 1000).toDateString();
        else
            $('lastbackup').innerText = 'Never';

        enable('backup_freq', config.enable_backup);
    }
    if (params == 'upload') {
        $('enable_upload').checked = config.enable_upload;
        $('auto_upload').checked = config.auto_upload;
        $('auto_upload_freq').value = config.auto_upload_freq;
        $('UploadServiceType').value = config.UploadServiceType;
        $('UploadLogin').value = config.UploadLogin;
        $('UploadPassword').value = config.UploadPassword;
        togglediv('upload_service', config.UploadServiceType);
    }
    if (params == 'sensors') {
        $('NTC_READ_PIN').value = config.NTC_READ_PIN;
        $('NTC_ENABLE_PIN').value = config.NTC_ENABLE_PIN;
        $('NTC_BASE_RESISTANCE').value = config.NTC_BASE_RESISTANCE;
        $('NTC_BASE_TEMP').value = config.NTC_BASE_TEMP;
        $('NTC_BETA').value = config.NTC_BETA;
        $('ONEWIRE_BUS').value = config.ONEWIRE_BUS;
        $('ADC_REQ_CORRECT').checked = config.ADC_REQ_CORRECT;
        $('ADC_CORRECTION').value = config.ADC_CORRECTION;
        $('ONEWIRE_BUS').value = config.ONEWIRE_BUS;
        $('TEMPERATURE_RESOLUTION').value = config.TEMPERATURE_RESOLUTION;
        $('calibration').value = config.calibration;
        $('tolerance').value = config.tolerance;
        $('temp_sensor_type').value = config.temp_sensor_type;
        enable('ADC_CORRECTION',config.ADC_REQ_CORRECT);
        togglediv('temp_sensor', config.temp_sensor_type)
    }
}

function togglediv(which, value) {
    if (which === 'wifi_ssid') {
        if (value) {
            $('wifi_ssid_list_div').style.display = 'none';
            $('wifi_custom_ssid_div').style.display = 'flex'
        }
        else {
            $('wifi_ssid_list_div').style.display = 'flex';
            $('wifi_custom_ssid_div').style.display = 'none'
        }
    }
    if (which === 'change_password') {
        if (value) {
            $('nonewpassdiv').style.display = 'none';
            $('newpassdiv').style.display = 'block';
            $('confirmpassword').value = "";
            $('newpassword').value = "";
            $('oldpassword').value = "";
        }
        else {
            $('nonewpassdiv').style.display = 'block';
            $('newpassdiv').style.display = 'none';
        }
    }
    if (which === 'temp_sensor') {
        if (value == 1 || value == 2) {
            $('ds18-div').style.display = 'none';
            $('ntc-div').style.display = 'block';

        }
        else {
            $('ds18-div').style.display = 'block';
            $('ntc-div').style.display = 'none';
        }
    }
    if (which === 'cal_div') {
        if (value) {
            $('nocal_div').style.display = 'none';
            $('cal_div').style.display = 'block';
            SetCalTimer(true);
        }
        else {
            $('nocal_div').style.display = 'block';
            $('cal_div').style.display = 'none';
        }
    }
    if (which === 'upload_service') {
        if (value == 0) //Gmail
        {
            $('UploadLoginDiv').style.display = 'flex';
            $('UploadPasswordDiv').style.display = 'none';
            $('UploadLoginLabel').innerText = 'Your Email:';

        }
        else if (value == 1)//Google Drive
        {
            $('UploadLoginDiv').style.display = 'flex';
            $('UploadPasswordDiv').style.display = 'none';
            $('UploadLoginLabel').innerText = 'Script ID:';
        }
        else if (value == 2)//IFTTT
        {
            $('UploadLoginDiv').style.display = 'flex';
            $('UploadPasswordDiv').style.display = 'none';
            $('UploadLoginLabel').innerText = 'Applet Key:';
        }
    }
}
function wifi_connect() {

}

function $(name) {
    return document.getElementById(name);
}

function changePassword() {
    //not safe probably.
    if ($('confirmpassword').value !== $('newpassword').value) {
        alert('Passwords don\'t match.');
        return;
    }
    var req = '/newpass?n=' + $('newpassword').value + '&o=' + $('oldpassword').value;
    RequestData(req);
}

function Connect() {
    var url = '/connect?ssid=' + config.WIFI_SSID + '&pass=' + config.WIFI_PASSWORD;
    enable('wifi_dropdownBox', false);
    enable('WIFI_PASSWORD', false);
    enable('wifi_custom_ssid', false);

    alert('Trying to connect to: ' + config.WIFI_SSID +' ,this can take a few seconds.')
    RequestData(url);

}

function saveconfig() {
    var url = '/newconfig?'
    url+='restart=' + $('restartaftersave').checked + '&';
    url += 'config=';
    url += config.send();
    RequestData(url);

}

function GenWifis() {
    innerhtml = '';

   for (let index = 0; index < wifiAPs.length; index++) 
   {
       const WifiAp = wifiAPs[index]; 
        innerhtml += '<option value = "'+WifiAp[0]+'">'+ wifistr(WifiAp[1]) + '  ' + WifiAp[0]+'</option>\n'     
   }


    $('wifi_dropdownBox').innerHTML = innerhtml;
    $('wifi_dropdownBox').value = config.WIFI_SSID;
}

function wifistr(rssi) {
    str  =parseRSSI(rssi);
    var s = '';
    var good = '\u25CF'
    var bad = '\u25CB'
    for (var i = 0; i < 3 ;i++)
    {
        if (i<str)
        s = s + good;
        else
        s = s+bad;
    }

    return s;
    
}
function parseRSSI(rssi) {
    if ( rssi > -45)
    return 3 ///good  > -45
    else if (rssi > -70 )
    return 2 ///medium -70 to -45
    else if (rssi > -85 )
    return 1 ///poor -85 to -70

    return 0 ///very poor < -85
}


function validateCalibration() {
    var req = '/newconfig?config=calibration=';
    req += config.calibration;
    req+= ',';
    RequestData(req,5000);
    SetCalTimer(false);
}
/*
/newpass n,o
/connect ---- connect_result
/stop
/start
/newconfig restart






*/)==="
//##$$
        ;
}
String getPage16()
{
    return
        //##$$test.html

R"===(<head>
    <script>
  function FileUpload(file) {
  const reader = new FileReader();
  const xhr = new XMLHttpRequest();
  this.xhr = xhr;

  const self = this;
  this.xhr.upload.addEventListener("progress", function(e) {
        if (e.lengthComputable) {
          const percentage = Math.round((e.loaded * 100) / e.total);
          console.log(percentage);
        }
      }, false);

  xhr.upload.addEventListener("load", function(e){

      }, false);
  xhr.open("POST", "/dodo");
  xhr.overrideMimeType('text/plain; charset=x-user-defined-binary');
  reader.onload = function(evt) {
    xhr.send(evt.target.result);
  };
  reader.readAsBinaryString(file);
}
    </script>
    </head>


<form action="/dodo" method="POST" enctype="multipart/form-data">
    <input name="fupdate" id="fone" type="file" />
    <button type="submit" > go </button>
</form>)==="
//##$$
        ;
}
String getPage17()
{
    return
        //##$$Updating.html

R"===(<html>

<head>
    <link href="Common.css" rel="stylesheet" type="text/css">
    <link rel="apple-touch-icon" sizes="57x57" href="/Favicons/index/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/Favicons/index/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/Favicons/index/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/Favicons/index/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/Favicons/index/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/Favicons/index/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/Favicons/index/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/Favicons/index/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/Favicons/index/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="/Favicons/index/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/Favicons/index/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="/Favicons/index/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/Favicons/index/favicon-16x16.png">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="/Favicons/index/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">
     <script type="text/javascript" src="Circles.js"></script>
     <link href="Circles.css" rel="stylesheet" type="text/css">
    

    <script>
        var updates = setInterval(()=>{RequestData("/reqespupdate")}, 1000);
 
        window.onload = function () {
            generateCircle('circle_1', 'Updating:', 0, 'Update', '#d4ebd3', '#00941e', '#24458c', '%');
            generateCircle('circle_reset', 'Restarting in: ', 60, 'Reset', '#d4ebd3', '#00941e', '#00941e', 's', 'map 0 60 1 99');
        }

        function RequestData(whichdata) {
            if (typeof whichdata !== 'string') {
                httpGetAsync("requpdate", ParseNewData);
            }
            else
                httpGetAsync(whichdata, ParseNewData);
        }
        function ParseNewData(incomeString) {
            try {

                for (var i = 0; i < incomeString.split(';').length; i++) {
                    var _args = incomeString.split(';')[i].split(':');
                    if (_args[0] == 'update_progress') {
                        setnew('Update', parseInt(_args[1]));
                    }
                    else if (_args[0] == 'error') 
                    {
                        alert(_args[1]);
                        countdown(15);
                        clearInterval(updates);
                        
                    }
                    
                }

            }


            catch (err) {
                console.log(err);
            }
        }
        function httpGetAsync(theUrl, callback) {
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.onreadystatechange = function () {
                if (xmlHttp.readyState == 4) {
                    if (xmlHttp.status == 200) {
                        callback(xmlHttp.responseText);
                    }
                    else
                    {
                        clearInterval(updates);
                        setnew("Reset",15);
                        alert("OTA Finished");
                        countdown(15);
                        
                    }
                }

            }
            xmlHttp.open("GET", theUrl, true); // true for asynchronous
            xmlHttp.timeout = 1000;
            try {
                xmlHttp.send();

            } catch (error) {
                console.log(error);
            }

        }
        function go(where) {
            window.location.assign("/" + where);
        }

        function countdown(time) {
            document.getElementById("circle_1").style.display = "none";
            document.getElementById("circle_reset").style.display = "block";
                if (time >= 0) {
                setnew('Reset', time);
                setTimeout(() => { countdown(time - 1) }, 1 * 1000);
            }
            else {
                go('');
            }

        }
    </script>

</head>

    <body >
        <title>Estufa</title>
        <div style="min-height: 70%;">
            <div style="display: flex; flex-direction: column;">
           
        <div style="margin: auto;">
            <label id ="message_label" style="font-size: 20px; font-family: Arial, Helvetica, sans-serif;"> Please Wait while the ESP is updating:</span>
        </div>
        <br>
        <div style="margin: auto;">
            <div id='circle_1'></div>
            <div id='circle_reset' style="display: none;"></div>
        </div>
    </div>
    </div>
        <footer>
            <p class="footer"><i>Supersonic by MattediWorks&copy;</i></p>
        </footer>
    </body>

</html>)==="
//##$$
        ;
}

void setup()
{
    int oldTime = millis();
    Serial.begin(115200); // Start Serial

    if (SD_MMC.begin("/sd", true, false))
         is_SD_Mount = true;

    if (!is_SD_Mount)
        Serial.println("Error initializing SD");
    else
    {
        Serial.print("SD Card mounted. Size: ");
        Serial.print(SD_MMC.cardSize() / 1024 / 1024);
        Serial.print("Mb.  Used: ");
        Serial.print((float)(SD_MMC.usedBytes()) / SD_MMC.totalBytes() * 100);
        Serial.println("%");
    }

    File_Writer("/Web/capPortal.html", getPage(), false);
    delay(50);
    File_Writer("/Web/Circles.css", getPage2(), false);
    delay(50);
    File_Writer("/Web/Circles.js", getPage3(), false);
    delay(50);
    File_Writer("/Web/Common.css", getPage4(), false);
    delay(50);
    File_Writer("/Web/CommonScript.js", getPage5(), false);
    delay(50);
    File_Writer("/Web/doPage_pt.html", getPage6()), false;
    delay(50);
    File_Writer("/Web/doPage.html", getPage7(), false);
    delay(50);
    File_Writer("/Web/Files.css", getPage8(), false);
    delay(50);
    File_Writer("/Web/Files.html", getPage9(), false);
    delay(50);
    File_Writer("/Web/Graphs.js", getPage10(), false);
    delay(50);
    File_Writer("/Web/MainPage.html", getPage11(), false);
    delay(50);
    File_Writer("/Web/medium-slider.css", getPage12(), false);
    delay(50);
    File_Writer("/Web/Settings.css", getPage13(), false);
    delay(50);
    File_Writer("/Web/Settings.html", getPage14(), false);
    delay(50);
    File_Writer("/Web/Settings.js", getPage15(), false);
    delay(50);
    File_Writer("/Web/test.html", getPage16(), false);
    delay(50);
    File_Writer("/Web/Updating.html", getPage17(), false);

    Serial.print("Finished updating SDcard. time: ");
    Serial.print(millis() - oldTime);
    Serial.println("ms");

    sd_mutex = xSemaphoreCreateCounting(3, 3);

    if (sd_mutex == NULL)
    {
        Serial.println("sd mutex = ! NULL MUTEX !");
    }

    WiFi.mode(WIFI_STA); // WiFi Station Mode
    WiFi.begin(Config.WIFI_SSID.c_str(), Config.WIFI_PASSWORD.c_str());

    bool createAp = false;

    bool beauty = true;
    while (WiFi.status() != WL_CONNECTED && !createAp)
    {
        if (millis() % 100 == 0 && beauty)
        {
            Serial.print(".");
            beauty = false;
        }
        else if (millis() % 100 != 0)
        {
            beauty = true;
        }
    }
    Serial.println("WiFi Connected");
    server.addHandler(new EstufaRequestHandler()).setFilter(ON_STA_FILTER);
    server.begin();
#ifdef DEBUGWEB
    debug.web = true;
#endif
}

void loop()
{
}