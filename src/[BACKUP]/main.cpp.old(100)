/*                        TODO LIST
* 1. Calibration Function
* 4. Implement Configuration
* 5. Heat up every step mode
* 6. Log Viewer on Files.html
* 7. Improve the ESP disconected mode
*
*
*
*
*
*
*/
#include <WiFi.h>
#include <WiFiClient.h>
#include <ESPmDNS.h>
#include <C:\Users\Vity1\Documents\Arduino\libraries\DallasTemperature\DallasTemperature.h>
#include <C:\Users\Vity1\Documents\Arduino\libraries\Time-master\TimeLib.h>
#include <HTTPClient.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <SPIFFS.h>
#include "FS.h"
#include <C:\Users\Vity1\Documents\PlatformIO\Projects\Estufa_WebPage\.pio\libdeps\esp32dev\AsyncTCP-esphome\src\AsyncTCP.h>
#include <C:\Users\Vity1\Documents\PlatformIO\Projects\Estufa_WebPage\.pio\libdeps\esp32dev\ESPAsyncWebServer-esphome\src\ESPAsyncWebServer.h>
#include <DNSServer.h>
#include <C:\Users\Vity1\Documents\PlatformIO\Projects\Estufa_WebPage\include\SD\SDCard.h>
#include "SD_MMC.h"

#define DNS_NAME "Estufa"

#define ONE_WIRE_BUS 16

#define RELAY_PIN 13

#define HISTORY_SIZE 1000

#define GET_VARIABLE_NAME(Variable) (#Variable)

float DS18Temp[HISTORY_SIZE];
int DS18Time[HISTORY_SIZE];
uint16_t DS18_CurrentIndex = 0;
uint LastTime = 0;
int cycle = 0;
uint startup_time = 0;
int random_temp = 300; //delete this after using

#define MAX_STEPS 22
byte currentProg = 0;

//Update Variables
bool is_updating = false;
float update_progress = 0;

//Flags
bool new_ramp = false;
bool new_step = false;
bool new_prog = false;
bool new_relay_state = false;
bool boot_reset = false;

bool is_time_configured = false;

bool is_SPIFFSS_Mount = false;
bool is_SD_Mount = false;
void SD_File_Writer(String, String, bool);
SDCard *SD;

int oldMillis = 0;
int oldLoopMillis = 0;

//references for funcitons
String normalizedDayMonth();
String getCurrentProcess();
void StandardTesting();

struct DebugFlags
{
    bool web = false;
    bool ramp = false;
    bool temp = false;
    bool log = false;
    bool general = true;
};

#define WIFI_AP_SSID "ESP32 Estufa"
#define WIFI_AP_PASSWORD "ESP32ESP32"
AsyncWebServer server(80);

struct Configuration
{
    // Will mantain temperature within this tolerance.
    float tolerance = 0.5;
    //Resolution of DS18b20 Sensor
    byte TEMPERATURE_PRECISION = 9;

    //Web Site Credentials
    String www_username = "admin";
    String www_password = "admin";

    //Wifi Credentials
    String WIFI_SSID = "MCarvalho";
    String WIFI_PASSWORD = "salvador";

    //Sample rate for logging
    uint8_t sample_rate_in_seconds = 1;

    /*
    Creates a string with the variables to be parsed elsewhere.
    bool complete: wheater or not you want to send passwords aswell.
    */
    String toString(bool complete = false)
    {
        String message = "";
        message += "tolerance=";
        message += tolerance;
        message += ",TEMPERATURE_PRECISION=";
        message += TEMPERATURE_PRECISION;
        message += ",sample_rate_in_seconds=";
        message += sample_rate_in_seconds;
        message += ",WIFI_SSID=";
        message += WIFI_SSID;
        if (complete)
        {
            message += ",WIFI_PASSWORD=";
            message += WIFI_PASSWORD;
        }
        message += ",www_username=";
        message += www_username;
        if (complete)
        {
            message += ",www_password=";
            message += www_password;
        }
        return message;
    }

    //Resets the config to  its hardcoded values
    void reset()
    {
        tolerance = 0.5;
        TEMPERATURE_PRECISION = 9;
        www_username = "admin";
        www_password = "admin";
        sample_rate_in_seconds = 1;
        WIFI_SSID = "MCarvalho";
        WIFI_PASSWORD = "salvador";
    }

    //parse new values from a string.
    void fromString(String newConfig, bool partialUpdate = false)
    {
        if (!partialUpdate)
            reset();

        String value = "";
        String variable = "";
        char nextChar;
        bool isValue = false;
        for (size_t i = 0; i < newConfig.length(); i++)
        {
            nextChar = newConfig[i];
            if (!isValue)
            {
                if (nextChar != '=')
                    variable += nextChar;
                else
                    isValue = true;
            }
            else
            {
                if (nextChar != ',')
                    value += nextChar;
                else
                {
                    if (variable == "tolerance")
                        tolerance = atof(value.c_str());
                    else if (variable == "WIFI_SSID")
                        WIFI_SSID = value;
                    else if (variable == "WIFI_PASSWORD")
                        WIFI_PASSWORD = value;
                    else if (variable == "www_username")
                        www_username = value;
                    else if (variable == "www_password")
                        www_password = value;
                    else if (variable == "TEMPERATURE_PRECISION")
                        TEMPERATURE_PRECISION = atoi(value.c_str());
                    else if (variable == "sample_rate_in_seconds")
                        sample_rate_in_seconds = atoi(value.c_str());

                    value = "";
                    variable = "";
                    isValue = false;
                }
            }
        }
    }

    //Saves the current config to '/config.cfg' in the SD card
    void save()
    {
        SD_File_Writer("/config.cfg", toString(true), false);
        return;
    }

private:
    uint checksum(String evalString, int base = 100)
    {
        uint totalSum = 0;
        for (size_t i = 0; i < evalString.length(); i++)
        {
            totalSum += (int)evalString[0];
        }

        return totalSum % base;
    }
};

Configuration Config;

struct HeatRamp
{

    String projectName;
    String csvFile = "/Logs/Noname.csv";
    String logFile = "/Logs/Noname.log";
    byte currentstep = 0;
    byte totalsteps = 0;
    float temperatureSteps[MAX_STEPS + 1];
    float minuteSteps[MAX_STEPS + 1];
    unsigned int StepsTimes[MAX_STEPS + 1];

    unsigned int startTime = 0;
    unsigned int startHeating = 0;
    unsigned int endTime = 0;

    bool programmedStart = false;
    bool heatUp = false;
    bool heating = false;
    bool running = false;
    bool finished = false;
    bool configured = false;
    //Prints the Heatramp Object
    void print()
    {
        String ramp = "";
        ramp += "Name: ";
        ramp += projectName;
        ramp += "\nTotal steps: ";
        ramp += totalsteps;
        ramp += "\nTemperature, Time, Step Time\n";
        for (size_t i = 0; i < totalsteps; i++)
        {
            ramp += temperatureSteps[i];
            ramp += ", ";
            ramp += minuteSteps[i];
            ramp += ", ";
            ramp += StepsTimes[i];
            ramp += ",\n";
        }
        ramp += "Log file: ";
        ramp += logFile;
        ramp += "\nStart: ";
        ramp += startTime;
        ramp += "\nProgram Start: ";
        ramp += programmedStart;
        ramp += "\nHeatUp: ";
        ramp += heatUp;

        Serial.println(ramp);
    }
    //Sets the Log Filename
    void startLogs()
    {
        generateCsv();
        generateLog();
    }
    void generateCsv()
    {
        if (!is_SD_Mount)
            return;
        String baseName = "/Logs/" + projectName;
        bool nameAvailable = false;
        u_int nextName = 1;
        if (!SD_MMC.exists(baseName + ".csv"))
        {
            csvFile = baseName + ".csv";
            //createLogFile(logFile);
            nameAvailable = true;
        }

        while (!nameAvailable)
        {
            String newName = baseName + "(" + nextName + ").csv";
            nextName++;
            if (!SD_MMC.exists(newName))
            {
                csvFile = newName;
                nameAvailable = true;
            }
        }

        Serial.print("Creating '");
        Serial.print(csvFile);
        Serial.println("'. Time, Temp, SetTemp, Relay, CurrentStep");
        SD_File_Writer(csvFile, "Time Stamp,Time, Temperature,Set Temperature, Relay Status, Current Step, comment\n", true);
    }
    //Starts the Log file
    void generateLog()
    {
        if (!is_SD_Mount)
            return;
        String baseName = csvFile.substring(0, csvFile.lastIndexOf('.'));
        bool nameAvailable = false;
        u_int nextName = 1;
        baseName += "[";
        baseName += normalizedDayMonth();
        baseName += "]";
        if (!SD_MMC.exists(baseName + ".log"))
        {
            logFile = baseName + ".log";
            nameAvailable = true;
        }

        while (!nameAvailable)
        {
            String newName = baseName + "(" + nextName + ").csv";
            nextName++;
            if (!SD_MMC.exists(newName))
            {
                logFile = newName;
                nameAvailable = true;
            }
        }

        Serial.print("Creating '");
        Serial.print(logFile);
        Serial.println("'. Time, Temp, SetTemp, Relay, CurrentStep");
        SD_File_Writer(logFile, "Time,Temperature,Set Temperature, Relay Status, Current Step\n", true);
    }
    //Calculate the StepTimes array
    void calculateStepTimes()
    {
        Serial.println("Calculating StepTimes: ");
        for (size_t i = 0; i < totalsteps; i++)
        {
            StepsTimes[i] = startTime;
            for (size_t j = 0; j < i + 1; j++)
            {
                StepsTimes[i] += (int)(minuteSteps[j] * 60);
            }
            Serial.print("Step: ");
            Serial.print(i);
            Serial.print(" -> ");
            Serial.println(StepsTimes[i]);
        }
    }
    //logs the temperature and all the variables to a csv file associated to your projectname.
    void csv(float temperature, bool RelayStatus, String comment = "")
    {
        String Message = "";
        Message += now();
        Message += ",";
        if (heating)
            Message += now() - startHeating;
        else
            Message += now() - startTime;
        Message += ",";
        Message += temperature;
        Message += ",";
        Message += temperatureSteps[currentstep];
        Message += ",";
        Message += RelayStatus;
        Message += ",";
        Message += currentstep + 1;
        Message += ",";
        Message += comment;
        Message += "\n";
        SD_File_Writer(csvFile, Message, true);
    }
    void log(String message)
    {
        String _message = "[";
        _message += now() - startTime;
        _message += "] ";
        SD_File_Writer(logFile, _message, true);
    }
    //Resets the HeatRamp Object --not otimized
    void reset()
    {
        Serial.println("Reseting HeatRamp...");
        endTime = 0;
        currentstep = 0;
        projectName = "No Name";
        logFile = "/Logs/Noname.log";
        csvFile = "/Logs/Noname.csv";
        programmedStart = false;
        startTime = 0;
        startHeating = 0;
        totalsteps = 0;
        heating = false;
        heatUp = false;
        running = false;
        finished = false;
        configured = false;
        for (size_t i = 0; i < MAX_STEPS + 1; i++)
        {
            minuteSteps[i] = 0;
            temperatureSteps[i] = 0;
            StepsTimes[i] = 0;
        }

        return;
    }
    //Flags

    String toString()
    {
        String ramp = "";
        ramp += "pname=";
        ramp += projectName;
        ramp += ",steps=";
        ramp += totalsteps;
        ramp += ",Temp=";
        for (size_t i = 0; i < totalsteps; i++)
        {
            ramp += temperatureSteps[i];
            ramp += " ";
        }
        ramp += ",Mins=";
        for (size_t i = 0; i < totalsteps; i++)
        {
            ramp += minuteSteps[i];
            ramp += " ";
        }
        ramp += ",start=";
        ramp += startTime;
        ramp += ",heatingStart=";
        ramp += startHeating;
        ramp += ",end=";
        ramp += endTime;
        ramp += ",programmedStart=";
        ramp += programmedStart;
        ramp += ",configured=";
        ramp += configured;
        ramp += ",running=";
        ramp += running;
        ramp += ",finished=";
        ramp += finished;
        ramp += ",heating=";
        ramp += heating;
        ramp += ",heatUp=";
        ramp += heatUp;

        ramp += ";";

        return ramp;
    }

    void fromString(String ramp)
    {
        String value = "";
        String variable = "";
        char nextChar;
        bool isValue = false;
        reset();

        for (size_t i = 0; i < ramp.length(); i++)
        {
            nextChar = ramp[i];
            if (!isValue)
            {
                if (nextChar != '=')
                    variable += nextChar;
                else
                    isValue = true;
            }
            else
            {
                if (nextChar != ',')
                    value += nextChar;
                else
                {
                    if (variable == "pname")
                        projectName = value;
                    else if (variable == "steps")
                        totalsteps = atoi(value.c_str());
                    else if (variable == "start")
                        startTime = atoi(value.c_str());
                    else if (variable == "heatingStart")
                        startHeating = atoi(value.c_str());
                    else if (variable == "end")
                        endTime = atoi(value.c_str());
                    else if (variable == "configured")
                        configured = atoi(value.c_str());
                    else if (variable == "running")
                        running = atoi(value.c_str());
                    else if (variable == "heating")
                        heating = atoi(value.c_str());
                    else if (variable == "finished")
                        finished = atoi(value.c_str());
                    else if (variable == "heatUp")
                        heatUp = atoi(value.c_str());
                    else if (variable == "programmedStart")
                        programmedStart = atoi(value.c_str());
                    else if (variable == "Temp")
                    {
                        String _temp = "";
                        int _index = 0;
                        for (size_t i = 0; i < value.length(); i++)
                        {
                            if (value[i] == ' ')
                            {
                                if (_index < MAX_STEPS)
                                    temperatureSteps[_index] = atof(_temp.c_str());
                                _index++;
                            }
                            else
                                _temp += value[i];
                        }
                    }
                    else if (variable == "Mins")
                    {
                        String _temp = "";
                        int _index = 0;
                        for (size_t i = 0; i < value.length(); i++)
                        {
                            if (value[i] == ' ')
                            {
                                if (_index < MAX_STEPS)
                                    minuteSteps[_index] = atof(_temp.c_str());
                                _index++;
                            }
                            else
                                _temp += value[i];
                        }
                    }

                    value = "";
                    variable = "";
                    isValue = false;
                }
            }
        }
    }
};

#define MAX_CACHE_PAGES 5

struct HtmlCache
{
    String CachedPages[MAX_CACHE_PAGES];
    String Keys[MAX_CACHE_PAGES];

    void setup()
    {
        for (size_t i = 0; i < MAX_CACHE_PAGES; i++)
        {
            CachedPages[i] = "";
            Keys[i] = "";
        }
    }

    int Contains(String key)
    {
        for (size_t i = 0; i < MAX_CACHE_PAGES; i++)
        {
            if (key == Keys[i])
                return i;
        }
        return -1;
    }

    bool LoadPage(String key, String filename)
    {
        int index = getFreeSpace();
        if (index < 0 || index > MAX_CACHE_PAGES)
            return false;
        if (!is_SD_Mount)
            return false;
        if (!SD_MMC.exists(filename))
            return false;
        Keys[index] = key;
        File _file = SD_MMC.open(filename);
        CachedPages[index] = _file.readString();
        _file.close();
        return true;
    }

    bool LoadPage(bool blanck = false)
    {
        int index = getFreeSpace();
        if (index < 0 || index > MAX_CACHE_PAGES)
            return false;
        if (!blanck)
            return true;
        Keys[index] = "    ";
        CachedPages[index] = "   ";
        return true;
    }

    int getFreeSpace()
    {
        for (size_t i = 0; i < MAX_CACHE_PAGES; i++)
        {
            if (Keys[i] == "")
                return i;
        }
        return -1;
    }

    bool releasePage(String key)
    {
        int index = Contains(key);
        if (index < 0)
            return false;

        CachedPages[index] = "";
        Keys[index] = "";

        return true;
    }

    String getPagebyIndex(int index)
    {
        if (index > -1 && index < MAX_CACHE_PAGES)
            return CachedPages[index];
        else
            return "";
    }

    String getPagebyKey(String key)
    {
        return getPagebyIndex(Contains(key));
    }
};

HtmlCache Cache;
HeatRamp currentRamp;
HeatRamp lastRamp;

DebugFlags debug;

// Setup a oneWire instance to communicate with any OneWire devices;
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature DS18(&oneWire);

String StateString()
{
    String msg = "";
    if (currentRamp.configured)
    {
        msg += "heat_ramp:";
        msg += currentRamp.toString();
    }
    msg += ";new_prog:";
    msg += currentProg;
    msg += ";current_state: ";
    msg += currentRamp.running;
    msg += ";new_step:";
    msg += currentRamp.currentstep + 1;
    msg += ";relay_status:";
    msg += digitalRead(RELAY_PIN);
    msg += ";current_process:";
    if (currentRamp.running)
        msg+= "Working";
    else if (currentRamp.heating)
        msg+= "Heating";
    else if (currentRamp.configured && !currentRamp.finished)
        msg+= "Waiting to Start";
    else
        msg+= " Idle";
    msg += ';';

    return msg;
}


String getMIME(String filename)
{
    if (filename.endsWith(".htm"))
        return "text/html";
    else if (filename.endsWith(".html"))
        return "text/html";
    else if (filename.endsWith(".css"))
        return "text/css";
    else if (filename.endsWith(".js"))
        return "text/javascript";
    else if (filename.endsWith(".png"))
        return "image/png";
    else if (filename.endsWith(".gif"))
        return "image/gif";
    else if (filename.endsWith(".jpg"))
        return "image/jpeg";
    else if (filename.endsWith(".ico"))
        return "image/x-icon";
    else if (filename.endsWith(".xml"))
        return "text/xml";
    else if (filename.endsWith(".pdf"))
        return "application/x-pdf";
    else if (filename.endsWith(".zip"))
        return "application/x-zip";
    else if (filename.endsWith(".gz"))
        return "application/x-gzip";
    else if (filename.endsWith(".csv"))
        return "text/csv";
    else if (filename.endsWith(".log"))
        return "text/log";
    return "text/plain";
}

String normalizedDayMonth()
{

    if (!is_time_configured)
        return "";
    String msg = "";
    if (day() < 10)
        msg += '0';
    msg += day();
    msg += '-';
    if (month() < 10)
        msg += '0';
    msg += month();
    return msg;
}

void GeneralLog(String message)
{
    String _msg = "[";
    if (is_time_configured)
        _msg += now();
    else
        _msg += "clock not synced";
    _msg += "]>>>>>";
    _msg += message;
    _msg += "\n";
    SD_File_Writer("/Logs/General.log", _msg, true);
}

void SPIFFS_File_Writer(String Filename, String Content, bool append = false)
{

    if (!is_SPIFFSS_Mount)
    {
        Serial.println("SPIFFS not Mount");
        return;
    }
    if (map(SPIFFS.usedBytes(), 0, SPIFFS.totalBytes(), 0, 100) > 90)
    {
        Serial.println("SPIFFS over 90%");
        return;
    }

    if (Filename[0] != '/')
        Filename = '/' + Filename;

    File _file;
    if (append)
        _file = SPIFFS.open(Filename, "a");
    else
    {
        if (SPIFFS.exists(Filename))
            SPIFFS.remove(Filename);
        _file = SPIFFS.open(Filename, "w");
    }
    _file.print(Content);
    _file.flush();
    _file.close();
}

void SD_File_Writer(String Filename, String Content, bool append = false)
{
    if (!is_SD_Mount)
    {
        Serial.println("SD not Mount");
        return;
    }

    if (Filename[0] != '/')
        Filename = '/' + Filename;

    File _file;
    if (append)
        _file = SD_MMC.open(Filename, "a");
    else
    {
        if (SD_MMC.exists(Filename))
            SD_MMC.remove(Filename);
        _file = SD_MMC.open(Filename, "w");
    }
    _file.print(Content);

    _file.flush();
    _file.close();
}

void SPIFFS_File_Mover(String Origin_Filename, String Target_Filename)
{
    if (!is_SPIFFSS_Mount)
    {
        Serial.println("SPIFFS not Mount");
        return;
    }
    if (Origin_Filename[0] != '/')
        Origin_Filename = '/' + Origin_Filename;
    if (Target_Filename[0] != '/')
        Target_Filename = '/' + Target_Filename;

    if (!SPIFFS.exists(Origin_Filename))
    {
        Serial.print("File: '");
        Serial.print(Origin_Filename);
        Serial.println("' not found.");
        return;
    }

    File _file = SPIFFS.open(Target_Filename, "w");
    _file.print(SPIFFS.open(Origin_Filename).readString());
    _file.flush();
    _file.close();
    SPIFFS.remove(Origin_Filename);
}

void resetFlags() // Reset the flags of new data to be sent to HTTP front end
{
    new_ramp = false;
    new_step = false;
    new_prog = false;
    new_relay_state = false;
}

void printArray(int array[])
{
    Serial.print(sizeof(array));
    Serial.print(":");
    for (size_t i = 0; i < sizeof(array); i++)
    {
        Serial.print(" ");
        Serial.print(array[i]);
        Serial.print(".");
    }
    Serial.println();
}

#pragma region Ramp Start - End

void StartRamp()
{
    String msg = "Starting new Ramp: ";
    msg += currentRamp.projectName;
    msg += "\nNow: ";
    msg += now();
    msg += "\nTimes: [";
    for (size_t i = 0; i < currentRamp.totalsteps; i++)
    {
        msg += currentRamp.minuteSteps[i];
        msg += ',';
    }
    msg += "]\nTemps: [";
    for (size_t i = 0; i < currentRamp.totalsteps; i++)
    {
        msg += currentRamp.temperatureSteps[i];
        msg += ',';
    }
    msg += "]\nSteps: ";
    msg += currentRamp.totalsteps;
    msg += "\n";
    currentRamp.log(msg);
    GeneralLog("Starting Ramp: " + currentRamp.projectName);
    currentRamp.running = true;
    currentRamp.finished = false;
    currentRamp.currentstep = 0;
    currentRamp.startTime = now() + 1;
    currentRamp.calculateStepTimes();
    currentRamp.csv(DS18Temp[DS18_CurrentIndex], digitalRead(RELAY_PIN), "Ramp Started");
    new_ramp = true;
    Serial.println("======= Starting Heat Ramp =======");
    currentRamp.print();
    oldMillis = millis();
}

void startHeating()
{
    Serial.println("Start Heating up to: ");
    Serial.print(currentRamp.temperatureSteps[0]);
    currentRamp.heating = true;
    currentRamp.startHeating = now();
    currentRamp.csv(DS18Temp[DS18_CurrentIndex], digitalRead(RELAY_PIN), "Heating Started");
}

void resetRamp()
{
    lastRamp.fromString(currentRamp.toString());
    currentRamp.reset();
    currentProg = 0;
}

void EndRamp()
{
    currentRamp.running = false;
    currentRamp.heating = false;
    currentRamp.finished = true;
    currentRamp.endTime = now();
    GeneralLog("Ending Ramp: " + currentRamp.projectName);
    Serial.println("======= Ending Heat Ramp =======");
}

#pragma endregion

String listLogFiles()
{
    if (!is_SD_Mount)
        return "error:SD card not found;";

    String msg = "files:";

    File root = SD_MMC.open("/Logs");
    File file = root.openNextFile();

    while (file)
    {
        String s = file.name();
        msg += s;
        msg += '=';
        msg += (float)file.size() / 1024;
        msg += ',';
        file = root.openNextFile();
    }

    msg += ';';
    return msg;
}

void handleRequestHist(AsyncWebServerRequest *request)
{

    if (!is_time_configured)
    {
        request->send(200, "txt/plain", "set_time;");
        return;
    }
    bool done = false;
    String msg = "temp_history:";
    for (int i = 0; !done; i++)
    {
        if (DS18Temp[i] == 0 && DS18Time[i] == 0)
            done = true;
        else if (i + 1 >= HISTORY_SIZE)
            done = true;
        else
        {
            msg += DS18Time[i];
            msg += " ";
            msg += DS18Temp[i];
            msg += ",";
        }
    }
    msg += ';';
    msg += "new_temp:";
    int x = DS18_CurrentIndex - 1;
    if (x < 0)
        x = HISTORY_SIZE - 1;
    msg += DS18Time[x];
    msg += " ";
    msg += DS18Temp[x];
    msg += ";";

    msg += StateString();

    AsyncWebServerResponse *res = request->beginResponse(200, "text/plain", msg);
    request->send(res);
    return;
}

void handleRequestUpdate(AsyncWebServerRequest *request)
{
    String message = "new_temp:";
    int x = DS18_CurrentIndex - 1;
    if (x < 0)
        x = HISTORY_SIZE - 1;
    message += DS18Time[x];
    message += " ";
    message += DS18Temp[x];
    message += ";";

    if (!is_time_configured)
    {
        message += "set_time;";
    }
    else
    {
        message += StateString();
    }

    request->send(200, "text/plain", message);
    // Serial.println(message);
}

void handleNewRamp(AsyncWebServerRequest *request)
{
    if (!currentRamp.running)
    {
        if (currentRamp.configured)
        {
            lastRamp.fromString(currentRamp.toString());
            currentRamp.reset();
        }
        currentRamp.totalsteps = atoi(request->arg((size_t)0).c_str());
        int j = 0;
        for (size_t i = 1; i < request->args(); i++)
        {
            if (i + 1 < request->args())
            {
                if (request->arg(i) != "" && request->arg(i + 1) != "")
                {
                    currentRamp.temperatureSteps[j] = atof(request->arg(i).c_str());
                    currentRamp.minuteSteps[j] = atof(request->arg(i + 1).c_str());
                    j++;
                }
                else
                    currentRamp.totalsteps--;
            }
            i++;
        }
        currentRamp.currentstep = 0;
        String start = request->arg("_start");
        if (request->arg("heatup") == "on")
            currentRamp.heatUp = true;
        currentRamp.projectName = request->arg("pname");
        currentRamp.startLogs();
        currentRamp.print();
        currentRamp.configured = true;
        if (start == "on")
        {
            if (currentRamp.heatUp)
                startHeating();
            else
                StartRamp();
        }
    }
    request->send(200, "text/html", "<html><script>window.location.assign(\"/\")</script></html>");
}

void SendLargeFiles(AsyncWebServerRequest *request, File File)
{
    //request->sendChunked(200,getMIME( File.name()), File.readString().c_str());
    Serial.print("Sending Large File: ");
    Serial.println(File.name());
    AsyncWebServerResponse *response = request->beginResponse(SD_MMC, File.path(), getMIME(File.name()));
    request->send(response);
    return;
}
void getTime()
{
    Serial.println("Syncing Time Online");
    HTTPClient http;
    http.begin("http://worldtimeapi.org/api/timezone/America/Bahia.txt"); //HTTP
    int httpCode = http.GET();
    // httpCode will be negative on error
    if (httpCode > 0)
    {
        // HTTP header has been send and Server response header has been handled
        // file found at server
        if (httpCode == HTTP_CODE_OK)
        {
            Serial.printf("[HTTP] OK... code: %d\n", httpCode);
            String payload = http.getString();
            char str[payload.length() + 1];
            strcpy(str, payload.c_str());
            char *pch;
            pch = strtok(str, ":\n");
            int i = 0;
            //  int raw_offset = 0;
            while (pch != NULL)
            {

                i++;
                if (i == 23)
                {
                    //    raw_offset = atoi(pch);
                }
                if (i == 27)
                {
                    setTime(atoi(pch));
                }
                //printf("%d: %s\n", i, pch);
                pch = strtok(NULL, ":\n");
            }
            is_time_configured = true;
            startup_time = now();
            String msg = "Time Synced ";
            msg += millis();
            msg += "ms from boot.";
            GeneralLog(msg);
            StandardTesting();
        }
        else
        {
            Serial.printf("[HTTP] Error code: %d\n", httpCode);
        }
    }
    else
    {
        Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
    }
    http.end();
}

String getPage2()
{
    return
        //##$$CommonScript.js
R"===(var count = 0;
var CircCount = 0;


var failedRequests = 0;
var ESP_Connected = true;

var getDataTimer = setInterval(RequestData, 5000);
var getConfig = setTimeout(() => {RequestData("/loadconfig")}, 1000);
var updateTimer = setInterval(setTime, 1000);
var dns_name = window.location.hostname;

google.charts.load('current', { 'packages': ['corechart'] });
google.charts.setOnLoadCallback(drawChart);
var am_i_offline = false;

const HandledCircles = [];


const GraphOptions = new GraphOptionsCreator();
const CurrentRamp = new CurrentRampCreator();
const State = new StateCreator();
const Config = new ConfigCreator();

function CurrentRampCreator() {
    this.temp = [];
    this.times = [];
    this.stepsTimeStamps = [];

    this.totalsteps = 0;
    this.start = 0;
    this.heatingStart = 0;
    this.end = 0;
    this.computedEnd = 0;

    this.configured = false;
    this.finished = false;
    this.running = false;
    this.heating = false;
    this.programmedStart = false;
    this.heatUp = false;

    this.name = "";
    this.reset = function () {
        this.temp = [];
        this.times = [];
        this.stepsTimeStamps = [];

        this.totalsteps = 0;
        this.start = 0;
        this.heatingStart = 0;
        this.end = 0;
        this.computedEnd = 0;

        this.configured = false;
        this.finished = false;
        this.running = false;
        this.heating = false;
        this.heatUp = false;
        this.programmedStart = false;
        this.name = "";
    }

}

function StateCreator() {
    this.Temperature = 0;
    this.CurrentStep = 0;
    this.Progress = 0;
    this.isRunning = false;
    this.Paused = false;
    this.Finished = false;
    this.relay_status = false;
    this.WorkerState = 'Unknown';
    this.update = function () { updateRampState() };

}
function GraphOptionsCreator() {
    this.DrawProgramedRamp = true;
    this.RampOption = 'function';
    this.GraphSize = -1;
    this.DataTable = undefined;
    this.ShowFuture = true;
    this.HoldGraph = false;
    this.GraphName = "";
    this.resetDataTable = function () {
        var data = new google.visualization.DataTable();
        data.addColumn('date', 'Time');
        data.addColumn('number', 'Temperature');
        data.addColumn({ 'type': 'string', 'role': 'style' });
        this.DataTable = data;
    }
}
function CirclePropertyHandler(nameOfCircle) {
    this.id = nameOfCircle;
    this.NeedToMap = false;
    this.PercentMap = {
        'min': 0,
        'max': 100,
        'new_min': 0,
        'new_max': 100
    };
    this.RainbowBar = false;
    this.RainbowNumber = false;
    this.Rainbow = { 'min': '#000000', 'max': '#FFFFFF' };
    this.SetNew = function (value) {
        _val = parseInt(value);
        var _color = undefined;
        var _numberColor = undefined;
        var _valueText = undefined;
        if (_val < 0 || _val > 100) {
            console.log('cant parse new value.', this.id, value);
        }
        if (this.NeedToMap) {
            if (Number.isNaN(this.PercentMap.min) || Number.isNaN(this.PercentMap.max) || Number.isNaN(this.PercentMap.new_min) || Number.isNaN(this.PercentMap.new_max)) {
                this.NeedToMap = false;
                console.log('NaN detected in Mapping ' + this.id + ' disabling map functionality');
                return;
            }
            _val = mapN(_val, this.PercentMap.min, this.PercentMap.max, this.PercentMap.new_min, this.PercentMap.new_max);
            _valueText = value;
        }
        if (this.RainbowBar) {
            //TODO get raibow color
            _color = "#FFFFF0";
        }
        if (this.RainbowNumber) {
            //TODO get raibow color
            _numberColor = "#FFFFF0";
        }

        setnew(this.id, _val, _valueText, _color, _numberColor);
    };

}

function ConfigCreator() {
    this.tolerance;
    //Resolution of DS18b20 Sensor
    this.TEMPERATURE_PRECISION;

    //Web Site Credentials
    this.www_username;
    this.www_password;

    //Wifi Credentials
    this.WIFI_SSID;
    this.WIFI_PASSWORD;

    //Sample rate for logging
    this.sample_rate_in_seconds;

    this.load = function (newConfig) {

        var value = "";
        var variable = "";
        var nextChar;
        var isValue = false;
        for (var i = 0; i < newConfig.length; i++) {
            nextChar = newConfig[i];
            if (!isValue) {
                if (nextChar != '=')
                    variable += nextChar;
                else
                    isValue = true;
            }
            else {
                if (nextChar != ',')
                    value += nextChar;
                else {
                    if (variable == "tolerance")
                        this.tolerance = parseFloat(value);
                    else if (variable == "WIFI_SSID")
                        this.WIFI_SSID = value;
                    else if (variable == "WIFI_PASSWORD")
                        this.WIFI_PASSWORD = value;
                    else if (variable == "www_username")
                        this.www_username = value;
                    else if (variable == "www_password")
                        this.www_password = value;
                    else if (variable == "TEMPERATURE_PRECISION")
                        this.TEMPERATURE_PRECISION = parseInt(value);
                    else if (variable == "sample_rate_in_seconds")
                        this.sample_rate_in_seconds = parseInt(value);

                    value = "";
                    variable = "";
                    isValue = false;
                }
            }
        }
    };
}

function test() {
    // var x = "new_temp" + (Date.now() / 1000) + " 23.81;heat_ramp:-1,10.00 20.00,20.00 20.00,40.00 10.00,20.00 10.00,15.00 15.00,;new_step:1; address:;ramp_start:1622612683;"

    // ParseNewData(x);

    saveData();
}

function setcircle(CircId, value) {

    for (var i = 0; i < HandledCircles.length; i++) {
        if (HandledCircles[i].id == CircId) {
            HandledCircles[i].SetNew(value);
            return;
        }
    }
}

function updateButtonState(buttonState) {
    var name = buttonState.id;
    document.getElementById(name + '_text').innerHTML = buttonState.state;
    document.getElementById(name).className = 'button button' + buttonState.state;
    document.getElementById(name + '_tooltip').hidden = true;
    if (typeof buttonState.enabled !== 'undefined') {

        if (buttonState.enabled) {
            document.getElementById(buttonState.id).removeAttribute("disabled");
        }
        else
            document.getElementById(buttonState.id).setAttribute("disabled", "disabled");
    }
    if (typeof buttonState.tooltip !== 'undefined') {

        if (buttonState.tooltip.enabled) {
            document.getElementById(name + '_tooltip').hidden = false;
        }
        else
            document.getElementById(name + '_tooltip').hidden = true;
        document.getElementById(name + '_tooltip').innerHTML = buttonState.tooltip.text;
    }

}

function newHeatRamp(args) {

    var _newtimes = [];
    var _newtemps = [];
    var _args = args.split(',');
    for (var i = 0; i < _args.length; i++) {
        var variable = _args[i].split('=')[0];
        var value = _args[i].split('=')[1];
        if (variable == "pname")
            CurrentRamp.name = value;
        else if (variable == "steps")
            CurrentRamp.totalsteps = parseInt(value);
        else if (variable == "start")
            CurrentRamp.start = parseInt(value);
        else if (variable == "heatingStart")
            CurrentRamp.heatingStart = parseInt(value);
        else if (variable == "end")
            CurrentRamp.end = parseInt(value) == 1 ? true : false;
        else if (variable == "configured")
            CurrentRamp.configured = parseInt(value) == 1 ? true : false;
        else if (variable == "running")
            CurrentRamp.running = parseInt(value) == 1 ? true : false;
        else if (variable == "heating")
            CurrentRamp.heating = parseInt(value) == 1 ? true : false;
        else if (variable == "finished")
            CurrentRamp.finished = parseInt(value) == 1 ? true : false;
        else if (variable == "heatUp")
            CurrentRamp.heatUp = parseInt(value) == 1 ? true : false;
        else if (variable == "programmedStart")
            CurrentRamp.programmedStart = parseInt(value) == 1 ? true : false;
        else if (variable == "Temp") {
            var newFloat = value.split(' ');
            for (var j = 0; j < newFloat.length; j++) {

                if (!isNaN(parseFloat(newFloat[j]))) {
                    _newtemps[j] = parseFloat(newFloat[j]);
                }
            }
            CurrentRamp.temp = _newtemps;
        }
        else if (variable == "Mins") {
            var newFloat = value.split(' ');
            for (var j = 0; j < newFloat.length; j++) {

                if (!isNaN(parseFloat(newFloat[j]))) {
                    _newtimes[j] = parseFloat(newFloat[j]);
                }
            }
            CurrentRamp.times = _newtimes;
        }
    }

    if (CurrentRamp.finished)
        EndRampRoutine(true);
    else if (CurrentRamp.running || CurrentRamp.heating)
        StartRampRoutine(true);
    else if (CurrentRamp.configured)
        NewRampRoutine(true);


    drawChart();
}

function SetStopButton(state, enabled) {
    var newBtnState =
    {
        id: undefined,
        state: undefined,
        tooltip: undefined,
        enabled: true
    }

    if (typeof enabled !== 'undefined') {
        newBtnState.enabled = enabled;
        if (!enabled)
            newBtnState.tooltip = { enabled: true, text: 'Load a heat ramp to be able to start it' }
    }


    newBtnState.id = 'btnStop'
    newBtnState.state = state;
    updateButtonState(newBtnState);


}

function SetNewRampButton(enabled) {
    var newBtnState =
    {
        id: undefined,
        state: undefined,
        tooltip: undefined,
        enabled: true
    }

    if (typeof enabled !== 'undefined') {
        newBtnState.enabled = enabled;
        if (!enabled)
            newBtnState.tooltip = { enabled: true, text: 'Stop or finish current procedure before loading a new ramp' }
    }


    newBtnState.id = 'btnNewRamp'
    newBtnState.state = 'New Ramp';
    updateButtonState(newBtnState);


}


function updateRampState() {

    document.getElementById("stateLabel").innerHTML = State.WorkerState;
    document.getElementById("stateLabel").className = 'stateLabel ' + State.WorkerState.trim();
    updateRemTime()
    document.getElementById('currentStepsLabel').innerText = State.CurrentStep + '/' + CurrentRamp.totalsteps;
    if (CurrentRamp.name !== "" && typeof (CurrentRamp.name) !== undefined && !CurrentRamp.finished)
        GraphOptions.GraphName = ": " + CurrentRamp.name;
    else
        GraphOptions.GraphName = "";
}

function updateRemTime() {

    if (!CurrentRamp.configured)
        return;

    var _remTime = "";

    var maxSize = 0;
    for (let i = 0; i < CurrentRamp.times.length; i++) {
        maxSize += CurrentRamp.times[i] * 60;
    }

    if (CurrentRamp.finished)
        maxSize = 0;
    if (CurrentRamp.running)
        maxSize = maxSize - (Date.now() / 1000 - CurrentRamp.start);

    var minutes = Math.floor(maxSize / 60);
    var seconds = Math.floor(maxSize % 60);

    if (minutes < 10)
        _remTime += "0";

    if (minutes >= 0)
        _remTime += minutes;
    else
        _remTime += "0"

    if ((Date.now() / 1000) % 2 < 1)
        _remTime += ":";
    else
        _remTime += " ";

    if (seconds < 10)
        _remTime += "0";
    if (seconds >= 0)
        _remTime += seconds;
    else
        _remTime += "0"

    document.getElementById('remainingTimeLabel').innerHTML = _remTime;

}

window.onload = function () {

    generateCircle('circle_1', 'Temperature', 0, 'Temp', '#d4ebd3', '#ff3f38', '#964845', '&degC', 'map 10 90 1 99');
    generateCircle('circle_2', 'Progress', 0, 'Prog', '#f79e9e', '#60bd6b', '#ad8053', '%', 'rainbow #FF0000 #00FF00');
    GraphOptions.resetDataTable();
    ResetRoutine();

    document.getElementById('DrawHeatRampSlider').checked = GraphOptions.DrawProgramedRamp;
    document.getElementById('TimeSpanSelect').value = GraphOptions.GraphSize;
    document.getElementById('ShowFutureSlider').checked = GraphOptions.ShowFuture;
    setTime();
    RequestData('reqhist');
    am_i_offline = isOnline();
};
function setTime() {

    //var x = "new_temp:" + Date.now()/1000 + " 20;";
    //ParseNewData(x);

    var date = new Date(Date.now());
    document.getElementById('timeLabel').innerHTML = formatDate(date);

    if (CurrentRamp.end > 0) {
        if (Date.now() / 1000 - CurrentRamp.end > 2 * 60 * 60) {
            ResetRoutine();
        }

    }

    updateRemTime();
    updateProg();



}

function formatDate(date) {
    if (typeof date === 'object') {
        try {

            var str = '';
            if (date.getHours() < 10)
                str += '0';
            str += date.getHours();
            if (date.getSeconds() % 2 == 0)
                str += ':';
            else
                str += ' ';
            if (date.getMinutes() < 10)
                str += '0'
            str += date.getMinutes();

            return str;
        }

        catch (error) {
            console.log(error);
            return null;
        }
    }

}

//Request Data from backend and add to chart
function RequestData(whichdata) {
    if (typeof whichdata !== 'string') {
        httpGetAsync("requpdate", ParseNewData);
    }
    else
        httpGetAsync(whichdata, ParseNewData);
}

function ParseNewData(incomeString) {
    try {
        var new_routine = 'none';
        var requestStateUpdate = false;
        for (var i = 0; i < incomeString.split(';').length; i++) {
            var _args = incomeString.split(';')[i].split(':');
            if (_args[0] == 'heat_ramp') {
                newHeatRamp(_args[1]);
            }
            if (_args[0] == 'new_temp') {

                var new_temp = _args[1].split(' ')[1];
                State.Temperature = parseInt(new_temp);
                setcircle('Temp', new_temp.substr(0, 4));
                addData(GraphOptions.DataTable, _args[1]);
            }
            if (_args[0] == 'raw') {
                handleRaw(_args[1]);
            }
            if (_args[0] == 'new_prog') {
                var new_prog = parseInt(_args[1]);
                if (!isNaN(new_prog)) {
                    State.Progress = new_prog;
                    updateProg();
                }
            }
            if (_args[0] == 'new_step') {
                var new_step = parseInt(_args[1]);
                State.CurrentStep = new_step;
                requestStateUpdate = true;
                if (new_step - 1 >= 0)
                    CurrentRamp.stepsTimeStamps[new_step - 1] = Date.now() / 1000;
            }
            if (_args[0] == 'relay_status') {
                State.relay_status = (_args[1] == true);
                requestStateUpdate = true;
            }
            if (_args[0] == 'temp_history') {
                addData(GraphOptions.DataTable, _args[1]);
            }
            if (_args[0] == 'current_state') {
                State.isRunning = (_args[1] == true);
                if (State.isRunning && !CurrentRamp.configured)
                    RequestData("/heatramp");
                requestStateUpdate = true;
            }
            if (_args[0] == 'ramp_start') {
                CurrentRamp.start = parseInt(_args[1]);
                if (CurrentRamp.start > 0) {
                    if (!State.isRunning)
                        StartRampRoutine();

                }
                console.log('start', Date.now());
            }
            if (_args[0] == 'ramp_end') {
                var end = parseInt(_args[1]);
                if (end > 0) {
                    CurrentRamp.end = end;
                    if (State.isRunning())
                        EndRampRoutine();

                }
                console.log('end', Date.now());
            }
            if (_args[0] == 'ramp_reset') {
                new_routine = 'reset';

            }
            if (_args[0] == 'set_time') {
                sendTime();
                GraphOptions.resetDataTable();

            }
            if (_args[0] == 'set_time-sucess') {
                alert('Time Synced!');
            }
            if (_args[0] == 'error') {
                alert(_args[1]);
            }
            if (_args[0] == 'current_process') {
                State.WorkerState = _args[1];
                State.update();
            }
            if (_args[0] == 'pname') {
                CurrentRamp.name = _args[1];
                State.update();
            }
            if (_args[0] == 'config') {
                Config.load(_args[1]);
            }
            if (_args[0] == 'go') {
               go(_args[1]);
            }

        }

        if (new_routine !== 'none') {
            if (new_routine === 'start')
                StartRampRoutine();
            if (new_routine === 'end')
                EndRampRoutine();
            if (new_routine === 'reset')
                ResetRoutine();
        }

        if (requestStateUpdate) {
            State.update();
        }

    }


    catch (err) {
        console.log(err);
    }
}

function handleRaw(args) {
    var commands = args.split(',');
    for (var command in commands) {
    }
}

function httpGetAsync(theUrl, callback) {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function () {
        if (xmlHttp.readyState == 4){
            if (xmlHttp.status == 200) {
                callback(xmlHttp.responseText);
                if (!ESP_Connected) {
                    ESP_Connected = true;
                    changeESPConnected(ESP_Connected);
                }
                failedRequests = 0;
            }
            else {
                if (ESP_Connected) {
                    failedRequests++;
                if (failedRequests >= 3) {
                    ESP_Connected = false;
                    changeESPConnected(ESP_Connected);
                }
            }
            }
    }

}
xmlHttp.open("GET", theUrl, true); // true for asynchronous
xmlHttp.timeout = 1000;
try {
    xmlHttp.send();

} catch (error) {
    console.log(error);
}

}
//Change the current HTML Page
function go(where) {
    if (where[0] != "/")
    window.location.assign("/" + where);
    else
    window.location.assign(where);


}

function manualStop() {

    confirm("Are you sure you want to stop the current running process?");
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function () {
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
            rld(xmlHttp.responseText);
    }
    xmlHttp.open("POST", '/pause', true); // true for asynchronous
    xmlHttp.send();
}

function rld(dummy) {
    document.location.reload();
}

function genRampGraph(data, steps) {
    var _currRampTime = CurrentRamp.start * 1000;
    if (_currRampTime <= 1)
        _currRampTime = Date.now();

    if (typeof (steps) !== 'number')
        steps = 10;

    if (steps <= 0)
        steps = 10;

    // data.addRow([new Date(_currRampTime), CurrentRamp.temp[0]]);
    for (var i = 0; i < CurrentRamp.temp.length; i++) {
        for (var j = 1; j < steps; j++) {
            data.addRow([new Date(_currRampTime + ((j / steps) * 60 * 1000 * CurrentRamp.times[i])), CurrentRamp.temp[i]]);
        }
        var newtime = _currRampTime + 60 * 1000 * CurrentRamp.times[i];
        _currRampTime = newtime;
    }
}

function drawChart() {

    if (GraphOptions.HoldGraph)
        return;

    //Create a separated datatable then join 
    var data = new google.visualization.DataTable();
    data.addColumn('date', 'Time');
    data.addColumn('number', 'Set Temperature');

    genRampGraph(data, 100);


    //nowMarker = new google.visualization.DataTable();
    //nowMarker.addColumn('date', 'Time');
    //nowMarker.addColumn('number', 'Set Temperature');
    //nowMarker.addRow([new Date(Date.now()), State.Temperature]);
    //var semiData = google.visualization.data.join(GraphOptions.DataTable, data, 'full', [[0, 0]], [1], [1]);
    //var finalData = google.visualization.data.join(semiData, nowMarker, 'full', [[0, 0]], [1, 2], [1]);
    var finalData = google.visualization.data.join(GraphOptions.DataTable, data, 'full', [[0, 0]], [1, 2], [1]);

    var date_formatter = new google.visualization.DateFormat({
        pattern: "HH:mm:ss"
    });
    date_formatter.format(finalData, 0);

    var dataview = new google.visualization.DataView(finalData);

    if (!GraphOptions.DrawProgramedRamp) {
        dataview.setColumns([0, 1, 2]);
    }
    else
        dataview.setColumns([0, 1, 2, 3]);
    if (GraphOptions.GraphSize > 0)
        dataview.setRows(dataview.getFilteredRows([{ column: 0, minValue: new Date(Date.now() - 60 * 1000 * GraphOptions.GraphSize) }]));
    if (!GraphOptions.ShowFuture)
        dataview.setRows(dataview.getFilteredRows([{ column: 0, maxValue: new Date(Date.now()) }]));

    if (CurrentRamp.running)
        GraphOptions.RampOption = "Line";

    var options = {
        //tooltip: {isHtml: true, trigger: 'selection'},
        title: 'Live Data' + GraphOptions.GraphName,
        backgroundColor: '#F0FFF0',
        interpolateNulls: true,
        titleTextStyle: { textAlign: 'center', justify: 'center', fontName: 'Arial', fontSize: '30', bold: 'true' },
        legend: 'none',
        dataOpacity: 1,
        pointSize: 1,
        curveType: GraphOptions.RampOption, animation: { startup: true, easing: 'in' },
        hAxis: { title: 'Time', format: 'HH:mm' },
        colors: ['red', 'darkred', 'darkgreen'],
        vAxes: {
            0: {
                logScale: false, gridlines: { count: 5 }, title: 'Temp(\xB0C)', titleTextStyle: {
                    color: 'red',
                    fontName: 'Arial',
                    fontSize: '30'
                }
            },
            1: {
                logScale: false, maxValue: 100, minValue: 50, gridlines: { count: 10 }, title: 'Humidity(%)', fontName: 'Arial', titleTextStyle: {
                    color: 'blue',
                    fontName: 'Arial',
                    fontSize: '25'
                }
            }
        },
        series: {
            0: { targetAxisIndex: 0 },
            1: { targetAxisIndex: 0 },
            2: { targetAxisIndex: 0 },
        },
        explorer: {
            keepInBounds: true,
            maxZoomIn: 4.0,
            maxZoomOut: 2.0
        },
    };

    var chart = new google.visualization.LineChart(document.getElementById('ramp_chart'));
    chart.draw(dataview, options);

}

function addData(_DataTable, _newData) {
    try {
        var data = _newData.split(',');
        if (typeof data === 'undefined')
            return;

        for (var i = 0; i < data.length; i++) {
            var data2 = data[i].split(' ');
            if (data2[0] == 0 && data2[1] == 0);
            else {
                if (_DataTable.getNumberOfRows() - 1 >= 0)
                    _DataTable.setCell(GraphOptions.DataTable.getNumberOfRows() - 1, 2, null);
                _DataTable.addRow([new Date(parseInt(data2[0]) * 1000), parseFloat(data2[1]), "point { size: 7; shape-type: circle; fill-color: #006400}"]);
                if (_DataTable.getNumberOfRows() > 5000) {
                    _DataTable.removeRow(0);
                }
            }
        }

        drawChart();

    } catch (e) {
        console.log(e);
    }
}

function isOnline() {
    return window.navigator.onLine;
}

///Circles
function generateCircle(div, _title, _initialPercent, _id, _bgcolor, _color, _numbercolor, _sign, args) {
    if (typeof div === 'object')
        div.innerHTML = createCircle(_title, _initialPercent, _id, _bgcolor, _color, _numbercolor, _sign);
    else {
        document.getElementById(div).innerHTML = createCircle(_title, _initialPercent, _id, _bgcolor, _color, _numbercolor, _sign);
    }

    var _property = new CirclePropertyHandler(_id);

    if (typeof args !== 'undefined') {
        _args = args.split(',');


        for (var i = 0; i < _args.length; i++) {
            _args2 = _args[i].split(' ');
            if (_args2[0] == 'map') {
                _property.NeedToMap = true;
                _property.PercentMap.min = parseInt(_args2[1]);
                _property.PercentMap.max = parseInt(_args2[2]);
                _property.PercentMap.new_min = parseInt(_args2[3]);
                _property.PercentMap.new_max = parseInt(_args2[4]);
            }
            else if (_args2[0] == 'rainbow') {
                _property.RainbowBar = true;
                _property.RainbowTitle = true;
                _property.Rainbow.min = _args2[1];
                _property.Rainbow.max = _args2[2];
            }
        }
    }

    HandledCircles.push(_property);
}
function createCircle(_title, _percent, _Id, _bgcolor, _color, _numbercolor, _sign) {
    if (typeof _title === 'undefined') {
        _title = null;
    }
    if (typeof _percent === 'undefined') {
        _percent = 0;
    }
    if (typeof _Id === 'undefined') {
        _Id = 'newId';

    }
    if (typeof _bgcolor === 'undefined') {
        _bgcolor = "#d4ebd3";
    }
    if (typeof _color === 'undefined') {
        _color = "darkred";
    }
    if (typeof _numbercolor === 'undefined') {
        _numbercolor = "#5f6362";
    }
    if (typeof _sign === 'undefined') {
        _sign = '%';
    }

    var percent = 440 * _percent / 100;
    percent = 440 - percent;
    var rtr = `
<div class="box">
<div class="Pbar">
<svg>
<circle style="stroke:` + _bgcolor + `;"cx ="70" cy="70" r="70"> </circle>
<circle class="c` + CircCount + `" id="` + _Id + `" cx="70" cy="70" r="70">
<style>
.box .Pbar .c`+ CircCount + ` {
 stroke:`+ _color + `;
 stroke-dasharray: 440;
 stroke-dashoffset: `+ percent + `;
 animation: mymove`+ CircCount + ` 2s ease-in;
 animation-iteration-count: 1;
}
@keyframes mymove`+ CircCount + `{
    from {stroke-dashoffset: 440;}
    to {stroke-dashoffset:` + percent + `;}
}</style>
</circle>
</svg>
<div class="prog" style="color:`+ _numbercolor + `;"> <h2 id="` + _Id + "N" + `"> ` + _percent + ` </h2><span>` + _sign + `</span></div></div><h2 class="legend">` + _title + `</h2>
</div>`;

    CircCount++;
    return rtr;
}
function setnew(_id, _newPercent, _newNumber, _color, _titleColor) {
    var _idN = _id + "N";
    if (typeof _color !== 'undefined') {
        document.getElementById(_id).style.color = _color;
    }
    if (typeof _titleColor !== 'undefined') {
        document.getElementById(_idN).style.color = _titleColor;
    }
    if (typeof _newNumber === 'undefined')
        document.getElementById(_idN).innerHTML = _newPercent;
    else
        document.getElementById(_idN).innerHTML = _newNumber;

    var _newoffset = 440 - (440 * _newPercent / 100);
    var _foward = true;
    if (_newoffset > parseInt(getComputedStyle(document.getElementById(_id)).strokeDashoffset, 10))
        _foward = false;

    //            console.log(parseInt(getComputedStyle(document.getElementById(_id)).strokeDashoffset, 10), _newoffset, _newPercent, _newNumber, _foward)

    if (!document.hidden)
        animateRoute(document.getElementById(_id), parseInt(getComputedStyle(document.getElementById(_id)).strokeDashoffset, 10), _newoffset, _foward);
}
function animateRoute(_id, _start, _end, _foward) {
    if (_foward) {
        _start -= 1;
        if (_start <= _end) {
            _start = _end;
            _id.style.strokeDashoffset = _start;
        }
        else {
            _id.style.strokeDashoffset = _start;
            setTimeout(function () { animateRoute(_id, _start, _end, true); }, 10);
        }
    }
    else {
        _start += 1;
        if (_start >= _end) {
            _start = _end;
            _id.style.strokeDashoffset = _start;
        }
        else {
            _id.style.strokeDashoffset = _start;
            setTimeout(function () { animateRoute(_id, _start, _end, false); }, 10);
        }
    }

}
function mapN(value, in_min, in_max, out_min, out_max) {
    if (value > out_max)
        return out_max;
    if (value < out_min)
        return out_min;
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

///Toggle Buttons
function changeDrawHeatRamp(slider) {
    GraphOptions.DrawProgramedRamp = slider.checked;
    drawChart();
}
function changeTimeSpan(object) {
    GraphOptions.GraphSize = parseInt(object.value);
    drawChart();
}
function changeShowFuture(object) {
    GraphOptions.ShowFuture = object.checked;
    drawChart();
}
function changeGraphMode(object) {
    GraphOptions.RampOption = object.value;
    drawChart();
}
function handleHoldButton() {
    GraphOptions.HoldGraph = !GraphOptions.HoldGraph;
    if (GraphOptions.HoldGraph) {
        document.getElementById('btnHold').className = "hold";
        // document.getElementById('btnHold').innerText="Release";
    }
    else {
        document.getElementById('btnHold').className = "";
        // document.getElementById('btnHold').innerText="Hold";

    }

    if (!GraphOptions.HoldGraph)
        drawChart();
}



///Ramp Routines
function NewRampRoutine(silent) {
    SetStopButton('Start');
    document.getElementById('WorkingState').style.display = 'flex';
    var _remTime = new Date(State._end * 1000);
    document.getElementById('remainingTimeLabel').innerText = _remTime.getTime() / 60000;

    document.getElementById('currentStepsLabel').innerText = '0/' + CurrentRamp.totalsteps;
    if (silent != true)
        alert('New ramp loaded!');


}

function StartRampRoutine(silent) {
    document.getElementById('WorkingState').style.display = 'flex';
    SetNewRampButton(false);
    SetStopButton("Stop");
    State.isRunning = true;
    updateRemTime();
    if (silent != true)
        alert("Ramp Started");

}

function PauseRampRoutine(params) {

}

function EndRampRoutine(silent) {
    SetStopButton('Start', true);
    SetNewRampButton(true);
    State.Finished = true;
    if (silent != true)
        alert('This Ramp has finished');

}

function ResetRoutine(params) {
    SetStopButton('Start', false);
    SetNewRampButton(true);
    CurrentRamp.reset();
    State.Progress = 0;
    document.getElementById('WorkingState').style.display = 'none';
}



function saveData() {

    if (confirm('Do you want to download this last ramp?')) {
        var _start = CurrentRamp.start;
        var text = "[Heat Ramp] [csv] [unixtimestamp in m]\n";
        text += "start = ";
        text += _start;
        text += ", Heat Ramp = {temp: ";
        text += CurrentRamp.temp;
        text += "} {time: ";
        text += CurrentRamp.times;
        text += "}\r\n";
        text += "Temperature, time, delta time\r\n";
        text += "======== Starting step: ";
        text += 1;
        text += ". Set Tempereture: ";
        text += CurrentRamp.temp[0];
        text += "\u00B0C for ";
        text += CurrentRamp.times[0];
        text += " minutes\r\n";
        var _step = 1;
        var stepFlag = true;
        if (CurrentRamp.stepsTimeStamps.length < 1)
            stepFlag = false;


        var endFlag = true;
        if (CurrentRamp.end <= 0)
            endFlag = false;

        for (var i = 0; i < GraphOptions.DataTable.getNumberOfRows(); i++) {
            var delta = GraphOptions.DataTable.getValue(i, 0).getTime() / 1000 - _start;

            if (delta >= 0) {
                if (GraphOptions.DataTable.getValue(i, 0).getTime() / 1000 >= CurrentRamp.stepsTimeStamps[_step] && stepFlag) {
                    text += "======== Starting step: ";
                    text += _step + 1;
                    text += ". Set Tempereture: ";
                    text += CurrentRamp.temp[_step];
                    text += "\u00B0C for ";
                    text += CurrentRamp.times[_step];
                    text += " minutes\r\n";
                    _step++;

                    if (CurrentRamp.stepsTimeStamps.length <= _step)
                        stepFlag = false;

                }
                if (GraphOptions.DataTable.getValue(i, 0).getTime() / 1000 >= CurrentRamp.end && endFlag) {
                    text += "========//========== Heat Ramp Ended ========//==========\r\n"
                    endFlag = false;
                }
                text += GraphOptions.DataTable.getValue(i, 1);
                text += ", ";
                text += GraphOptions.DataTable.getValue(i, 0).getTime() / 1000;
                text += ", ";
                text += delta;
                text += "\r\n";
            }
            var blob = new Blob([text], { type: "text/plain;charset=utf-8" });
            var _now = new Date(Date.now());

        }
        saveAs(blob, "HeatRampLog[" + _now.toLocaleDateString() + "].txt");

    }
}

function getnextStep(start, time) {
    return start + time * 60;
}

function stopbutton() {

    if (State.isRunning)
        RequestData('/stop');
    else
        RequestData('/start');
}


function sendTime() {
    var text = "settime?time=";
    text += Math.round(Date.now() / 1000);
    RequestData(text);
}

function makeTable(_selectedRow) {
    if (typeof _selectedRow === 'undefined')
        return;
    var newTable = "";
    newTable = "<tr><th>Step</th><th>Temperature (&deg;C)</th><th>Time (Mins)</th></tr>";
    for (var i = 0; i < CurrentRamp.temp.length; i++) {

        newTable += "<tr ";
        if (i === _selectedRow)
            newTable += "class = \"selectedRow\"";
        else if (i % 2 === 0)
            newTable += "class = \"even-Row\"";
        newTable += "><td>" + (i + 1) + "</td><td>" + CurrentRamp.temp[i] + "</td><td>" + CurrentRamp.times[i] + "</td></tr>"
    }
    document.getElementById("offline-table").innerHTML = newTable;
    document.getElementById("offline-div").style.display = 'flex';

}

function updateProg(prog) {
    setcircle('Prog', State.Progress);
}

function changeESPConnected(isESPConnected) {
    if (typeof (isESPConnected) === 'undefined')
        return;

    if (isESPConnected)//do Online stuff
    {

        document.getElementById("esp_connected").style.display = "block";
        document.getElementById("esp_not_connected").style.display = "none";
        drawChart();       
        ESP_Connected = true;
    }
    else//do Offline stuff 
    {
        document.getElementById("esp_connected").style.display = "none";
        document.getElementById("esp_not_connected").style.display = "block";
        ESP_Connected = false;
        console.log('esp-offline');
        animatereconect(0);

    }

}

function animatereconect(size) {

    var div = document.getElementById("reconnect-animation");
    var divhtml = "";
    for (let index = 0; index < size; index++) {
       
        divhtml+= ".";
    }    

    size ++;
    if (size >= 4)
    size = 0;
    
    div.innerHTML = divhtml;

    if (!ESP_Connected)
    setTimeout(() => {animatereconect(size)},500);
})==="//##$$
        ;
}
String getPage3()
{
    return
        //##$$Files.html
R"===(<html>

<head>
  <link href="Files.css" rel="stylesheet" type="text/css">
  <link rel="apple-touch-icon" sizes="57x57" href="/Favicons/index/apple-icon-57x57.png">
  <link rel="apple-touch-icon" sizes="60x60" href="/Favicons/index/apple-icon-60x60.png">
  <link rel="apple-touch-icon" sizes="72x72" href="/Favicons/index/apple-icon-72x72.png">
  <link rel="apple-touch-icon" sizes="76x76" href="/Favicons/index/apple-icon-76x76.png">
  <link rel="apple-touch-icon" sizes="114x114" href="/Favicons/index/apple-icon-114x114.png">
  <link rel="apple-touch-icon" sizes="120x120" href="/Favicons/index/apple-icon-120x120.png">
  <link rel="apple-touch-icon" sizes="144x144" href="/Favicons/index/apple-icon-144x144.png">
  <link rel="apple-touch-icon" sizes="152x152" href="/Favicons/index/apple-icon-152x152.png">
  <link rel="apple-touch-icon" sizes="180x180" href="/Favicons/index/apple-icon-180x180.png">
  <link rel="icon" type="image/png" sizes="192x192"  href="/Favicons/index/android-icon-192x192.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/Favicons/index/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="96x96" href="/Favicons/index/favicon-96x96.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/Favicons/index/favicon-16x16.png">
  <meta name="msapplication-TileColor" content="#ffffff">
  <meta name="msapplication-TileImage" content="/Favicons/index/ms-icon-144x144.png">
  <meta name="theme-color" content="#ffffff"> 
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Glory:wght@100&family=Noto+Sans+JP:wght@100&display=swap"
    rel="stylesheet">

  <script>
    const xmlHttp = new XMLHttpRequest();
    RequestData("/fileslist");

    var test = "files:test.log 159.25,jolts.csv 0.06,Noname.csv 6.00,Hello.csv 0.06,Hello(1).csv 0.06,Hello(2).csv 0.06,Hello(3).csv 0.06,Hello(4).csv 1.45,testing.csv 0.12,Adventure.csv 4.29,Ahoy.csv 7.43,aaa.csv 3.79,final.csv 3.91,hwai.csv 3.92,Hello2w.csv 18.42,;";


    function RequestData(whichdata) {
      if (typeof whichdata !== 'string')
        httpGetAsync("requpdate", ParseNewData);
      else
        httpGetAsync(whichdata, ParseNewData);
    }
    function httpGetAsync(theUrl, callback) {
      xmlHttp.onreadystatechange = function () {
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
          callback(xmlHttp.responseText);
      }
      xmlHttp.open("GET", theUrl, true); // true for asynchronous
      xmlHttp.send();
    }
    function ParseNewData(incomeString) {
      try {

        for (var i = 0; i < incomeString.split(';').length; i++) {
          var _args = incomeString.split(';')[i].split(':');
          if (_args[0] == "files") {
            getFiles(_args[1]);
          }
          if (_args[0] == 'error') {
            alert(_args[1]);
          }

        }


      }
      catch (err) {
        console.log(err);
      }
    }


    function getFiles(filesString) {
      var FilesLog = [,];
      var FilesCSV = [,];
      var logIndex = 0;
      var CSVIndex = 0;
      var _args = filesString.split(',');
      for (var i = 0; i < _args.length; i++) {
        _args2 = _args[i].split('=');
        if (_args2[0] !== "" && _args2[1] !== "") {
      
          if (_args2[0].endsWith(".csv")) {
            FilesCSV[CSVIndex] = _args2;
            CSVIndex++;
          }
          else {
            FilesLog[logIndex] = _args2;
            logIndex++;
          }

        }
      }
      genFileList(FilesCSV, "CSV");
      genFileList(FilesLog, "Log");
    }

    function genFileList(files, what) {
      console.log(files);
      if (typeof(files[0])!== 'undefined'){

      var s = '<div class="FilesDiv"><div class="FilesLine HeaderLine"><label>File: </label><label>Size:&nbsp;&nbsp;</label></div><label>delete</label></div>';
      
      for (let i = 0; i < files.length; i++) {
        s += genLines(files[i][0], files[i][1]);
      }
  
      document.getElementById("FilesList" + what).innerHTML = s;
    }
    else
    document.getElementById("FilesList" + what).innerHTML= "";
    }

    function genLines(name, size) {
      divString = '<div class="FilesDiv"><div class="FilesLine"><a href="/Logs/' + name + '" download>' + name + '</a><label>' + size + ' kb</label></div><div><button class="buttonDelete" onClick = \'deleteFile("';
      divString = divString + name;
      divString = divString + '")\'>delete</button></div></div>';
      return divString;
    }
    function go(where) {
      window.location.assign(where);
      //window.location.href(place);
    }

    function deleteFile(name) {
      if (confirm("Tem certeza que deseja deletar o arquivo: " + name + " ?")) {
        var url = "/deleteFile?fileName=" + name;
        RequestData(url);
      }
    }
  </script>
</head>

<body>
  <title>Arquivos da Estufa</title>
  <div style="display: flex; justify-content: space-evenly;">
    <h1 class="title">Arquivos disponiveis na estufa:</h1>
  </div>
  <div style="display: flex; justify-content: space-evenly;">
    <div style=" border: brown 1px solid;">
      <div style="display: flex; justify-content: space-evenly;">
        <h1>Logs</h1>
      </div>
      <div id="FilesListLog" class="FilesList">
      </div>
    </div>
    <div style=" border: brown 1px solid;">
      <div style="display: flex; justify-content: space-evenly;">
        <h1>CSV</h1>
      </div>
      <div id="FilesListCSV" class="FilesList">
      </div>
    </div>
  </div>
  <br>
  <br>
  <div style="display: flex; flex-direction: row; justify-content: space-between; margin: auto;">
    <div class="buttonBox">
      <input class="buttonBox_tn" type="button" value="Back" onclick="go('/')">
      <input class="buttonBox_tn" type="button" value="Reload" onclick="go('/Files.html')">
    </div>
  </div>
</body>

</html>)==="//##$$
        ;
}

String getPage()
{
    return
        //##$$MainPage.html
R"===(<html>

<head>
    <link href="Common.css" rel="stylesheet" type="text/css">
    <link rel="apple-touch-icon" sizes="57x57" href="/Favicons/index/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/Favicons/index/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/Favicons/index/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/Favicons/index/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/Favicons/index/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/Favicons/index/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/Favicons/index/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/Favicons/index/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/Favicons/index/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="/Favicons/index/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/Favicons/index/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="/Favicons/index/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/Favicons/index/favicon-16x16.png">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="/Favicons/index/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js">
    </script>
    <script type="text/javascript" src="CommonScript.js"></script>
    <script src="FileSaver.js"></script>
</head>

<body>
    <h1>Estufa do Laboratorio</h1>
    <div id="esp_connected">
        <div class="status_div"
            style="display:flex; justify-content: space-around; margin-right: 10%; margin-left: 10%;">
            <div>
                <Label>Current State: </Label>
                <Label id="stateLabel"> Unknown </Label>
            </div>
            <div>
                <Label id="timeLabel"
                    style="font-family:'Courier New', Courier, monospace; font-size: 30px; border: 1px solid black; border-radius: 15px; padding: 4px; background-color: cornflowerblue;">
                </Label>
            </div>
            <div class="WorkingState" id="WorkingState"
                style="display: flex; justify-content: space-between; width: 40%;">
                <div>
                    <!-- <Label>Remaining Time: </Label> -->
                    <Label id="remainingTimeLabel"
                        style="font-family:'Courier New', Courier, monospace; font-size: 30px; border: 1px solid black; border-radius: 15px; padding: 4px; background-color: darkred;"></Label>
                </div>
                <div>
                    <Label>Current Step: </Label>
                    <Label id="currentStepsLabel"></Label>
                </div>
            </div>
        </div>
        <div style="width: 100%; height:500px; align-items: center; justify-items: center; display: flex;">
            <div style="width: 10%"></div>
            <div id="ramp_chart" style="width:70%;height:500px; position: relative; display: flex;"></div>
            <div id="boxSide" style="width: 20%;">
                <div id="circle_1"></div>
                <div id="circle_2"></div>
            </div>
            <div></div><br>
        </div>
        <div class="GraphOptionsBox">
            <div style="align-content: center; align-items: center; display: flex; flex-direction: row;"> <label
                    style="font-family: Helvetica, sans-serif; font-size: 16; margin-right: 10px;">
                    Show Heat Ramp:
                </label>
                <label class="switch">
                    <input type="checkbox" checked on onchange="changeDrawHeatRamp(this)" id="DrawHeatRampSlider">
                    <span class="slider round"></span>
                </label>
            </div>
            <div
                style="flex-direction: row; display: none; align-items: center; font-family: Helvetica, sans-serif; font-size: 16; margin-right: 10px;">
                <label style="margin-right: 10px;">
                    Set Time Span
                </label>
                <select class="dropdownBox" style="width: 80px; height: 20px;" id="TimeSpanSelect"
                    style="font-family: 'Courier New', Courier, monospace;" onchange="changeTimeSpan(this)">
                    <option value="-1">All</option>
                    <option value="1">1 Min</option>
                    <option value="5">5 Min</option>
                    <option value="5">15 Min</option>
                    <option value="30">30 Min</option>
                    <option value="60">1 Hour</option>
                    <option value="120">2 Hour</option>
                </select>
            </div>
            <div
                style="flex-direction: row; display: flex; align-items: center; font-family: Helvetica, sans-serif; font-size: 16; margin-right: 10px;">
                <label style="margin-right: 10px;">
                    Graph Mode:
                </label>
                <select class="dropdownBox" style="width: 80px; height: 30px;" id="GraphOptionSelect"
                    style="font-family: 'Courier New', Courier, monospace, 20px;" onchange="changeGraphMode(this)">
                    <option style=" font-size: 20px;" value="function">Function</option> <span id="btnStop_tooltip"
                        class="button tooltiptext">Tooltip text</span>
                    <option style=" font-size: 20px;" value="line">Line</option>
                </select>
            </div>

            <div style="align-content: center; align-items: center; display: flex; flex-direction: row;"> <label
                    style="font-family: Helvetica, sans-serif; font-size: 16; margin-right: 10px;">
                    Show Future:
                </label>
                <label class="switch">
                    <input type="checkbox" checked on onchange="changeShowFuture(this)" id="ShowFutureSlider">
                    <span class="slider round"></span>
                </label>
            </div>
            <button onclick="handleHoldButton()" id='btnHold'>Hold
            </button>
        </div>
        <div class="buttonLine">
            <button onclick="go('Logs/General.Log')" class="button"> TEST
                <!--Configura&ccedil;ões-->
            </button>
            <button id="btnStop" onclick="stopbutton()" class="button buttonStop">
                <div id="btnStop_text">STOP</div>
                <span id="btnStop_tooltip" class="tooltiptext" hidden>Tooltip text</span>
            </button>
            <button onclick="go('doPage.html')" class="button" id='btnNewRamp'>
                <div id="btnNewRamp_text">New Ramp</div>
                <span id="btnNewRamp_tooltip" class="tooltiptext" hidden>Tooltip text</span>
            </button>

        </div>

        <div class="offline-div" id="offline-div">
            <div class="offline-div-table">
                <table id=offline-table>
                </table>
            </div>

        </div>
    </div>

    <div id="esp_not_connected" style='display: none; min-height: 70%;'>

        <div style="display: flex; margin: auto; justify-content: center;">
            <label style="font-size: 24px;">The conenction with the ESP microcontroller was lost</label>
        </div>
        <div style="display: flex; margin: auto; justify-content: center;">

            <label style="font-size: 16px;">trying to reconnect</label>
            <span id="reconnect-animation" style="width: 10px;">...</span>

        </div>
    </div>

    <footer>
        <p class="footer"><i>Supersonic by MattediWorks&copy;</i></p>
    </footer>

</body>

</html>)==="//##$$

        ;
}

String getPage4()
{
    return
        //##$$Updating.html
R"===(<html>

<head>
    <link href="Common.css" rel="stylesheet" type="text/css">
    <link rel="apple-touch-icon" sizes="57x57" href="/Favicons/index/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/Favicons/index/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/Favicons/index/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/Favicons/index/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/Favicons/index/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/Favicons/index/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/Favicons/index/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/Favicons/index/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/Favicons/index/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="/Favicons/index/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/Favicons/index/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="/Favicons/index/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/Favicons/index/favicon-16x16.png">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="/Favicons/index/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">

    <script>
        var updates = setInterval(()=>{RequestData("/reqespupdate")}, 1000);
        var CircCount = 0;
        const HandledCircles = [];
        function CirclePropertyHandler(nameOfCircle) {
            this.id = nameOfCircle;
            this.NeedToMap = false;
            this.PercentMap = {
                'min': 0,
                'max': 100,
                'new_min': 0,
                'new_max': 100
            };
            this.RainbowBar = false;
            this.RainbowNumber = false;
            this.Rainbow = { 'min': '#000000', 'max': '#FFFFFF' };
            this.SetNew = function (value) {
                _val = parseInt(value);
                var _color = undefined;
                var _numberColor = undefined;
                var _valueText = undefined;
                if (_val < 0 || _val > 100) {
                    console.log('cant parse new value.', this.id, value);
                }
                if (this.NeedToMap) {
                    if (Number.isNaN(this.PercentMap.min) || Number.isNaN(this.PercentMap.max) || Number.isNaN(this.PercentMap.new_min) || Number.isNaN(this.PercentMap.new_max)) {
                        this.NeedToMap = false;
                        console.log('NaN detected in Mapping ' + this.id + ' disabling map functionality');
                        return;
                    }
                    _val = mapN(_val, this.PercentMap.min, this.PercentMap.max, this.PercentMap.new_min, this.PercentMap.new_max);
                    _valueText = value;
                }
                if (this.RainbowBar) {
                    //TODO get raibow color
                    _color = "#FFFFF0";
                }
                if (this.RainbowNumber) {
                    //TODO get raibow color
                    _numberColor = "#FFFFF0";
                }

                setnew(this.id, _val, _valueText, _color, _numberColor);
            };

        }
        ///Circles
        function generateCircle(div, _title, _initialPercent, _id, _bgcolor, _color, _numbercolor, _sign, args) {
            if (typeof div === 'object')
                div.innerHTML = createCircle(_title, _initialPercent, _id, _bgcolor, _color, _numbercolor, _sign);
            else {
                document.getElementById(div).innerHTML = createCircle(_title, _initialPercent, _id, _bgcolor, _color, _numbercolor, _sign);
            }

            var _property = new CirclePropertyHandler(_id);

            if (typeof args !== 'undefined') {
                _args = args.split(',');


                for (var i = 0; i < _args.length; i++) {
                    _args2 = _args[i].split(' ');
                    if (_args2[0] == 'map') {
                        _property.NeedToMap = true;
                        _property.PercentMap.min = parseInt(_args2[1]);
                        _property.PercentMap.max = parseInt(_args2[2]);
                        _property.PercentMap.new_min = parseInt(_args2[3]);
                        _property.PercentMap.new_max = parseInt(_args2[4]);
                    }
                    else if (_args2[0] == 'rainbow') {
                        _property.RainbowBar = true;
                        _property.RainbowTitle = true;
                        _property.Rainbow.min = _args2[1];
                        _property.Rainbow.max = _args2[2];
                    }
                }
            }

            HandledCircles.push(_property);
        }
        function createCircle(_title, _percent, _Id, _bgcolor, _color, _numbercolor, _sign) {
            if (typeof _title === 'undefined') {
                _title = null;
            }
            if (typeof _percent === 'undefined') {
                _percent = 0;
            }
            if (typeof _Id === 'undefined') {
                _Id = 'newId';

            }
            if (typeof _bgcolor === 'undefined') {
                _bgcolor = "#d4ebd3";
            }
            if (typeof _color === 'undefined') {
                _color = "darkred";
            }
            if (typeof _numbercolor === 'undefined') {
                _numbercolor = "#5f6362";
            }
            if (typeof _sign === 'undefined') {
                _sign = '%';
            }

            var percent = 440 * _percent / 100;
            percent = 440 - percent;
            var rtr = `
<div class="box">
<div class="Pbar">
<svg>
<circle style="stroke:` + _bgcolor + `;"cx ="70" cy="70" r="70"> </circle>
<circle class="c` + CircCount + `" id="` + _Id + `" cx="70" cy="70" r="70">
<style>
.box .Pbar .c`+ CircCount + ` {
 stroke:`+ _color + `;
 stroke-dasharray: 440;
 stroke-dashoffset: `+ percent + `;
 animation: mymove`+ CircCount + ` 2s ease-in;
 animation-iteration-count: 1;
}
@keyframes mymove`+ CircCount + `{
    from {stroke-dashoffset: 440;}
    to {stroke-dashoffset:` + percent + `;}
}</style>
</circle>
</svg>
<div class="prog" style="color:`+ _numbercolor + `;"> <h2 id="` + _Id + "N" + `"> ` + _percent + ` </h2><span>` + _sign + `</span></div></div><h2 class="legend">` + _title + `</h2>
</div>`;

            CircCount++;
            return rtr;
        }
        function setnew(_id, _newPercent, _newNumber, _color, _titleColor) {
            var _idN = _id + "N";
            if (typeof _color !== 'undefined') {
                document.getElementById(_id).style.color = _color;
            }
            if (typeof _titleColor !== 'undefined') {
                document.getElementById(_idN).style.color = _titleColor;
            }
            if (typeof _newNumber === 'undefined')
                document.getElementById(_idN).innerHTML = _newPercent;
            else
                document.getElementById(_idN).innerHTML = _newNumber;

            var _newoffset = 440 - (440 * _newPercent / 100);
            var _foward = true;
            if (_newoffset > parseInt(getComputedStyle(document.getElementById(_id)).strokeDashoffset, 10))
                _foward = false;

            //            console.log(parseInt(getComputedStyle(document.getElementById(_id)).strokeDashoffset, 10), _newoffset, _newPercent, _newNumber, _foward)

            if (!document.hidden)
                animateRoute(document.getElementById(_id), parseInt(getComputedStyle(document.getElementById(_id)).strokeDashoffset, 10), _newoffset, _foward);
        }
        function animateRoute(_id, _start, _end, _foward) {
            if (_foward) {
                _start -= 1;
                if (_start <= _end) {
                    _start = _end;
                    _id.style.strokeDashoffset = _start;
                }
                else {
                    _id.style.strokeDashoffset = _start;
                    setTimeout(function () { animateRoute(_id, _start, _end, true); }, 10);
                }
            }
            else {
                _start += 1;
                if (_start >= _end) {
                    _start = _end;
                    _id.style.strokeDashoffset = _start;
                }
                else {
                    _id.style.strokeDashoffset = _start;
                    setTimeout(function () { animateRoute(_id, _start, _end, false); }, 10);
                }
            }

        }
        function mapN(value, in_min, in_max, out_min, out_max) {
            if (value > out_max)
                return out_max;
            if (value < out_min)
                return out_min;
            return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
        }

        window.onload = function () {
            generateCircle('circle_1', 'Updating:', 0, 'Update', '#d4ebd3', '#00941e', '#24458c', '%');
            generateCircle('circle_reset', 'Restarting in: ', 60, 'Reset', '#d4ebd3', '#00941e', '#00941e', 's', 'map 0 60 1 99');
        }

        function RequestData(whichdata) {
            if (typeof whichdata !== 'string') {
                httpGetAsync("requpdate", ParseNewData);
            }
            else
                httpGetAsync(whichdata, ParseNewData);
        }
        function ParseNewData(incomeString) {
            try {

                for (var i = 0; i < incomeString.split(';').length; i++) {
                    var _args = incomeString.split(';')[i].split(':');
                    if (_args[0] == 'update_progress') {
                        setnew('Update', parseInt(_args[1]));
                    }
                    else if (_args[0] == 'error') 
                    {
                        alert(_args[1]);
                        countdown(15);
                        clearInterval(updates);
                        
                    }
                    
                }

            }


            catch (err) {
                console.log(err);
            }
        }
        function httpGetAsync(theUrl, callback) {
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.onreadystatechange = function () {
                if (xmlHttp.readyState == 4) {
                    if (xmlHttp.status == 200) {
                        callback(xmlHttp.responseText);
                    }
                    else
                    {
                        clearInterval(updates);
                        setnew("Reset",15);
                        alert("OTA Finished");
                        countdown(15);
                        
                    }
                }

            }
            xmlHttp.open("GET", theUrl, true); // true for asynchronous
            xmlHttp.timeout = 1000;
            try {
                xmlHttp.send();

            } catch (error) {
                console.log(error);
            }

        }
        function go(where) {
            window.location.assign("/" + where);
        }

        function countdown(time) {
            document.getElementById("circle_1").style.display = "none";
            document.getElementById("circle_reset").style.display = "block";
                if (time >= 0) {
                setnew('Reset', time);
                setTimeout(() => { countdown(time - 1) }, 1 * 1000);
            }
            else {
                go('');
            }

        }
    </script>

</head>

    <body >
        <div style="min-height: 70%;">
            <div style="display: flex; flex-direction: column;">
           
        <div style="margin: auto;">
            <label id ="message_label" style="font-size: 20px; font-family: Arial, Helvetica, sans-serif;"> Please Wait while the ESP is updating:</span>
        </div>
        <br>
        <div style="margin: auto;">
            <div id='circle_1'></div>
            <div id='circle_reset' style="display: none;"></div>
        </div>
    </div>
    </div>
        <footer>
            <p class="footer"><i>Supersonic by MattediWorks&copy;</i></p>
        </footer>
    </body>

</html>)==="//##$$
        ;
}
//most important
void updateTemperatures()
{
    //    float _temp = 0;
    DS18.requestTemperatures();
    float _temp = DS18.getTempCByIndex(0);

    _temp = random_temp / 10;
    //ReadError

    if (now() >= LastTime + Config.sample_rate_in_seconds)
    {

        if (currentRamp.running || currentRamp.heating)
        {
            if (digitalRead(RELAY_PIN))
                random_temp = random(random_temp, random_temp + 50);
            else
                random_temp = random(random_temp - 50, random_temp);
        }
        else
        {
            random_temp = random(random_temp - 50, random_temp + 50);
        }

        /*String file = "";
        file += "(";
        file += LineCounter;
        file += ") - ";
        file += now();
        file += " - ";
        file += _temp;
        file += "\n";
        SD_File_Writer("/Logs/test.log", file, true);
        LineCounter++;*/

        resetFlags();
        if (is_time_configured)
        {

            if (DS18_CurrentIndex >= HISTORY_SIZE)
            {
                cycle++;
                DS18_CurrentIndex = 0;
            }
            DS18Temp[DS18_CurrentIndex] = _temp;
            DS18Time[DS18_CurrentIndex] = now();
            if (debug.general)
            {
                Serial.print("time:");
                Serial.print(is_time_configured);
                Serial.print(".cycle:");
                Serial.print(cycle);
                Serial.print(".index:");
                Serial.print(DS18_CurrentIndex);
                Serial.print(".Temp:");
                Serial.print(DS18Temp[DS18_CurrentIndex]);
                Serial.print(".Time:");
                Serial.print(DS18Time[DS18_CurrentIndex]);
                Serial.print(".Time from boot:");
                Serial.println(now() - startup_time);
            }
            DS18_CurrentIndex++;
        }
        LastTime = now();
        if (debug.temp)
        {
            Serial.print("current temp: ");
            Serial.print(_temp);
            Serial.println();
        }

        if (currentRamp.running || currentRamp.heating)
        {
            currentRamp.csv(_temp, digitalRead(RELAY_PIN));
        }
    }

    //TODO GREENHOUSE CONTROL
    if (currentRamp.running)
    {
        if (now() >= currentRamp.StepsTimes[currentRamp.currentstep])
        {
            int timeup = millis() - oldMillis;
            String msg = "[";
            msg += timeup;
            msg += " ms.] ";

            currentRamp.currentstep++;
            msg += ">>> step: ";
            if (currentRamp.currentstep >= currentRamp.totalsteps)
                msg += "-";
            else
                msg += currentRamp.currentstep;
            msg += ". Time: ";
            msg += now();
            msg += ". next step: ";
            if (currentRamp.currentstep + 1 >= currentRamp.totalsteps)
                msg += "-";
            else
                msg += currentRamp.StepsTimes[currentRamp.currentstep];
            msg += "\n";
            currentRamp.log(msg);
            Serial.print(msg);
            oldMillis = millis();
            if (currentRamp.currentstep >= currentRamp.totalsteps)
            {
                currentRamp.currentstep--;
                String msg2 = "Ramp Finished. now: ";
                msg2 += now();
                msg2 += ". Step: ";
                msg2 += currentRamp.currentstep;
                msg2 += ".";
                currentRamp.log(msg);
                new_prog = true;
                currentProg = 100;
                currentRamp.csv(_temp, digitalRead(RELAY_PIN), "heat ramp finished");
                EndRamp();
            }
            else
            {
                String comment = "new step:";
                comment += currentRamp.currentstep + 1;
                currentRamp.csv(_temp, digitalRead(RELAY_PIN), comment);
                new_step = true;
            }
        }
        bool oldRelayState = digitalRead(RELAY_PIN);

        //Serial.print(">>>>>>");Serial.println(" _temp < currentRamp.temperatureSteps[currentRamp.currentstep] && oldRelayState");
        //High Temp
        /*
        Serial.print("old: ");
        Serial.print(oldRelayState);
        Serial.print("-t: ");
        Serial.print(_temp);
        Serial.print("-st: ");
        Serial.print( currentRamp.temperatureSteps[currentRamp.currentstep]);
         Serial.print("-ev: ");
        Serial.println(_temp < currentRamp.temperatureSteps[currentRamp.currentstep]);
*/
        if (_temp > currentRamp.temperatureSteps[currentRamp.currentstep] + Config.tolerance && oldRelayState)
        {
            digitalWrite(RELAY_PIN, 0);
            new_relay_state = true;
        }
        //Low Temp
        else if (_temp < currentRamp.temperatureSteps[currentRamp.currentstep] - Config.tolerance && !oldRelayState)
        {
            digitalWrite(RELAY_PIN, 1);
            new_relay_state = true;
        }

        int raw_current = now() - currentRamp.startTime;
        int raw_end = currentRamp.StepsTimes[currentRamp.totalsteps - 1] - currentRamp.startTime;
        byte new_percent = map(raw_current, 0, raw_end, 0, 100);
        //byte new_percent = map(now() - currentRamp.startTime,0,computedEnd - currentRamp.startTime,0,100);

        if (new_percent != currentProg)
        {
            // Serial.print("percent: ");
            // Serial.print(new_percent);
            if (debug.ramp)
            {
                Serial.print("percent: ");
                Serial.print(new_percent);
                Serial.print("%. curr: ");
                Serial.print(raw_current);
                Serial.print(" secs. end: ");
                Serial.print(raw_end);
                Serial.println();
            }
            new_prog = true;
            currentProg = new_percent;
        }
    }

    else if (currentRamp.heating)
    {
        bool oldRelayState = digitalRead(RELAY_PIN);
        if (_temp > currentRamp.temperatureSteps[0] + Config.tolerance && oldRelayState)
        {
            digitalWrite(RELAY_PIN, 0);
            new_relay_state = true;
        }
        if (_temp < currentRamp.temperatureSteps[0] - Config.tolerance && !oldRelayState)
        {
            digitalWrite(RELAY_PIN, 1);
            new_relay_state = true;
        }

        if (_temp >= currentRamp.temperatureSteps[0] - Config.tolerance && _temp <= currentRamp.temperatureSteps[0] + Config.tolerance)
        {
            currentRamp.log("Heating done. Starting ramp.");
            StartRamp();
            currentRamp.csv(_temp, digitalRead(RELAY_PIN), "heating finished");
            currentRamp.heating = false;
        }
    }
    else if (now() > currentRamp.endTime + (HISTORY_SIZE * Config.sample_rate_in_seconds) && currentRamp.finished)
        resetRamp();
}

void handleStart(AsyncWebServerRequest *request)
{

    if (!currentRamp.running)
        StartRamp();

    String msg = "ramp_start:";
    msg += currentRamp.startTime;
    msg += ';';
    msg += "current_state:";
    msg += "true;";
    request->send(200, "text/plain", msg);
}

void handleStop(AsyncWebServerRequest *request)
{
    if (currentRamp.running)
        EndRamp();
    String msg = "";
    request->send(200, "text/plain", msg);
}

void handleReqState(AsyncWebServerRequest *request)
{
    String msg = StateString();
    // Serial.println(msg);
    request->send(200, "text/plain", msg);
}

void handleSetTime(AsyncWebServerRequest *request)
{

    //prevents override --dont trust clients if u can trust time api
    // if(is_time_configured)
    // return;

    if (request->hasArg("time"))
    {
        Serial.print("time recieved from client: ");
        Serial.println(atoi(request->arg((size_t)0).c_str()));
        setTime(atoi(request->arg((size_t)0).c_str()));
        is_time_configured = true;
        startup_time = now() - millis() / 1000;
        String msg = "Time Synced ";
        msg += millis();
        msg += "ms from boot.";
        GeneralLog(msg);
        StandardTesting();
    }

    request->send(200, "text/plain", "set_time-sucess");
    return;
}

void handleWebServer(AsyncWebServerRequest *request)
{

    if (!request->authenticate(Config.www_username.c_str(), Config.www_password.c_str()))
    {
        request->requestAuthentication();
        return;
    }

    ///Check if file exists
    int a = millis();
    String filename = "/Web";
    String apiname = request->url();

    if (apiname.endsWith("/"))
        apiname += "MainPage.html";
    filename += apiname;

    if (debug.web)
    {
        Serial.print("filename: ");
        Serial.print(filename);
        Serial.print("  -----  apiname: ");
        Serial.println(apiname);
    }

    if (apiname == "/reqespupdate")
    {
        if (!is_updating)
        {
            request->send(200, "text/plain", "error:OTA Failed;");
        }
        else
        {
            String msg = "update_progress:";
            msg += update_progress;
            msg += ';';
            request->send(200, "text/plain", msg);
        }

        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    if (is_updating)
    {
        if (apiname != "/Updating.html" && apiname != "/Common.css")
            request->send(200, "text/plain", "go:/Updating.html;");
        else
        {
            if (is_SD_Mount)
                request->send(200, "text/html", SD_MMC.open(filename).readString());
        }

        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }

    int cache = Cache.Contains(apiname);
    if (debug.web)
    {
        Serial.print("cache location: ");
        Serial.println(cache);
    }
    if (cache >= 0)
    {
        AsyncWebServerResponse *res = request->beginResponse(200, getMIME(apiname), Cache.getPagebyIndex(cache));
        request->send(res);
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    if (apiname == "/requpdate")
    {
        handleRequestUpdate(request);
        return;
    }
    else if (apiname == "/reqstate")
    {
        request->send(200, "text/plain", StateString());
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/reqhist")
    {
        handleRequestHist(request);
        return;
    }
    else if (apiname == "/do")
    {
        handleNewRamp(request);
        request->send(200, "text/html", "<html><script>window.location.assign(\"/\")</script></html>");
    }
    else if (apiname == "/Wifilist")
        ;
    else if (apiname == "/settime")
    {
        handleSetTime(request);
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/fileslist")
    {
         AsyncWebServerResponse *res = request->beginResponse(200, "text/plain", listLogFiles());
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/deleteFile")
    {
        String filename = "/Logs/";
        filename += request->arg("fileName");
        String Message = "";
        if (SD_MMC.exists(filename))
        {
            if (filename != "/Logs/General.log")
            {
                SD_MMC.remove(filename);
                String logMsg = "File deleted: ";
                logMsg += filename;
                logMsg += ".";
                GeneralLog(logMsg);
                Message += "delete_sucessful:";
                Message += filename;
                Message += ";";
            }
            else
            {
                Message += "error:Acess Denied.\nYou don't have permission to delete the General Log;";
            }
        }
        else
            Message += "error:File was not Found;";
        Message += listLogFiles();
        request->send(200, "text/plain", Message);
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/loadconfig")
    {
        String config_msg = "config:";
        config_msg += Config.toString();
        request->send(200, "text/plain", config_msg);
        if (debug.web)
        {
            Serial.print("Service Time: ");
            Serial.print(millis() - a);
            Serial.println("ms.");
        }
        return;
    }
    else if (apiname == "/saveconfig")
    {
    }

    if (is_SD_Mount)
    {
        if (debug.web)
        {
            Serial.println("looking in SD Card");
        }
        if (SD_MMC.exists(filename))
        {
            File _file = SD_MMC.open(filename);
            SendLargeFiles(request, _file);
            _file.close();
            if (debug.web)
            {
                Serial.print("Service Time: ");
                Serial.print(millis() - a);
                Serial.println("ms.");
            }
            return;
        }
        else if (SD_MMC.exists(filename + ".html"))
        {
            File _file = SD_MMC.open(filename + ".html");
            SendLargeFiles(request, _file);
            _file.close();
            if (debug.web)
            {
                Serial.print("Service Time: ");
                Serial.print(millis() - a);
                Serial.println("ms.");
            }
            return;
        }
        else if (SD_MMC.exists(filename + ".css"))
        {
            File _file = SD_MMC.open(filename + ".css");
            SendLargeFiles(request, _file);
            _file.close();
            if (debug.web)
            {
                Serial.print("Service Time: ");
                Serial.print(millis() - a);
                Serial.println("ms.");
            }
            return;
        }
        else if (SD_MMC.exists(filename + ".js"))
        {
            File _file = SPIFFS.open(filename + ".js");
            SendLargeFiles(request, _file);
            _file.close();
            if (debug.web)
            {
                Serial.print("Service Time: ");
                Serial.print(millis() - a);
                Serial.println("ms.");
            }
            return;
        }
        else if (SD_MMC.exists(apiname))
        {
            File _file = SD_MMC.open(apiname);
            SendLargeFiles(request, _file);
            _file.close();
            if (debug.web)
            {
                Serial.print("Service Time: ");
                Serial.print(millis() - a);
                Serial.println("ms.");
            }
            return;
        }
    }

    else if (is_SPIFFSS_Mount)
    {
        if (debug.web)
        {
            Serial.println("looking in SPIFFS");
        }

        if (SPIFFS.exists(filename))
        {
            File _file = SPIFFS.open(filename);
            request->send(200, getMIME(filename), _file.readString());
            _file.close();
            return;
        }
        else if (SPIFFS.exists(filename + ".html"))
        {
            File _file = SPIFFS.open(filename + ".html");
            request->send(200, getMIME(filename + ".html"), _file.readString());
            _file.close();
            Serial.print(millis() - a);
            Serial.println("ms.");
            return;
        }
        else if (SPIFFS.exists(filename + ".css"))
        {
            File _file = SPIFFS.open(filename + ".css");
            request->send(200, getMIME(filename + ".css"), _file.readString());
            _file.close();
            return;
        }
        else if (SPIFFS.exists(filename + ".js"))
        {
            File _file = SPIFFS.open(filename + ".js");
            request->send(200, getMIME(filename + ".js"), _file.readString());
            _file.close();
            return;
        }
    }

    String message = "File Not Found\n\n";
    message += "URI: ";
    message += request->url();
    message += "\nMethod: ";
    message += request->method();
    message += "\nArguments: ";
    message += request->args();
    message += "\n";

    for (uint8_t i = 0; i < request->args(); i++)
    {
        message += " " + request->argName(i) + ": " + request->arg(i) + "\n";
    }
    request->send(404, "text/plain", message);
    if (debug.web)
    {
        Serial.println(message);
        Serial.print("Service Time: ");
        Serial.print(millis() - a);
        Serial.println("ms.");
    }
    return;
}

class EstufaRequestHandler : public AsyncWebHandler
{
public:
    EstufaRequestHandler() {}
    virtual ~EstufaRequestHandler() {}

    bool canHandle(AsyncWebServerRequest *request)
    {
        //request->addInterestingHeader("ANY");
        return true;
    }

    void handleRequest(AsyncWebServerRequest *request)
    {
        handleWebServer(request);
    }
};

String getApAvailables()
{
    String returnmsg = "";
    byte numSsid = WiFi.scanNetworks();
    Serial.print("Number of available WiFi networks discovered:");
    Serial.println(numSsid);
    for (byte i = 0; i < numSsid; i++)
    {
        Serial.print(i);
        Serial.print(") ");
        Serial.print(WiFi.SSID(i));
        Serial.print("\tSignal: ");
        Serial.print(WiFi.RSSI(i));
        Serial.print(" dBm");
        Serial.print("\tEncryption: ");
        Serial.println(WiFi.encryptionType(i));

        returnmsg += WiFi.SSID(i);
        returnmsg += ':';
        returnmsg += WiFi.RSSI(i);
        returnmsg += ';';
    }

    return returnmsg;
}

#pragma region OTA
void startOTA()
{
    String type;
    is_updating = true;
    //caso a atualização esteja sendo gravada na memória flash externa, então informa "flash"
    SPIFFS.end();
    if (ArduinoOTA.getCommand() == 0)
        type = "flash";
    else                     //caso a atualização seja feita pela memória interna (file system), então informa "filesystem"
        type = "filesystem"; // U_SPIFFS
    //exibe mensagem junto ao tipo de gravação
    Serial.println("Start updating " + type);
}
//exibe mensagem
void endOTA()
{
    Serial.println("\nEnd");
}
//exibe progresso em porcentagem
void progressOTA(unsigned int progress, unsigned int total)
{
    update_progress = (float)progress / total * 100;
    Serial.printf("Progress: %u%%\r\n", (progress / (total / 100)));
}

void errorOTA(ota_error_t error)
{
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR)
        Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR)
        Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR)
        Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR)
        Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR)
        Serial.println("End Failed");

    is_updating = false;
}
#pragma endregion

void listAllFiles(String dir = "/", bool SD_card = false, byte treesize = 0)
{
    ///SPIFFS mode
    if (!SD_card)
    {
        // List all available files (if any) in the SPI Flash File System
        if (!is_SPIFFSS_Mount)
        {
            Serial.print("SPIFFS not Mount");
            return;
        }
        Serial.print("Used Bytes: ");
        Serial.print(SPIFFS.usedBytes());
        Serial.print("-----Total Bytes: ");
        Serial.print(SPIFFS.totalBytes());
        Serial.print("-----Used: ");
        Serial.print(map(SPIFFS.usedBytes(), 0, SPIFFS.totalBytes(), 0, 100));
        Serial.println("%");
        Serial.print("Listing files in: ");
        Serial.println(dir);
        File root = SPIFFS.open(dir);
        File file = root.openNextFile();
        while (file)
        {
            for (size_t i = 0; i < treesize; i++)
            {
                Serial.print("--");
            }
            Serial.print("FILE: ");
            Serial.print(file.path());
            Serial.print(" size: ");
            Serial.print((float)file.size() / 1024);
            Serial.println("Kb");
            if (file.isDirectory())
                listAllFiles(file.path(), false, treesize + 1);
            file = root.openNextFile();
        }
        root.close();
        file.close();
    }
    //SD card mode
    else if (SD_card)
    {
        if (!is_SD_Mount)
        {
            Serial.print("SD card not Mount");
            return;
        }
        if (treesize == 0)
        {
            Serial.print("Used Bytes: ");
            Serial.print(SD_MMC.usedBytes());
            Serial.print("-----Total Bytes: ");
            Serial.print(SD_MMC.totalBytes());
            Serial.print("-----Used: ");
            Serial.print(map(SD_MMC.usedBytes(), 0, SD_MMC.totalBytes(), 0, 100));
            Serial.println("%");
            Serial.print("Listing files in: ");
            Serial.println(dir);
        }
        File root = SD_MMC.open(dir);
        File file = root.openNextFile();
        while (file)
        {
            for (size_t i = 0; i < treesize; i++)
            {
                Serial.print("--");
            }

            Serial.print("FILE: ");
            Serial.print(file.path());
            Serial.print(" size: ");
            Serial.print((float)file.size() / 1024);
            Serial.println("Kb");
            if (file.isDirectory())
                listAllFiles(file.path(), true, treesize + 1);
            file = root.openNextFile();
        }
        root.close();
        file.close();
        // if (root.path() == "/Logs")
        // SD_MMC.remove(file.path());
    }
}

void loadConfig()
{
    byte mode = 0x0;

    if (is_SPIFFSS_Mount)
    {
        if (SPIFFS.exists("/config.cfg"))
            mode = 0x02;
        else
            mode = 0x01;
    }
    if (is_SD_Mount)
    {
        if (SD_MMC.exists("/config.cfg"))
            mode += 0x20;
        else
            mode += 0x10;
    }

#ifdef DEBUGMODE

    Serial.println("----- Config loader -----");
    Serial.println("mode = 0xab || a = SPIFFS. b = SD. || 0 = not mount 1 = mount 2 = found.");
    Serial.print("#########    mode = 0x");
    if (mode < 0x10)
        Serial.print(0);
    Serial.print(mode, HEX);
    Serial.println("    #########");
    Serial.println("----- Config loader END-----");

#endif

    if (mode == 0x0)
    {
        Serial.println("SPIFFS and SD filesystems not Found.");
        return;
    }

    else if (mode == 0x21 || mode == 0x20)
    {
        Serial.println("SPIFFS config not found, loading from SD.");
        if (mode == 0x21)
        {
            Serial.println("Making a copy of SD card's one into SPIFFS");
        }

        Config.fromString(SD_MMC.open("/config.cfg").readString());
    }

    else if (mode == 0x22)
    {
        Serial.println("Found Config.cfg files in both SD and SPIFFS. Loading from SD");
        Config.fromString(SD_MMC.open("/config.cfg").readString());
    }
    else if (mode == 0x12 || mode == 0x02)
    {
        Serial.println("Found Config.cfg in SPIFFS. Loading...");
        Config.fromString(SPIFFS.open("/config.cfg").readString());
    }
    else if (mode == 0x11 || mode == 0x10 || mode == 0x01)
    {
        Serial.println("No Config.cfg found. Creating one....?");
    }
}

void listDir(fs::FS &fs, const char *dirname, byte filetree = 1)
{
    if (filetree == 1)
        Serial.printf("Listing directory: %s\n", dirname);

    File root = fs.open(dirname);
    if (!root)
    {
        Serial.println("Failed to open directory");
        return;
    }
    if (!root.isDirectory())
    {
        Serial.println("Not a directory");
        return;
    }

    File file = root.openNextFile();
    while (file)
    {
        Serial.print(' ');
        for (size_t i = 0; i < filetree; i++)
        {
            Serial.print("--");
        }

        if (file.isDirectory())
        {
            Serial.print("DIR : ");
            Serial.print(file.name());
            Serial.println();
            String subdirname = dirname;
            subdirname += file.name();
            listDir(fs, subdirname.c_str(), filetree++);
        }
        else
        {
            Serial.print("FILE: ");
            Serial.print(file.name());
            Serial.print("  SIZE: ");
            Serial.print(file.size());
            Serial.println();
        }
        file = root.openNextFile();
    }

    Serial.println();
}

void clearDir(String dir)
{
    if (!is_SD_Mount)
    {
        return;
    }

    Serial.print("Deleting all files in: ");
    Serial.println(dir);
    File root = SD_MMC.open(dir);
    File file = root.openNextFile();
    while (file)
    {
        SD_MMC.remove(file.path());
        file = root.openNextFile();
        Serial.print(".");
    }
    Serial.println("Done.");
}

void StandardTesting()
{

    float temps[5] = {40.5, 50.5, 30.5, 50.4, 60};
    float mins[5] = {1.5, 2.6, 1.4, 1.6, 1};
    String pname = "stdTest";

    currentRamp.totalsteps = 5;
    for (size_t i = 0; i < 5; i++)
    {
        currentRamp.minuteSteps[i] = mins[i];
        currentRamp.temperatureSteps[i] = temps[i];
    }
    currentRamp.projectName = pname;
    currentRamp.startLogs();
    currentRamp.configured = true;
    debug.ramp = true;
    currentRamp.heatUp = true;
    StartRamp();
}

void setup()
{
    Serial.begin(115200); //Start Serial

    if (SD_MMC.begin("/sd", true, false))
    is_SD_Mount = true;
    
    int oldTime = millis();

    //Initializing Arrays and Data Structs.
    for (int i = 0; i < HISTORY_SIZE; i++)
    {
        DS18Temp[i] = DS18Time[i] = 0;
    }
    currentRamp.reset();
    lastRamp.reset();

    //Start SPIFFS

    if (!SPIFFS.begin()) //Start SPIFFS
    {
        Serial.println("Error initializing SPIFFS");
        is_SPIFFSS_Mount = false;
    }
    else
    {
        Serial.print("SPIFFS mounted. Size: ");
        Serial.print(SPIFFS.totalBytes() / 1024);
        Serial.print("kb.  Used: ");
        Serial.print((float)SPIFFS.usedBytes() / SPIFFS.totalBytes() * 100);
        Serial.println("%");
        is_SPIFFSS_Mount = true;
    }
    
    
    //Start SD Card

    if (!is_SD_Mount)
        Serial.println("Error initializing SD");
    else
    {
        Serial.print("SD Card mounted. Size: ");
        Serial.print(SD_MMC.cardSize() / 1024 / 1024);
        Serial.print("Mb.  Used: ");
        Serial.print((float)(SD_MMC.usedBytes()) / SD_MMC.totalBytes() * 100);
        Serial.println("%");
    }

    SD_File_Writer("/Web/MainPage.html", getPage());
    SD_File_Writer("/Web/CommonScript.js", getPage2());
    SD_File_Writer("/Web/Files.html", getPage3());
    SD_File_Writer("/Web/Updating.html", getPage4());

    pinMode(RELAY_PIN, OUTPUT); //Set the Relay pin to output

    WiFi.mode(WIFI_STA); //WiFi Station Mode
    WiFi.begin(Config.WIFI_SSID.c_str(), Config.WIFI_PASSWORD.c_str());

    bool createAp = false;

    bool beauty = true;
    while (WiFi.status() != WL_CONNECTED && !createAp)
    {
        if (millis() % 100 == 0 && beauty)
        {
            Serial.print(".");
            beauty = false;
        }
        else if (millis() % 100 != 0)
        {
            beauty = true;
        }

        if (millis() - oldTime > 14999)
        {
            Serial.printf("\nNetwork '%s' not found.\n", Config.WIFI_SSID);
            createAp = true;
        }
    }

    if (createAp)
    {
        WiFi.mode(WIFI_AP_STA);
        WiFi.softAP(WIFI_AP_SSID, WIFI_AP_PASSWORD);
        // dnsServer.start(53, "*", WiFi.softAPIP());
        Serial.println("");
        Serial.print("Creating WiFi Ap.SSID:  ");
        Serial.println(WIFI_AP_SSID);
        Serial.print("IP address: ");
        Serial.println(WiFi.softAPIP());
    }
    else
    {

        Serial.println();
        Serial.print("Connected to ");
        Serial.println(Config.WIFI_SSID);
        Serial.print("IP address: ");
        Serial.println(WiFi.localIP());
    }

    // server.on("/", handleRoot);
    // server.onNotFound(handleWebServer);
    // server.on("/doPage", handleDoPage);
    // server.on("/do", handleNewRamp);

    // server.on("/Common.css", handleCSS);
    // server.on("/requpdate", handleRequestUpdate);
    // server.on("/reqhist", handleRequestHist);
    // server.on("/CommonScript.js", handleCommonJs);
    // server.on("/FileSaver.js", handleFileSaverjs);
    // server.on("/favicon.ico", handlefav);
    // server.on("/reqstate", handleReqState);
    // server.on("/start", handleStart);
    // server.on("/stop", handleStop);
    // server.on("/settime", handleSetTime);

    // server.addHandler(new CaptiveRequestHandler()).setFilter(ON_AP_FILTER); //only when requested from AP
    //more handlers...server.begin();

    //Start HTTP Server
    server.addHandler(new EstufaRequestHandler()).setFilter(ON_STA_FILTER);

    if (MDNS.begin(DNS_NAME)) //DNS_NAME.local/
    {
        Serial.println("MDNS responder started");
    }

    // ArduinoOTA.setPassword("admin");
    // Password can be set with it's md5 value as well
    // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
    // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");
    // ArduinoOTA.setHostname("ESTUFA");
    ArduinoOTA.onStart(startOTA);
    ArduinoOTA.onEnd(endOTA);
    ArduinoOTA.onProgress(progressOTA);
    ArduinoOTA.onError(errorOTA);
    ArduinoOTA.begin();

    GeneralLog("Booted");
    getTime();
    DS18.begin();

    server.begin();
    Serial.println("HTTP server started");
    Serial.print("Setup done. time: ");
    Serial.print(millis() - oldTime);
    Serial.println("ms");

    Cache.setup();
    Cache.LoadPage("/FileSaver.js", "/Web/FileSaver.js");
    Cache.LoadPage("/doPage.html", "/Web/doPage.html");
    Cache.LoadPage("/MainPage.html", "/Web/MainPage.html");
    Cache.LoadPage("/Common.css", "/Web/Common.css");

    digitalWrite(4, 1);
    delay(4000);
    digitalWrite(4, 0);
}

void loop()
{

    // oldLoopMillis = millis();
    ArduinoOTA.handle();
    // request->handleClient();
    updateTemperatures();
    // Serial.print("run time: ");
    // Serial.print(millis() - time);
    // Serial.println("ms");
    if (Serial.available())
    {
        String s = "";
        while (Serial.available() > 0)
        {
            char c = Serial.read();
            if (c != 10 && c != 13)
            {
                s += c;

                //Serial.print((int)c);
                //Serial.print('.');
            }
        }
        if (s != "")
        {
            Serial.print(">");
            Serial.println(s);
        }
        if (s == "web")
        {
            listDir(SD_MMC, "/Web");
        }
        else if (s == "debug web")
        {
            debug.web = !debug.web;
            Serial.print("Debug Web is now: ");
            Serial.println(debug.web);
        }
        else if (s == "debug ramp")
        {
            debug.ramp = !debug.ramp;
            Serial.print("Debug ramp is now: ");
            Serial.println(debug.ramp);
        }
        else if (s == "debug temp")
        {
            debug.temp = !debug.temp;
            Serial.print("Debug temp is now: ");
            Serial.println(debug.temp);
        }
        else if (s == "debug log")
        {
            debug.log = !debug.log;
            Serial.print("Debug log is now: ");
            Serial.println(debug.log);
        }
        else if (s == "debug general")
        {
            debug.general = !debug.general;
            Serial.print("Debug general is now: ");
            Serial.println(debug.general);
        }
        else if (s == "heatramp")
        {
            Serial.println(currentRamp.toString());
        }
        else if (s == "mem")
        {
            int mem = ESP.getFreeHeap();
            Serial.print("Free Heap: ");
            Serial.print(mem / 1024);
            Serial.println("kb.");
        }
        else if (s == "cache")
        {
            for (size_t i = 0; i < MAX_CACHE_PAGES; i++)
            {
                Serial.print("(");
                Serial.print(i);
                Serial.print(") Key: ");
                Serial.print(Cache.Keys[i]);
            }
        }
        else if (s == "led")
        {
            digitalWrite(4, !digitalRead(4));
        }
        else if (SD_MMC.exists(s))
        {
            Serial.print("FILE: ");
            Serial.println(s);
            Serial.println("-------------");
            if (SD_MMC.open(s).isDirectory())
                listAllFiles(s, true);
            else
                Serial.println(SD_MMC.open(s).readString());
            Serial.println("-------------");
        }
    }

    //   Serial.print("loop Time:");
    //  Serial.print(millis() - oldLoopMillis);
    //  Serial.println("ms.");
}